(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.XBuyButtonWidget = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

/*!
 * Bowser - a browser detector
 * https://github.com/ded/bowser
 * MIT License | (c) Dustin Diaz 2015
 */
!function (root, name, definition) {
  if (typeof module != 'undefined' && module.exports) module.exports = definition();else if (typeof define == 'function' && define.amd) define(name, definition);else root[name] = definition();
}(void 0, 'bowser', function () {
  /**
    * See useragents.js for examples of navigator.userAgent
    */
  var t = true;

  function detect(ua) {
    function getFirstMatch(regex) {
      var match = ua.match(regex);
      return match && match.length > 1 && match[1] || '';
    }

    function getSecondMatch(regex) {
      var match = ua.match(regex);
      return match && match.length > 1 && match[2] || '';
    }

    var iosdevice = getFirstMatch(/(ipod|iphone|ipad)/i).toLowerCase(),
        likeAndroid = /like android/i.test(ua),
        android = !likeAndroid && /android/i.test(ua),
        nexusMobile = /nexus\s*[0-6]\s*/i.test(ua),
        nexusTablet = !nexusMobile && /nexus\s*[0-9]+/i.test(ua),
        chromeos = /CrOS/.test(ua),
        silk = /silk/i.test(ua),
        sailfish = /sailfish/i.test(ua),
        tizen = /tizen/i.test(ua),
        webos = /(web|hpw)(o|0)s/i.test(ua),
        windowsphone = /windows phone/i.test(ua),
        samsungBrowser = /SamsungBrowser/i.test(ua),
        windows = !windowsphone && /windows/i.test(ua),
        mac = !iosdevice && !silk && /macintosh/i.test(ua),
        linux = !android && !sailfish && !tizen && !webos && /linux/i.test(ua),
        edgeVersion = getSecondMatch(/edg([ea]|ios)\/(\d+(\.\d+)?)/i),
        versionIdentifier = getFirstMatch(/version\/(\d+(\.\d+)?)/i),
        tablet = /tablet/i.test(ua) && !/tablet pc/i.test(ua),
        mobile = !tablet && /[^-]mobi/i.test(ua),
        xbox = /xbox/i.test(ua),
        result;

    if (/opera/i.test(ua)) {
      //  an old Opera
      result = {
        name: 'Opera',
        opera: t,
        version: versionIdentifier || getFirstMatch(/(?:opera|opr|opios)[\s\/](\d+(\.\d+)?)/i)
      };
    } else if (/opr\/|opios/i.test(ua)) {
      // a new Opera
      result = {
        name: 'Opera',
        opera: t,
        version: getFirstMatch(/(?:opr|opios)[\s\/](\d+(\.\d+)?)/i) || versionIdentifier
      };
    } else if (/SamsungBrowser/i.test(ua)) {
      result = {
        name: 'Samsung Internet for Android',
        samsungBrowser: t,
        version: versionIdentifier || getFirstMatch(/(?:SamsungBrowser)[\s\/](\d+(\.\d+)?)/i)
      };
    } else if (/Whale/i.test(ua)) {
      result = {
        name: 'NAVER Whale browser',
        whale: t,
        version: getFirstMatch(/(?:whale)[\s\/](\d+(?:\.\d+)+)/i)
      };
    } else if (/MZBrowser/i.test(ua)) {
      result = {
        name: 'MZ Browser',
        mzbrowser: t,
        version: getFirstMatch(/(?:MZBrowser)[\s\/](\d+(?:\.\d+)+)/i)
      };
    } else if (/coast/i.test(ua)) {
      result = {
        name: 'Opera Coast',
        coast: t,
        version: versionIdentifier || getFirstMatch(/(?:coast)[\s\/](\d+(\.\d+)?)/i)
      };
    } else if (/focus/i.test(ua)) {
      result = {
        name: 'Focus',
        focus: t,
        version: getFirstMatch(/(?:focus)[\s\/](\d+(?:\.\d+)+)/i)
      };
    } else if (/yabrowser/i.test(ua)) {
      result = {
        name: 'Yandex Browser',
        yandexbrowser: t,
        version: versionIdentifier || getFirstMatch(/(?:yabrowser)[\s\/](\d+(\.\d+)?)/i)
      };
    } else if (/ucbrowser/i.test(ua)) {
      result = {
        name: 'UC Browser',
        ucbrowser: t,
        version: getFirstMatch(/(?:ucbrowser)[\s\/](\d+(?:\.\d+)+)/i)
      };
    } else if (/mxios/i.test(ua)) {
      result = {
        name: 'Maxthon',
        maxthon: t,
        version: getFirstMatch(/(?:mxios)[\s\/](\d+(?:\.\d+)+)/i)
      };
    } else if (/epiphany/i.test(ua)) {
      result = {
        name: 'Epiphany',
        epiphany: t,
        version: getFirstMatch(/(?:epiphany)[\s\/](\d+(?:\.\d+)+)/i)
      };
    } else if (/puffin/i.test(ua)) {
      result = {
        name: 'Puffin',
        puffin: t,
        version: getFirstMatch(/(?:puffin)[\s\/](\d+(?:\.\d+)?)/i)
      };
    } else if (/sleipnir/i.test(ua)) {
      result = {
        name: 'Sleipnir',
        sleipnir: t,
        version: getFirstMatch(/(?:sleipnir)[\s\/](\d+(?:\.\d+)+)/i)
      };
    } else if (/k-meleon/i.test(ua)) {
      result = {
        name: 'K-Meleon',
        kMeleon: t,
        version: getFirstMatch(/(?:k-meleon)[\s\/](\d+(?:\.\d+)+)/i)
      };
    } else if (windowsphone) {
      result = {
        name: 'Windows Phone',
        osname: 'Windows Phone',
        windowsphone: t
      };

      if (edgeVersion) {
        result.msedge = t;
        result.version = edgeVersion;
      } else {
        result.msie = t;
        result.version = getFirstMatch(/iemobile\/(\d+(\.\d+)?)/i);
      }
    } else if (/msie|trident/i.test(ua)) {
      result = {
        name: 'Internet Explorer',
        msie: t,
        version: getFirstMatch(/(?:msie |rv:)(\d+(\.\d+)?)/i)
      };
    } else if (chromeos) {
      result = {
        name: 'Chrome',
        osname: 'Chrome OS',
        chromeos: t,
        chromeBook: t,
        chrome: t,
        version: getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
      };
    } else if (/edg([ea]|ios)/i.test(ua)) {
      result = {
        name: 'Microsoft Edge',
        msedge: t,
        version: edgeVersion
      };
    } else if (/vivaldi/i.test(ua)) {
      result = {
        name: 'Vivaldi',
        vivaldi: t,
        version: getFirstMatch(/vivaldi\/(\d+(\.\d+)?)/i) || versionIdentifier
      };
    } else if (sailfish) {
      result = {
        name: 'Sailfish',
        osname: 'Sailfish OS',
        sailfish: t,
        version: getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i)
      };
    } else if (/seamonkey\//i.test(ua)) {
      result = {
        name: 'SeaMonkey',
        seamonkey: t,
        version: getFirstMatch(/seamonkey\/(\d+(\.\d+)?)/i)
      };
    } else if (/firefox|iceweasel|fxios/i.test(ua)) {
      result = {
        name: 'Firefox',
        firefox: t,
        version: getFirstMatch(/(?:firefox|iceweasel|fxios)[ \/](\d+(\.\d+)?)/i)
      };

      if (/\((mobile|tablet);[^\)]*rv:[\d\.]+\)/i.test(ua)) {
        result.firefoxos = t;
        result.osname = 'Firefox OS';
      }
    } else if (silk) {
      result = {
        name: 'Amazon Silk',
        silk: t,
        version: getFirstMatch(/silk\/(\d+(\.\d+)?)/i)
      };
    } else if (/phantom/i.test(ua)) {
      result = {
        name: 'PhantomJS',
        phantom: t,
        version: getFirstMatch(/phantomjs\/(\d+(\.\d+)?)/i)
      };
    } else if (/slimerjs/i.test(ua)) {
      result = {
        name: 'SlimerJS',
        slimer: t,
        version: getFirstMatch(/slimerjs\/(\d+(\.\d+)?)/i)
      };
    } else if (/blackberry|\bbb\d+/i.test(ua) || /rim\stablet/i.test(ua)) {
      result = {
        name: 'BlackBerry',
        osname: 'BlackBerry OS',
        blackberry: t,
        version: versionIdentifier || getFirstMatch(/blackberry[\d]+\/(\d+(\.\d+)?)/i)
      };
    } else if (webos) {
      result = {
        name: 'WebOS',
        osname: 'WebOS',
        webos: t,
        version: versionIdentifier || getFirstMatch(/w(?:eb)?osbrowser\/(\d+(\.\d+)?)/i)
      };
      /touchpad\//i.test(ua) && (result.touchpad = t);
    } else if (/bada/i.test(ua)) {
      result = {
        name: 'Bada',
        osname: 'Bada',
        bada: t,
        version: getFirstMatch(/dolfin\/(\d+(\.\d+)?)/i)
      };
    } else if (tizen) {
      result = {
        name: 'Tizen',
        osname: 'Tizen',
        tizen: t,
        version: getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.\d+)?)/i) || versionIdentifier
      };
    } else if (/qupzilla/i.test(ua)) {
      result = {
        name: 'QupZilla',
        qupzilla: t,
        version: getFirstMatch(/(?:qupzilla)[\s\/](\d+(?:\.\d+)+)/i) || versionIdentifier
      };
    } else if (/chromium/i.test(ua)) {
      result = {
        name: 'Chromium',
        chromium: t,
        version: getFirstMatch(/(?:chromium)[\s\/](\d+(?:\.\d+)?)/i) || versionIdentifier
      };
    } else if (/chrome|crios|crmo/i.test(ua)) {
      result = {
        name: 'Chrome',
        chrome: t,
        version: getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
      };
    } else if (android) {
      result = {
        name: 'Android',
        version: versionIdentifier
      };
    } else if (/safari|applewebkit/i.test(ua)) {
      result = {
        name: 'Safari',
        safari: t
      };

      if (versionIdentifier) {
        result.version = versionIdentifier;
      }
    } else if (iosdevice) {
      result = {
        name: iosdevice == 'iphone' ? 'iPhone' : iosdevice == 'ipad' ? 'iPad' : 'iPod'
      }; // WTF: version is not part of user agent in web apps

      if (versionIdentifier) {
        result.version = versionIdentifier;
      }
    } else if (/googlebot/i.test(ua)) {
      result = {
        name: 'Googlebot',
        googlebot: t,
        version: getFirstMatch(/googlebot\/(\d+(\.\d+))/i) || versionIdentifier
      };
    } else {
      result = {
        name: getFirstMatch(/^(.*)\/(.*) /),
        version: getSecondMatch(/^(.*)\/(.*) /)
      };
    } // set webkit or gecko flag for browsers based on these engines


    if (!result.msedge && /(apple)?webkit/i.test(ua)) {
      if (/(apple)?webkit\/537\.36/i.test(ua)) {
        result.name = result.name || "Blink";
        result.blink = t;
      } else {
        result.name = result.name || "Webkit";
        result.webkit = t;
      }

      if (!result.version && versionIdentifier) {
        result.version = versionIdentifier;
      }
    } else if (!result.opera && /gecko\//i.test(ua)) {
      result.name = result.name || "Gecko";
      result.gecko = t;
      result.version = result.version || getFirstMatch(/gecko\/(\d+(\.\d+)?)/i);
    } // set OS flags for platforms that have multiple browsers


    if (!result.windowsphone && (android || result.silk)) {
      result.android = t;
      result.osname = 'Android';
    } else if (!result.windowsphone && iosdevice) {
      result[iosdevice] = t;
      result.ios = t;
      result.osname = 'iOS';
    } else if (mac) {
      result.mac = t;
      result.osname = 'macOS';
    } else if (xbox) {
      result.xbox = t;
      result.osname = 'Xbox';
    } else if (windows) {
      result.windows = t;
      result.osname = 'Windows';
    } else if (linux) {
      result.linux = t;
      result.osname = 'Linux';
    }

    function getWindowsVersion(s) {
      switch (s) {
        case 'NT':
          return 'NT';

        case 'XP':
          return 'XP';

        case 'NT 5.0':
          return '2000';

        case 'NT 5.1':
          return 'XP';

        case 'NT 5.2':
          return '2003';

        case 'NT 6.0':
          return 'Vista';

        case 'NT 6.1':
          return '7';

        case 'NT 6.2':
          return '8';

        case 'NT 6.3':
          return '8.1';

        case 'NT 10.0':
          return '10';

        default:
          return undefined;
      }
    } // OS version extraction


    var osVersion = '';

    if (result.windows) {
      osVersion = getWindowsVersion(getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i));
    } else if (result.windowsphone) {
      osVersion = getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i);
    } else if (result.mac) {
      osVersion = getFirstMatch(/Mac OS X (\d+([_\.\s]\d+)*)/i);
      osVersion = osVersion.replace(/[_\s]/g, '.');
    } else if (iosdevice) {
      osVersion = getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i);
      osVersion = osVersion.replace(/[_\s]/g, '.');
    } else if (android) {
      osVersion = getFirstMatch(/android[ \/-](\d+(\.\d+)*)/i);
    } else if (result.webos) {
      osVersion = getFirstMatch(/(?:web|hpw)os\/(\d+(\.\d+)*)/i);
    } else if (result.blackberry) {
      osVersion = getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i);
    } else if (result.bada) {
      osVersion = getFirstMatch(/bada\/(\d+(\.\d+)*)/i);
    } else if (result.tizen) {
      osVersion = getFirstMatch(/tizen[\/\s](\d+(\.\d+)*)/i);
    }

    if (osVersion) {
      result.osversion = osVersion;
    } // device type extraction


    var osMajorVersion = !result.windows && osVersion.split('.')[0];

    if (tablet || nexusTablet || iosdevice == 'ipad' || android && (osMajorVersion == 3 || osMajorVersion >= 4 && !mobile) || result.silk) {
      result.tablet = t;
    } else if (mobile || iosdevice == 'iphone' || iosdevice == 'ipod' || android || nexusMobile || result.blackberry || result.webos || result.bada) {
      result.mobile = t;
    } // Graded Browser Support
    // http://developer.yahoo.com/yui/articles/gbs


    if (result.msedge || result.msie && result.version >= 10 || result.yandexbrowser && result.version >= 15 || result.vivaldi && result.version >= 1.0 || result.chrome && result.version >= 20 || result.samsungBrowser && result.version >= 4 || result.whale && compareVersions([result.version, '1.0']) === 1 || result.mzbrowser && compareVersions([result.version, '6.0']) === 1 || result.focus && compareVersions([result.version, '1.0']) === 1 || result.firefox && result.version >= 20.0 || result.safari && result.version >= 6 || result.opera && result.version >= 10.0 || result.ios && result.osversion && result.osversion.split(".")[0] >= 6 || result.blackberry && result.version >= 10.1 || result.chromium && result.version >= 20) {
      result.a = t;
    } else if (result.msie && result.version < 10 || result.chrome && result.version < 20 || result.firefox && result.version < 20.0 || result.safari && result.version < 6 || result.opera && result.version < 10.0 || result.ios && result.osversion && result.osversion.split(".")[0] < 6 || result.chromium && result.version < 20) {
      result.c = t;
    } else result.x = t;

    return result;
  }

  var bowser = detect(typeof navigator !== 'undefined' ? navigator.userAgent || '' : '');

  bowser.test = function (browserList) {
    for (var i = 0; i < browserList.length; ++i) {
      var browserItem = browserList[i];

      if (typeof browserItem === 'string') {
        if (browserItem in bowser) {
          return true;
        }
      }
    }

    return false;
  };
  /**
   * Get version precisions count
   *
   * @example
   *   getVersionPrecision("1.10.3") // 3
   *
   * @param  {string} version
   * @return {number}
   */


  function getVersionPrecision(version) {
    return version.split(".").length;
  }
  /**
   * Array::map polyfill
   *
   * @param  {Array} arr
   * @param  {Function} iterator
   * @return {Array}
   */


  function map(arr, iterator) {
    var result = [],
        i;

    if (Array.prototype.map) {
      return Array.prototype.map.call(arr, iterator);
    }

    for (i = 0; i < arr.length; i++) {
      result.push(iterator(arr[i]));
    }

    return result;
  }
  /**
   * Calculate browser version weight
   *
   * @example
   *   compareVersions(['1.10.2.1',  '1.8.2.1.90'])    // 1
   *   compareVersions(['1.010.2.1', '1.09.2.1.90']);  // 1
   *   compareVersions(['1.10.2.1',  '1.10.2.1']);     // 0
   *   compareVersions(['1.10.2.1',  '1.0800.2']);     // -1
   *
   * @param  {Array<String>} versions versions to compare
   * @return {Number} comparison result
   */


  function compareVersions(versions) {
    // 1) get common precision for both versions, for example for "10.0" and "9" it should be 2
    var precision = Math.max(getVersionPrecision(versions[0]), getVersionPrecision(versions[1]));
    var chunks = map(versions, function (version) {
      var delta = precision - getVersionPrecision(version); // 2) "9" -> "9.0" (for precision = 2)

      version = version + new Array(delta + 1).join(".0"); // 3) "9.0" -> ["000000000"", "000000009"]

      return map(version.split("."), function (chunk) {
        return new Array(20 - chunk.length).join("0") + chunk;
      }).reverse();
    }); // iterate in reverse order by reversed chunks array

    while (--precision >= 0) {
      // 4) compare: "000000009" > "000000010" = false (but "9" > "10" = true)
      if (chunks[0][precision] > chunks[1][precision]) {
        return 1;
      } else if (chunks[0][precision] === chunks[1][precision]) {
        if (precision === 0) {
          // all version chunks are same
          return 0;
        }
      } else {
        return -1;
      }
    }
  }
  /**
   * Check if browser is unsupported
   *
   * @example
   *   bowser.isUnsupportedBrowser({
   *     msie: "10",
   *     firefox: "23",
   *     chrome: "29",
   *     safari: "5.1",
   *     opera: "16",
   *     phantom: "534"
   *   });
   *
   * @param  {Object}  minVersions map of minimal version to browser
   * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map
   * @param  {String}  [ua] user agent string
   * @return {Boolean}
   */


  function isUnsupportedBrowser(minVersions, strictMode, ua) {
    var _bowser = bowser; // make strictMode param optional with ua param usage

    if (typeof strictMode === 'string') {
      ua = strictMode;
      strictMode = void 0;
    }

    if (strictMode === void 0) {
      strictMode = false;
    }

    if (ua) {
      _bowser = detect(ua);
    }

    var version = "" + _bowser.version;

    for (var browser in minVersions) {
      if (minVersions.hasOwnProperty(browser)) {
        if (_bowser[browser]) {
          if (typeof minVersions[browser] !== 'string') {
            throw new Error('Browser version in the minVersion map should be a string: ' + browser + ': ' + String(minVersions));
          } // browser version and min supported version.


          return compareVersions([version, minVersions[browser]]) < 0;
        }
      }
    }

    return strictMode; // not found
  }
  /**
   * Check if browser is supported
   *
   * @param  {Object} minVersions map of minimal version to browser
   * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map
   * @param  {String}  [ua] user agent string
   * @return {Boolean}
   */


  function check(minVersions, strictMode, ua) {
    return !isUnsupportedBrowser(minVersions, strictMode, ua);
  }

  bowser.isUnsupportedBrowser = isUnsupportedBrowser;
  bowser.compareVersions = compareVersions;
  bowser.check = check;
  /*
   * Set our detect method to the main bowser object so we can
   * reuse it to test other user agents.
   * This is needed to implement future tests.
   */

  bowser._detect = detect;
  /*
   * Set our detect public method to the main bowser object
   * This is needed to implement bowser in server side
   */

  bowser.detect = detect;
  return bowser;
});

},{}],2:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

//     (c) 2012 Airbnb, Inc.
//
//     polyglot.js may be freely distributed under the terms of the BSD
//     license. For all licensing information, details, and documention:
//     http://airbnb.github.com/polyglot.js
//
//
// Polyglot.js is an I18n helper library written in JavaScript, made to
// work both in the browser and in Node. It provides a simple solution for
// interpolation and pluralization, based off of Airbnb's
// experience adding I18n functionality to its Backbone.js and Node apps.
//
// Polylglot is agnostic to your translation backend. It doesn't perform any
// translation; it simply gives you a way to manage translated phrases from
// your client- or server-side JavaScript application.
//
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    define([], function () {
      return factory(root);
    });
  } else if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object') {
    module.exports = factory(root);
  } else {
    root.Polyglot = factory(root);
  }
})(void 0, function (root) {
  'use strict';

  var replace = String.prototype.replace; // ### Polyglot class constructor

  function Polyglot(options) {
    options = options || {};
    this.phrases = {};
    this.extend(options.phrases || {});
    this.currentLocale = options.locale || 'en';
    this.allowMissing = !!options.allowMissing;
    this.warn = options.warn || warn;
  } // ### Version


  Polyglot.VERSION = '1.0.0'; // ### polyglot.locale([locale])
  //
  // Get or set locale. Internally, Polyglot only uses locale for pluralization.

  Polyglot.prototype.locale = function (newLocale) {
    if (newLocale) this.currentLocale = newLocale;
    return this.currentLocale;
  }; // ### polyglot.extend(phrases)
  //
  // Use `extend` to tell Polyglot how to translate a given key.
  //
  //     polyglot.extend({
  //       "hello": "Hello",
  //       "hello_name": "Hello, %{name}"
  //     });
  //
  // The key can be any string.  Feel free to call `extend` multiple times;
  // it will override any phrases with the same key, but leave existing phrases
  // untouched.
  //
  // It is also possible to pass nested phrase objects, which get flattened
  // into an object with the nested keys concatenated using dot notation.
  //
  //     polyglot.extend({
  //       "nav": {
  //         "hello": "Hello",
  //         "hello_name": "Hello, %{name}",
  //         "sidebar": {
  //           "welcome": "Welcome"
  //         }
  //       }
  //     });
  //
  //     console.log(polyglot.phrases);
  //     // {
  //     //   'nav.hello': 'Hello',
  //     //   'nav.hello_name': 'Hello, %{name}',
  //     //   'nav.sidebar.welcome': 'Welcome'
  //     // }
  //
  // `extend` accepts an optional second argument, `prefix`, which can be used
  // to prefix every key in the phrases object with some string, using dot
  // notation.
  //
  //     polyglot.extend({
  //       "hello": "Hello",
  //       "hello_name": "Hello, %{name}"
  //     }, "nav");
  //
  //     console.log(polyglot.phrases);
  //     // {
  //     //   'nav.hello': 'Hello',
  //     //   'nav.hello_name': 'Hello, %{name}'
  //     // }
  //
  // This feature is used internally to support nested phrase objects.


  Polyglot.prototype.extend = function (morePhrases, prefix) {
    var phrase;

    for (var key in morePhrases) {
      if (morePhrases.hasOwnProperty(key)) {
        phrase = morePhrases[key];
        if (prefix) key = prefix + '.' + key;

        if (_typeof(phrase) === 'object') {
          this.extend(phrase, key);
        } else {
          this.phrases[key] = phrase;
        }
      }
    }
  }; // ### polyglot.unset(phrases)
  // Use `unset` to selectively remove keys from a polyglot instance.
  //
  //     polyglot.unset("some_key");
  //     polyglot.unset({
  //       "hello": "Hello",
  //       "hello_name": "Hello, %{name}"
  //     });
  //
  // The unset method can take either a string (for the key), or an object hash with
  // the keys that you would like to unset.


  Polyglot.prototype.unset = function (morePhrases, prefix) {
    var phrase;

    if (typeof morePhrases === 'string') {
      delete this.phrases[morePhrases];
    } else {
      for (var key in morePhrases) {
        if (morePhrases.hasOwnProperty(key)) {
          phrase = morePhrases[key];
          if (prefix) key = prefix + '.' + key;

          if (_typeof(phrase) === 'object') {
            this.unset(phrase, key);
          } else {
            delete this.phrases[key];
          }
        }
      }
    }
  }; // ### polyglot.clear()
  //
  // Clears all phrases. Useful for special cases, such as freeing
  // up memory if you have lots of phrases but no longer need to
  // perform any translation. Also used internally by `replace`.


  Polyglot.prototype.clear = function () {
    this.phrases = {};
  }; // ### polyglot.replace(phrases)
  //
  // Completely replace the existing phrases with a new set of phrases.
  // Normally, just use `extend` to add more phrases, but under certain
  // circumstances, you may want to make sure no old phrases are lying around.


  Polyglot.prototype.replace = function (newPhrases) {
    this.clear();
    this.extend(newPhrases);
  }; // ### polyglot.t(key, options)
  //
  // The most-used method. Provide a key, and `t` will return the
  // phrase.
  //
  //     polyglot.t("hello");
  //     => "Hello"
  //
  // The phrase value is provided first by a call to `polyglot.extend()` or
  // `polyglot.replace()`.
  //
  // Pass in an object as the second argument to perform interpolation.
  //
  //     polyglot.t("hello_name", {name: "Spike"});
  //     => "Hello, Spike"
  //
  // If you like, you can provide a default value in case the phrase is missing.
  // Use the special option key "_" to specify a default.
  //
  //     polyglot.t("i_like_to_write_in_language", {
  //       _: "I like to write in %{language}.",
  //       language: "JavaScript"
  //     });
  //     => "I like to write in JavaScript."
  //


  Polyglot.prototype.t = function (key, options) {
    var phrase, result;
    options = options == null ? {} : options; // allow number as a pluralization shortcut

    if (typeof options === 'number') {
      options = {
        smart_count: options
      };
    }

    if (typeof this.phrases[key] === 'string') {
      phrase = this.phrases[key];
    } else if (typeof options._ === 'string') {
      phrase = options._;
    } else if (this.allowMissing) {
      phrase = key;
    } else {
      this.warn('Missing translation for key: "' + key + '"');
      result = key;
    }

    if (typeof phrase === 'string') {
      options = clone(options);
      result = choosePluralForm(phrase, this.currentLocale, options.smart_count);
      result = interpolate(result, options);
    }

    return result;
  }; // ### polyglot.has(key)
  //
  // Check if polyglot has a translation for given key


  Polyglot.prototype.has = function (key) {
    return key in this.phrases;
  }; // #### Pluralization methods
  // The string that separates the different phrase possibilities.


  var delimeter = '||||'; // Mapping from pluralization group plural logic.

  var pluralTypes = {
    chinese: function chinese(n) {
      return 0;
    },
    german: function german(n) {
      return n !== 1 ? 1 : 0;
    },
    french: function french(n) {
      return n > 1 ? 1 : 0;
    },
    russian: function russian(n) {
      return n % 10 === 1 && n % 100 !== 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2;
    },
    czech: function czech(n) {
      return n === 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2;
    },
    polish: function polish(n) {
      return n === 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2;
    },
    icelandic: function icelandic(n) {
      return n % 10 !== 1 || n % 100 === 11 ? 1 : 0;
    }
  }; // Mapping from pluralization group to individual locales.

  var pluralTypeToLanguages = {
    chinese: ['fa', 'id', 'ja', 'ko', 'lo', 'ms', 'th', 'tr', 'zh'],
    german: ['da', 'de', 'en', 'es', 'fi', 'el', 'he', 'hu', 'it', 'nl', 'no', 'pt', 'sv'],
    french: ['fr', 'tl', 'pt-br'],
    russian: ['hr', 'ru'],
    czech: ['cs'],
    polish: ['pl'],
    icelandic: ['is']
  };

  function langToTypeMap(mapping) {
    var type,
        langs,
        l,
        ret = {};

    for (type in mapping) {
      if (mapping.hasOwnProperty(type)) {
        langs = mapping[type];

        for (l in langs) {
          ret[langs[l]] = type;
        }
      }
    }

    return ret;
  } // Trim a string.


  var trimRe = /^\s+|\s+$/g;

  function trim(str) {
    return replace.call(str, trimRe, '');
  } // Based on a phrase text that contains `n` plural forms separated
  // by `delimeter`, a `locale`, and a `count`, choose the correct
  // plural form, or none if `count` is `null`.


  function choosePluralForm(text, locale, count) {
    var ret, texts, chosenText;

    if (count != null && text) {
      texts = text.split(delimeter);
      chosenText = texts[pluralTypeIndex(locale, count)] || texts[0];
      ret = trim(chosenText);
    } else {
      ret = text;
    }

    return ret;
  }

  function pluralTypeName(locale) {
    var langToPluralType = langToTypeMap(pluralTypeToLanguages);
    return langToPluralType[locale] || langToPluralType.en;
  }

  function pluralTypeIndex(locale, count) {
    return pluralTypes[pluralTypeName(locale)](count);
  } // ### interpolate
  //
  // Does the dirty work. Creates a `RegExp` object for each
  // interpolation placeholder.


  var dollarRegex = /\$/g;
  var dollarBillsYall = '$$$$';

  function interpolate(phrase, options) {
    for (var arg in options) {
      if (arg !== '_' && options.hasOwnProperty(arg)) {
        // Ensure replacement value is escaped to prevent special $-prefixed
        // regex replace tokens. the "$$$$" is needed because each "$" needs to
        // be escaped with "$" itself, and we need two in the resulting output.
        var replacement = options[arg];

        if (typeof replacement === 'string') {
          replacement = replace.call(options[arg], dollarRegex, dollarBillsYall);
        } // We create a new `RegExp` each time instead of using a more-efficient
        // string replace so that the same argument can be replaced multiple times
        // in the same phrase.


        phrase = replace.call(phrase, new RegExp('%\\{' + arg + '\\}', 'g'), replacement);
      }
    }

    return phrase;
  } // ### warn
  //
  // Provides a warning in the console if a phrase key is missing.


  function warn(message) {
    root.console && root.console.warn && root.console.warn('WARNING: ' + message);
  } // ### clone
  //
  // Clone an object.


  function clone(source) {
    var ret = {};

    for (var prop in source) {
      ret[prop] = source[prop];
    }

    return ret;
  }

  return Polyglot;
});

},{}],3:[function(require,module,exports){
module.exports={
  "name": "xsolla-login-js-sdk",
  "version": "2.2.6",
  "description": "",
  "main": "src/main.js",
  "scripts": {
    "build": "gulp build",
    "host": "static-server . -p 8084",
    "test": "jest"
  },
  "author": "",
  "license": "MIT",
  "dependencies": {
    "to-snake-case": "^1.0.0"
  },
  "devDependencies": {
    "@babel/core": "^7.4.5",
    "@babel/preset-env": "^7.4.5",
    "babel-jest": "^24.8.0",
    "babel-plugin-transform-object-assign": "^6.22.0",
    "babel-preset-es2015": "^6.18.0",
    "babelify": "^7.3.0",
    "bower": "^1.8.8",
    "brfs": "^2.0.1",
    "browser-sync": "^2.26.7",
    "browserify": "^16.2.3",
    "browserify-istanbul": "^2.0.0",
    "browserify-shim": "^3.8.12",
    "common-shakeify": "^0.6.0",
    "gulp": "^4.0.2",
    "gulp-if": "^2.0.2",
    "gulp-rename": "1.2.0",
    "gulp-sourcemaps": "^2.6.5",
    "gulp-strip-comments": "^2.5.2",
    "gulp-uglify": "^3.0.1",
    "gulp-util": "3.0.6",
    "jasmine": "^2.4.1",
    "jest": "^24.8.0",
    "jsdom": "^15.1.1",
    "static-server": "2.2.1",
    "url-parse": "^1.4.7",
    "vinyl-buffer": "^1.0.1",
    "vinyl-source-stream": "^2.0.0",
    "watchify": "^3.11.1"
  },
  "browserify-shim": {
    "external": "global:External"
  }
}

},{}],4:[function(require,module,exports){
"use strict";

/**
 * Created by a.korotaev on 07.11.16.
 */
if (!String.prototype.startsWith) {
  String.prototype.startsWith = function (searchString, position) {
    position = position || 0;
    return this.indexOf(searchString, position) === position;
  };
}

if (typeof window.CustomEvent !== "function") {
  function CustomEvent(event, params) {
    params = params || {
      bubbles: false,
      cancelable: false,
      detail: undefined
    };
    var evt = document.createEvent('CustomEvent');
    evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
    return evt;
  }

  CustomEvent.prototype = window.Event.prototype;
  window.CustomEvent = CustomEvent;
}

},{}],5:[function(require,module,exports){
"use strict";

/**
 * Created by a.korotaev on 24.06.16.
 */

/**
 * Impelements Xsolla Login Api
 * @param projectId - project's unique identifier
 * @param baseUrl - api endpoint
 * @constructor
 */
var XLApi = function XLApi(projectId, baseUrl) {
  var self = this;
  this.baseUrl = baseUrl || '//login.xsolla.com/api/';
  this.projectId = projectId;

  this.makeApiCall = function (params, success, error) {
    var r = new XMLHttpRequest();
    r.withCredentials = true;
    r.open(params.method, self.baseUrl + params.endpoint, true);

    r.onreadystatechange = function () {
      if (r.readyState == 4) {
        if (r.status == 200) {
          success(JSON.parse(r.responseText));
        } else {
          if (r.responseText) {
            error(JSON.parse(r.responseText));
          } else {
            error({
              error: {
                message: 'Networking error',
                code: r.status
              }
            });
          }
        }
      }
    };

    if (params.method == 'POST') {
      r.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
      r.send(params.postBody);
    } else if (params.method == 'GET') {
      r.send(params.getArguments);
    }
  };
};
/**
 * Get all avialable social methods auth url
 * @param success - success callback
 * @param error - error callback
 * @param getArguments - additional params to send with request
 */


XLApi.prototype.getSocialsURLs = function (success, error, getArguments) {
  var str = "";

  for (var key in getArguments) {
    if (str != "") {
      str += "&";
    }

    str += key + "=" + encodeURIComponent(getArguments[key]);
  }

  return this.makeApiCall({
    method: 'GET',
    endpoint: 'social/login_urls?' + str,
    getArguments: null
  }, success, error);
};

XLApi.prototype.loginPassAuth = function (login, pass, rememberMe, redirectUrl, success, error) {
  var body = {
    username: login,
    password: pass,
    remember_me: rememberMe
  };
  return this.makeApiCall({
    method: 'POST',
    endpoint: 'proxy/login?projectId=' + this.projectId + '&redirect_url=' + encodeURIComponent(redirectUrl),
    postBody: JSON.stringify(body)
  }, success, error);
};

XLApi.prototype.smsAuth = function (phoneNumber, success, error) {
  return this.makeApiCall({
    method: 'GET',
    endpoint: 'sms',
    getArguments: 'phoneNumber=' + phoneNumber
  }, success, error);
};

module.exports = XLApi;

},{}],6:[function(require,module,exports){
(function (global){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var Helpers = require('./helpers');

var Exception = require('./exception');

var LightBox = require('./lightbox');

var ChildWindow = require('./childwindow');

var Device = require('./device');

module.exports = function () {
  function ready(fn) {
    if (document.readyState !== 'loading') {
      fn();
    } else {
      document.addEventListener('DOMContentLoaded', fn);
    }
  }

  function App() {
    this.config = Object.assign({}, DEFAULT_CONFIG);
    this.eventObject = Helpers.addEventObject(this);
    this.isInitiated = false;
    this.postMessage = null;
  }

  App.eventTypes = {
    INIT: 'init',
    OPEN: 'open',
    OPEN_WINDOW: 'open-window',
    OPEN_LIGHTBOX: 'open-lightbox',
    LOAD: 'load',
    CLOSE: 'close',
    CLOSE_WINDOW: 'close-window',
    CLOSE_LIGHTBOX: 'close-lightbox',
    STATUS: 'status',
    STATUS_INVOICE: 'status-invoice',
    STATUS_DELIVERING: 'status-delivering',
    STATUS_TROUBLED: 'status-troubled',
    STATUS_DONE: 'status-done',
    USER_COUNTRY: 'user-country'
  };
  var DEFAULT_CONFIG = {
    access_token: null,
    access_data: null,
    sandbox: false,
    lightbox: {},
    childWindow: {},
    host: 'secure.xsolla.com',
    iframeOnly: false
  };
  var SANDBOX_PAYSTATION_URL = 'https://sandbox-secure.xsolla.com/paystation2/?';
  var EVENT_NAMESPACE = '.xpaystation-widget';
  var ATTR_PREFIX = 'data-xpaystation-widget-open';
  /** Private Members **/

  App.prototype.config = {};
  App.prototype.isInitiated = false;
  App.prototype.eventObject = Helpers.addEventObject(this);

  App.prototype.getPaymentUrl = function () {
    if (this.config.payment_url) {
      return this.config.payment_url;
    }

    var query = {};

    if (this.config.access_token) {
      query.access_token = this.config.access_token;
    } else {
      query.access_data = JSON.stringify(this.config.access_data);
    }

    var urlWithoutQueryParams = this.config.sandbox ? SANDBOX_PAYSTATION_URL : 'https://' + this.config.host + '/paystation2/?';
    return urlWithoutQueryParams + Helpers.param(query);
  };

  App.prototype.checkConfig = function () {
    if (Helpers.isEmpty(this.config.access_token) && Helpers.isEmpty(this.config.access_data) && Helpers.isEmpty(this.config.payment_url)) {
      this.throwError('No access token or access data or payment URL given');
    }

    if (!Helpers.isEmpty(this.config.access_data) && _typeof(this.config.access_data) !== 'object') {
      this.throwError('Invalid access data format');
    }

    if (Helpers.isEmpty(this.config.host)) {
      this.throwError('Invalid host');
    }
  };

  App.prototype.checkApp = function () {
    if (this.isInitiated === undefined) {
      this.throwError('Initialize widget before opening');
    }
  };

  App.prototype.throwError = function (message) {
    throw new Exception(message);
  };

  App.prototype.triggerEvent = function (eventName, data) {
    if (arguments.length === 1) {
      [].forEach.call(arguments, function (eventName) {
        var event = document.createEvent('HTMLEvents');
        event.initEvent(eventName, true, false);
        document.dispatchEvent(event);
      }.bind(this));
    } else {
      this.eventObject.trigger(eventName, data);
    }
  };

  App.prototype.triggerCustomEvent = function (eventName, data) {
    try {
      var event = new CustomEvent(eventName, {
        detail: data
      }); // Not working in IE
    } catch (e) {
      var event = document.createEvent('CustomEvent');
      event.initCustomEvent(eventName, true, true, data);
    }

    document.dispatchEvent(event);
  };
  /**
   * Initialize widget with options
   * @param options
   */


  App.prototype.init = function (options) {
    function initialize(options) {
      this.isInitiated = true;
      this.config = Object.assign({}, DEFAULT_CONFIG, options);
      var bodyElement = global.document.body;
      var clickEventName = 'click' + EVENT_NAMESPACE;

      var handleClickEvent = function (event) {
        var targetElement = document.querySelector('[' + ATTR_PREFIX + ']');

        if (event.sourceEvent.target === targetElement) {
          this.open.call(this, targetElement);
        }
      }.bind(this);

      bodyElement.removeEventListener(clickEventName, handleClickEvent);
      var clickEvent = document.createEvent('Event');
      clickEvent.initEvent(clickEventName, false, true);
      bodyElement.addEventListener('click', function (event) {
        clickEvent.sourceEvent = event;
        bodyElement.dispatchEvent(clickEvent);
      }.bind(this), false);
      bodyElement.addEventListener(clickEventName, handleClickEvent);
      this.triggerEvent(App.eventTypes.INIT);
    }

    ready(initialize.bind(this, options));
  };
  /**
   * Open payment interface (PayStation)
   */


  App.prototype.open = function () {
    this.checkConfig();
    this.checkApp();

    var triggerSplitStatus = function (data) {
      switch (((data || {}).paymentInfo || {}).status) {
        case 'invoice':
          this.triggerEvent(App.eventTypes.STATUS_INVOICE, data);
          break;

        case 'delivering':
          this.triggerEvent(App.eventTypes.STATUS_DELIVERING, data);
          break;

        case 'troubled':
          this.triggerEvent(App.eventTypes.STATUS_TROUBLED, data);
          break;

        case 'done':
          this.triggerEvent(App.eventTypes.STATUS_DONE, data);
          break;
      }
    }.bind(this);

    var url = this.getPaymentUrl();
    var that = this;

    function handleStatus(event) {
      var statusData = event.detail;
      that.triggerEvent(App.eventTypes.STATUS, statusData);
      triggerSplitStatus(statusData);
    }

    function handleUserLocale(event) {
      var userCountry = {
        user_country: event.detail.user_country
      };
      that.triggerCustomEvent(App.eventTypes.USER_COUNTRY, userCountry);
    }

    this.postMessage = null;

    if (new Device().isMobile() && !this.config.iframeOnly) {
      var childWindow = new ChildWindow();
      childWindow.on('open', function handleOpen() {
        that.postMessage = childWindow.getPostMessage();
        that.triggerEvent(App.eventTypes.OPEN);
        that.triggerEvent(App.eventTypes.OPEN_WINDOW);
        childWindow.off('open', handleOpen);
      });
      childWindow.on('load', function handleLoad() {
        that.triggerEvent(App.eventTypes.LOAD);
        childWindow.off('load', handleLoad);
      });
      childWindow.on('close', function handleClose() {
        that.triggerEvent(App.eventTypes.CLOSE);
        that.triggerEvent(App.eventTypes.CLOSE_WINDOW);
        childWindow.off('status', handleStatus);
        childWindow.off(App.eventTypes.USER_COUNTRY, handleUserLocale);
        childWindow.off('close', handleClose);
      });
      childWindow.on('status', handleStatus);
      childWindow.on(App.eventTypes.USER_COUNTRY, handleUserLocale);
      childWindow.open(url, this.config.childWindow);
    } else {
      var lightBox = new LightBox(new Device().isMobile() && this.config.iframeOnly);
      lightBox.on('open', function handleOpen() {
        that.postMessage = lightBox.getPostMessage();
        that.triggerEvent(App.eventTypes.OPEN);
        that.triggerEvent(App.eventTypes.OPEN_LIGHTBOX);
        lightBox.off('open', handleOpen);
      });
      lightBox.on('load', function handleLoad() {
        that.triggerEvent(App.eventTypes.LOAD);
        lightBox.off('load', handleLoad);
      });
      lightBox.on('close', function handleClose() {
        that.triggerEvent(App.eventTypes.CLOSE);
        that.triggerEvent(App.eventTypes.CLOSE_LIGHTBOX);
        lightBox.off('status', handleStatus);
        lightBox.off(App.eventTypes.USER_COUNTRY, handleUserLocale);
        lightBox.off('close', handleClose);
      });
      lightBox.on('status', handleStatus);
      lightBox.on(App.eventTypes.USER_COUNTRY, handleUserLocale);
      lightBox.openFrame(url, this.config.lightbox);
    }
  };
  /**
   * Attach an event handler function for one or more events to the widget
   * @param event One or more space-separated event types (init, open, load, close, status, status-invoice, status-delivering, status-troubled, status-done)
   * @param handler A function to execute when the event is triggered
   */


  App.prototype.on = function (event, handler, options) {
    if (typeof handler !== 'function') {
      return;
    }

    var handlerDecorator = function handlerDecorator(event) {
      handler(event, event.detail);
    };

    this.eventObject.on(event, handlerDecorator, options);
  };
  /**
   * Remove an event handler
   * @param event One or more space-separated event types
   * @param handler A handler function previously attached for the event(s)
   */


  App.prototype.off = function (event, handler, options) {
    this.eventObject.off(event, handler, options);
  };
  /**
   * Send a message directly to PayStation
   * @param command
   * @param data
   */


  App.prototype.sendMessage = function (command, data) {
    if (this.postMessage) {
      this.postMessage.send.apply(this.postMessage, arguments);
    }
  };
  /**
   * Attach an event handler function for message event from PayStation
   * @param command
   * @param handler
   */


  App.prototype.onMessage = function (command, handler) {
    if (this.postMessage) {
      this.postMessage.on.apply(this.postMessage, arguments);
    }
  };

  return App;
}();

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./childwindow":7,"./device":8,"./exception":9,"./helpers":10,"./lightbox":11}],7:[function(require,module,exports){
(function (global){
"use strict";

var version = require('./version');

var Helpers = require('./helpers');

var PostMessage = require('./postmessage');

module.exports = function () {
  function ChildWindow() {
    this.eventObject = Helpers.addEventObject(this, wrapEventInNamespace);
    this.message = null;
  }

  function wrapEventInNamespace(eventName) {
    return ChildWindow._NAMESPACE + '_' + eventName;
  }

  var DEFAULT_OPTIONS = {
    target: '_blank'
  };
  /** Private Members **/

  ChildWindow.prototype.eventObject = null;
  ChildWindow.prototype.childWindow = null;

  ChildWindow.prototype.triggerEvent = function (event, data) {
    this.eventObject.trigger(event, data);
  };
  /** Public Members **/


  ChildWindow.prototype.open = function (url, options) {
    options = Object.assign({}, DEFAULT_OPTIONS, options);

    if (this.childWindow && !this.childWindow.closed) {
      this.childWindow.location.href = url;
    }

    var that = this;

    var addHandlers = function addHandlers() {
      that.on('close', function handleClose() {
        if (timer) {
          global.clearTimeout(timer);
        }

        if (that.childWindow) {
          that.childWindow.close();
        }

        that.off('close', handleClose);
      }); // Cross-window communication

      that.message = new PostMessage(that.childWindow);
      that.message.on('dimensions widget-detection', function handleWidgetDetection() {
        that.triggerEvent('load');
        that.message.off('dimensions widget-detection', handleWidgetDetection);
      });
      that.message.on('widget-detection', function handleWidgetDetection() {
        that.message.send('widget-detected', {
          version: version,
          childWindowOptions: options
        });
        that.message.off('widget-detection', handleWidgetDetection);
      });
      that.message.on('status', function (event) {
        that.triggerEvent('status', event.detail);
      });
      that.on('close', function handleClose() {
        that.message.off();
        that.off('close', handleClose);
      });
      that.message.on('user-country', function (event) {
        that.triggerEvent('user-country', event.detail);
      });
    };

    switch (options.target) {
      case '_self':
        this.childWindow = global.window;
        addHandlers();
        this.childWindow.location.href = url;
        break;

      case '_parent':
        this.childWindow = global.window.parent;
        addHandlers();
        this.childWindow.location.href = url;
        break;

      case '_blank':
      default:
        this.childWindow = global.window.open(url);
        this.childWindow.focus();
        addHandlers();

        var checkWindow = function () {
          if (this.childWindow) {
            if (this.childWindow.closed) {
              this.triggerEvent('close');
            } else {
              timer = global.setTimeout(checkWindow, 100);
            }
          }
        }.bind(this);

        var timer = global.setTimeout(checkWindow, 100);
        break;
    }

    this.triggerEvent('open');
  };

  ChildWindow.prototype.close = function () {
    this.triggerEvent('close');
  };

  ChildWindow.prototype.on = function (event, handler, options) {
    if (typeof handler !== 'function') {
      return;
    }

    this.eventObject.on(event, handler, options);
  };

  ChildWindow.prototype.off = function (event, handler, options) {
    this.eventObject.off(event, handler, options);
  };

  ChildWindow.prototype.getPostMessage = function () {
    return this.message;
  };

  ChildWindow._NAMESPACE = 'CHILD_WINDOW';
  return ChildWindow;
}();

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./helpers":10,"./postmessage":13,"./version":17}],8:[function(require,module,exports){
"use strict";

var bowser = require('bowser');

module.exports = function () {
  function Device() {}
  /**
   * Mobile devices
   * @returns {boolean}
   */


  Device.prototype.isMobile = function () {
    return bowser.mobile || bowser.tablet;
  };

  return Device;
}();

},{"bowser":1}],9:[function(require,module,exports){
"use strict";

module.exports = function (message) {
  this.message = message;
  this.name = "XsollaPayStationWidgetException";

  this.toString = function () {
    return this.name + ': ' + this.message;
  }.bind(this);
};

},{}],10:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function isEmpty(value) {
  return value === null || value === undefined;
}

function uniq(list) {
  return list.filter(function (x, i, a) {
    return a.indexOf(x) == i;
  });
}

function zipObject(props, values) {
  var index = -1,
      length = props ? props.length : 0,
      result = {};

  if (length && !values && !Array.isArray(props[0])) {
    values = [];
  }

  while (++index < length) {
    var key = props[index];

    if (values) {
      result[key] = values[index];
    } else if (key) {
      result[key[0]] = key[1];
    }
  }

  return result;
}

function param(a) {
  var s = [];

  var add = function add(k, v) {
    v = typeof v === 'function' ? v() : v;
    v = v === null ? '' : v === undefined ? '' : v;
    s[s.length] = encodeURIComponent(k) + '=' + encodeURIComponent(v);
  };

  var buildParams = function buildParams(prefix, obj) {
    var i, len, key;

    if (prefix) {
      if (Array.isArray(obj)) {
        for (i = 0, len = obj.length; i < len; i++) {
          buildParams(prefix + '[' + (_typeof(obj[i]) === 'object' && obj[i] ? i : '') + ']', obj[i]);
        }
      } else if (String(obj) === '[object Object]') {
        for (key in obj) {
          buildParams(prefix + '[' + key + ']', obj[key]);
        }
      } else {
        add(prefix, obj);
      }
    } else if (Array.isArray(obj)) {
      for (i = 0, len = obj.length; i < len; i++) {
        add(obj[i].name, obj[i].value);
      }
    } else {
      for (key in obj) {
        buildParams(key, obj[key]);
      }
    }

    return s;
  };

  return buildParams('', a).join('&');
}

;

function once(f) {
  return function () {
    f(arguments);

    f = function f() {};
  };
}

function addEventObject(context, wrapEventInNamespace) {
  var dummyWrapper = function dummyWrapper(event) {
    return event;
  };

  var wrapEventInNamespace = wrapEventInNamespace || dummyWrapper;
  var eventsList = [];

  function isStringContainedSpace(str) {
    return / /.test(str);
  }

  return {
    trigger: function (eventName, data) {
      var eventInNamespace = wrapEventInNamespace(eventName);

      try {
        var event = new CustomEvent(eventInNamespace, {
          detail: data
        }); // Not working in IE
      } catch (e) {
        var event = document.createEvent('CustomEvent');
        event.initCustomEvent(eventInNamespace, true, true, data);
      }

      document.dispatchEvent(event);
    }.bind(context),
    on: function (eventName, handle, options) {
      function addEvent(eventName, handle, options) {
        var eventInNamespace = wrapEventInNamespace(eventName);
        document.addEventListener(eventInNamespace, handle, options);
        eventsList.push({
          name: eventInNamespace,
          handle: handle,
          options: options
        });
      }

      if (isStringContainedSpace(eventName)) {
        var events = eventName.split(' ');
        events.forEach(function (parsedEventName) {
          addEvent(parsedEventName, handle, options);
        });
      } else {
        addEvent(eventName, handle, options);
      }
    }.bind(context),
    off: function (eventName, handle, options) {
      var offAllEvents = !eventName && !handle && !options;

      if (offAllEvents) {
        eventsList.forEach(function (event) {
          document.removeEventListener(event.name, event.handle, event.options);
        });
        return;
      }

      function removeEvent(eventName, handle, options) {
        var eventInNamespace = wrapEventInNamespace(eventName);
        document.removeEventListener(eventInNamespace, handle, options);
        eventsList = eventsList.filter(function (event) {
          return event.name !== eventInNamespace;
        });
      }

      if (isStringContainedSpace(eventName)) {
        var events = eventName.split(' ');
        events.forEach(function (parsedEventName) {
          removeEvent(parsedEventName, handle, options);
        });
      } else {
        removeEvent(eventName, handle, options);
      }
    }.bind(context)
  };
}

module.exports = {
  addEventObject: addEventObject,
  isEmpty: isEmpty,
  uniq: uniq,
  zipObject: zipObject,
  param: param,
  once: once
};

},{}],11:[function(require,module,exports){
(function (global){
"use strict";

var version = require('./version');

var Helpers = require('./helpers');

var PostMessage = require('./postmessage');

module.exports = function () {
  function LightBox(isMobile) {
    require('./styles/lightbox.scss');

    this.eventObject = Helpers.addEventObject(this, wrapEventInNamespace);
    this.options = isMobile ? DEFAULT_OPTIONS_MOBILE : DEFAULT_OPTIONS;
    this.message = null;
  }

  var CLASS_PREFIX = 'xpaystation-widget-lightbox';
  var COMMON_OPTIONS = {
    zIndex: 1000,
    overlayOpacity: '.6',
    overlayBackground: '#000000',
    contentBackground: '#ffffff',
    closeByKeyboard: true,
    closeByClick: true,
    modal: false,
    spinner: 'xsolla',
    spinnerColor: null,
    spinnerUrl: null,
    spinnerRotationPeriod: 0
  };
  var DEFAULT_OPTIONS = Object.assign({}, COMMON_OPTIONS, {
    width: null,
    height: '100%',
    contentMargin: '10px'
  });
  var DEFAULT_OPTIONS_MOBILE = Object.assign({}, COMMON_OPTIONS, {
    width: '100%',
    height: '100%',
    contentMargin: '0px'
  });
  var SPINNERS = {
    xsolla: require('./spinners/xsolla.svg'),
    round: require('./spinners/round.svg'),
    none: ' '
  };
  var MIN_PS_DIMENSIONS = {
    height: 500,
    width: 600
  };
  var handleKeyupEventName = wrapEventInNamespace('keyup');
  var handleResizeEventName = wrapEventInNamespace('resize');

  var handleGlobalKeyup = function handleGlobalKeyup(event) {
    var clickEvent = document.createEvent('Event');
    clickEvent.initEvent(handleKeyupEventName, false, true);
    clickEvent.sourceEvent = event;
    document.body.dispatchEvent(clickEvent);
  };

  var handleSpecificKeyup = function handleSpecificKeyup(event) {
    if (event.sourceEvent.which == 27) {
      this.closeFrame();
    }
  };

  var handleGlobalResize = function handleGlobalResize() {
    var resizeEvent = document.createEvent('Event');
    resizeEvent.initEvent(handleResizeEventName, false, true);
    window.dispatchEvent(resizeEvent);
  };

  function wrapEventInNamespace(eventName) {
    return LightBox._NAMESPACE + '_' + eventName;
  }
  /** Private Members **/


  LightBox.prototype.triggerEvent = function () {
    this.eventObject.trigger.apply(this.eventObject, arguments);
  };

  LightBox.prototype.measureScrollbar = function () {
    // thx walsh: https://davidwalsh.name/detect-scrollbar-width
    var scrollDiv = document.createElement("div");
    scrollDiv.classList.add("scrollbar-measure");
    scrollDiv.setAttribute("style", "position: absolute;" + "top: -9999px" + "width: 50px" + "height: 50px" + "overflow: scroll");
    document.body.appendChild(scrollDiv);
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    document.body.removeChild(scrollDiv);
    return scrollbarWidth;
  };
  /** Public Members **/


  LightBox.prototype.openFrame = function (url, options) {
    this.options = Object.assign({}, this.options, options);
    var HandleBoundSpecificKeyup = handleSpecificKeyup.bind(this);
    options = this.options;
    var spinner = options.spinner === 'custom' && !!options.spinnerUrl ? '<img class="spinner-custom" src="' + encodeURI(options.spinnerUrl) + '" />' : SPINNERS[options.spinner] || Object.values(SPINNERS)[0];

    var template = function template(settings) {
      var host = document.createElement('div');
      host.className = settings.prefix;
      var overlay = document.createElement('div');
      overlay.className = settings.prefix + '-overlay';
      var content = document.createElement('div');
      content.className = settings.prefix + '-content' + ' ' + settings.prefix + '-content__hidden';
      var iframe = document.createElement('iframe');
      iframe.className = settings.prefix + '-content-iframe';
      iframe.src = settings.url;
      iframe.frameBorder = '0';
      iframe.allowFullscreen = true;
      var spinner = document.createElement('div');
      spinner.className = settings.prefix + '-spinner';
      spinner.innerHTML = settings.spinner;
      content.appendChild(iframe);
      host.appendChild(overlay);
      host.appendChild(content);
      host.appendChild(spinner);
      return host;
    };

    var bodyElement = global.document.body;
    var lightBoxElement = template({
      prefix: CLASS_PREFIX,
      url: url,
      spinner: spinner
    });
    var lightBoxOverlayElement = lightBoxElement.querySelector('.' + CLASS_PREFIX + '-overlay');
    var lightBoxContentElement = lightBoxElement.querySelector('.' + CLASS_PREFIX + '-content');
    var lightBoxIframeElement = lightBoxContentElement.querySelector('.' + CLASS_PREFIX + '-content-iframe');
    var lightBoxSpinnerElement = lightBoxElement.querySelector('.' + CLASS_PREFIX + '-spinner');
    var psDimensions = {
      width: withDefaultPXUnit(MIN_PS_DIMENSIONS.width),
      height: withDefaultPXUnit(MIN_PS_DIMENSIONS.height)
    };

    function withDefaultPXUnit(value) {
      var isStringWithoutUnit = typeof value === 'string' && String(parseFloat(value)).length === value.length;

      if (isStringWithoutUnit) {
        return value + 'px';
      }

      return typeof value === 'number' ? value + 'px' : value;
    }

    lightBoxElement.style.zIndex = options.zIndex;
    lightBoxOverlayElement.style.opacity = options.overlayOpacity;
    lightBoxOverlayElement.style.backgroundColor = options.overlayBackground;
    lightBoxContentElement.style.backgroundColor = options.contentBackground;
    lightBoxContentElement.style.margin = withDefaultPXUnit(options.contentMargin);
    lightBoxContentElement.style.width = options.width ? withDefaultPXUnit(options.width) : 'auto';
    lightBoxContentElement.style.height = options.height ? withDefaultPXUnit(options.height) : 'auto';

    if (options.spinnerColor) {
      lightBoxSpinnerElement.querySelector('path').style.fill = options.spinnerColor;
    }

    if (options.spinner === 'custom') {
      var spinnerCustom = lightBoxSpinnerElement.querySelector('.spinner-custom');
      spinnerCustom.style['-webkit-animation-duration'] = options.spinnerRotationPeriod + 's;';
      spinnerCustom.style['animation-duration'] = options.spinnerRotationPeriod + 's;';
    }

    if (options.closeByClick) {
      lightBoxOverlayElement.addEventListener('click', function () {
        this.closeFrame();
      }.bind(this));
    }

    bodyElement.appendChild(lightBoxElement);

    if (options.closeByKeyboard) {
      bodyElement.addEventListener(handleKeyupEventName, HandleBoundSpecificKeyup);
      bodyElement.addEventListener('keyup', handleGlobalKeyup, false);
    }

    var showContent = Helpers.once(function () {
      hideSpinner(options);
      lightBoxContentElement.classList.remove(CLASS_PREFIX + '-content__hidden');
      this.triggerEvent('load');
    }.bind(this));

    var lightBoxResize = function lightBoxResize() {
      var width = options.width ? options.width : psDimensions.width;
      var height = options.height ? options.height : psDimensions.height;
      lightBoxContentElement.style.left = '0px';
      lightBoxContentElement.style.top = '0px';
      lightBoxContentElement.style.borderRadius = '8px';
      lightBoxContentElement.style.width = withDefaultPXUnit(width);
      lightBoxContentElement.style.height = withDefaultPXUnit(height);
      var containerWidth = lightBoxElement.clientWidth,
          containerHeight = lightBoxElement.clientHeight;
      var contentWidth = outerWidth(lightBoxContentElement),
          contentHeight = outerHeight(lightBoxContentElement);
      var horMargin = contentWidth - lightBoxContentElement.offsetWidth,
          vertMargin = contentHeight - lightBoxContentElement.offsetHeight;
      var horDiff = containerWidth - contentWidth,
          vertDiff = containerHeight - contentHeight;

      if (horDiff < 0) {
        lightBoxContentElement.style.width = containerWidth - horMargin + 'px';
      } else {
        lightBoxContentElement.style.left = Math.round(horDiff / 2) + 'px';
      }

      if (vertDiff < 0) {
        lightBoxContentElement.style.height = containerHeight - vertMargin + 'px';
      } else {
        lightBoxContentElement.style.top = Math.round(vertDiff / 2) + 'px';
      }
    };

    if (options.width && options.height) {
      lightBoxResize = Helpers.once(lightBoxResize.bind(this));
    }

    function outerWidth(el) {
      var width = el.offsetWidth;
      var style = getComputedStyle(el);
      width += parseInt(style.marginLeft) + parseInt(style.marginRight);
      return width;
    }

    function outerHeight(el) {
      var height = el.offsetHeight;
      var style = getComputedStyle(el);
      height += parseInt(style.marginTop) + parseInt(style.marginBottom);
      return height;
    }

    var bodyStyles;

    var hideScrollbar = function () {
      bodyStyles = Helpers.zipObject(['overflow', 'paddingRight'].map(function (key) {
        return [key, getComputedStyle(bodyElement)[key]];
      }));

      if (global.window.innerWidth > outerWidth(bodyElement)) {
        var bodyPad = parseInt(getComputedStyle(bodyElement)['paddingRight'] || 0, 10);
        bodyElement.style.overflow = 'hidden;';
        bodyElement.style.paddingRight = withDefaultPXUnit(bodyPad + this.measureScrollbar());
      }
    }.bind(this);

    var resetScrollbar = function resetScrollbar() {
      if (bodyStyles) {
        Object.keys(bodyStyles).forEach(function (key) {
          bodyElement.style[key] = bodyStyles[key];
        });
      }
    };

    var showSpinner = function showSpinner() {
      lightBoxSpinnerElement.style.display = 'block';
    };

    var hideSpinner = function hideSpinner() {
      lightBoxSpinnerElement.style.display = 'none';
    };

    var loadTimer;
    lightBoxIframeElement.addEventListener('load', function handleLoad(event) {
      var timeout = !(options.width && options.height) ? options.resizeTimeout || 30000 : 1000; // 30000 if psDimensions will not arrive and custom timeout is not provided

      loadTimer = global.setTimeout(function () {
        lightBoxResize();
        showContent();
      }, timeout);
      lightBoxIframeElement.removeEventListener('load', handleLoad);
    });
    var iframeWindow = lightBoxIframeElement.contentWindow || lightBoxIframeElement; // Cross-window communication

    this.message = new PostMessage(iframeWindow);

    if (options.width && options.height) {
      this.message.on('dimensions', function () {
        lightBoxResize();
        showContent();
      });
    } else {
      this.message.on('dimensions', function (event) {
        var data = event.detail;

        if (data.dimensions) {
          psDimensions = Helpers.zipObject(['width', 'height'].map(function (dim) {
            return [dim, Math.max(MIN_PS_DIMENSIONS[dim] || 0, data.dimensions[dim] || 0) + 'px'];
          }));
          lightBoxResize();
        }

        showContent();
      });
    }

    this.message.on('widget-detection', function () {
      this.message.send('widget-detected', {
        version: version,
        lightBoxOptions: options
      });
    }.bind(this));
    this.message.on('widget-close', function () {
      this.closeFrame();
    }.bind(this));
    this.message.on('status', function (event) {
      this.triggerEvent('status', event.detail);
    }.bind(this));
    this.message.on('user-country', function (event) {
      this.triggerEvent('user-country', event.detail);
    }.bind(this)); // Resize

    window.addEventListener(handleResizeEventName, lightBoxResize);
    window.addEventListener('resize', handleGlobalResize); // Clean up after close

    var that = this;
    this.on('close', function handleClose(event) {
      that.message.off();
      bodyElement.removeEventListener(handleKeyupEventName, HandleBoundSpecificKeyup);
      bodyElement.removeEventListener('keyup', handleGlobalKeyup);
      window.removeEventListener('resize', handleGlobalResize);
      window.removeEventListener(handleResizeEventName, lightBoxResize);
      lightBoxElement.parentNode.removeChild(lightBoxElement);
      resetScrollbar();
      that.off('close', handleClose);
    });
    showSpinner();
    hideScrollbar();
    this.triggerEvent('open');
  };

  LightBox.prototype.closeFrame = function () {
    if (!this.options.modal) {
      this.triggerEvent('close');
    }
  };

  LightBox.prototype.on = function () {
    this.eventObject.on.apply(this.eventObject, arguments);
  };

  LightBox.prototype.off = function () {
    this.eventObject.off.apply(this.eventObject, arguments);
  };

  LightBox.prototype.getPostMessage = function () {
    return this.message;
  };

  LightBox._NAMESPACE = '.xpaystation-widget-lightbox';
  return LightBox;
}();

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./helpers":10,"./postmessage":13,"./spinners/round.svg":14,"./spinners/xsolla.svg":15,"./styles/lightbox.scss":16,"./version":17}],12:[function(require,module,exports){
"use strict";

function objectAssign() {
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign Polyfill
  Object.assign || Object.defineProperty(Object, "assign", {
    enumerable: !1,
    configurable: !0,
    writable: !0,
    value: function value(e, r) {
      "use strict";

      if (null == e) throw new TypeError("Cannot convert first argument to object");

      for (var t = Object(e), n = 1; n < arguments.length; n++) {
        var o = arguments[n];
        if (null != o) for (var a = Object.keys(Object(o)), c = 0, b = a.length; c < b; c++) {
          var i = a[c],
              l = Object.getOwnPropertyDescriptor(o, i);
          void 0 !== l && l.enumerable && (t[i] = o[i]);
        }
      }

      return t;
    }
  });
}

function arrayForEach() {
  Array.prototype.forEach || (Array.prototype.forEach = function (r, o) {
    var t, n;
    if (null == this) throw new TypeError(" this is null or not defined");
    var e = Object(this),
        i = e.length >>> 0;
    if ("function" != typeof r) throw new TypeError(r + " is not a function");

    for (arguments.length > 1 && (t = o), n = 0; n < i;) {
      var f;
      n in e && (f = e[n], r.call(t, f, n, e)), n++;
    }
  });
}

function applyPolyfills() {
  objectAssign();
  arrayForEach();
}

module.exports = {
  applyPolyfills: applyPolyfills
};

},{}],13:[function(require,module,exports){
(function (global){
"use strict";

var Helpers = require('./helpers');

module.exports = function () {
  function wrapEventInNamespace(eventName) {
    return PostMessage._NAMESPACE + '_' + eventName;
  }

  function PostMessage(window) {
    this.eventObject = Helpers.addEventObject(this, wrapEventInNamespace);
    this.linkedWindow = window;
    global.window.addEventListener && global.window.addEventListener("message", function (event) {
      if (event.source !== this.linkedWindow) {
        return;
      }

      var message = {};

      if (typeof event.data === 'string' && global.JSON !== undefined) {
        try {
          message = global.JSON.parse(event.data);
        } catch (e) {}
      }

      if (message.command) {
        this.eventObject.trigger(message.command, message.data);
      }
    }.bind(this));
  }
  /** Private Members **/


  PostMessage.prototype.eventObject = null;
  PostMessage.prototype.linkedWindow = null;
  /** Public Members **/

  PostMessage.prototype.send = function (command, data, targetOrigin) {
    if (data === undefined) {
      data = {};
    }

    if (targetOrigin === undefined) {
      targetOrigin = '*';
    }

    if (!this.linkedWindow || this.linkedWindow.postMessage === undefined || global.window.JSON === undefined) {
      return false;
    }

    try {
      this.linkedWindow.postMessage(global.JSON.stringify({
        data: data,
        command: command
      }), targetOrigin);
    } catch (e) {}

    return true;
  };

  PostMessage.prototype.on = function (event, handle, options) {
    this.eventObject.on(event, handle, options);
  };

  PostMessage.prototype.off = function (event, handle, options) {
    this.eventObject.off(event, handle, options);
  };

  PostMessage._NAMESPACE = 'POST_MESSAGE';
  return PostMessage;
}();

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./helpers":10}],14:[function(require,module,exports){
module.exports = "<svg width=\"47px\" height=\"47px\" class=\"spinner-round\"><path d=\"M4.7852728,10.4210875 C2.94111664,13.0552197 1.63777109,16.0946106 1.03753956,19.3768556 L5.16638971,19.3768556 C5.6429615,17.187554 6.50125243,15.139164 7.66768899,13.305305 L5.95572428,11.5922705 L4.7852728,10.4210875 L4.7852728,10.4210875 Z M10.4693048,4.74565615 C13.1274873,2.8908061 16.1965976,1.58674648 19.5100161,1 L19.5100161,4.99523934 C17.2710923,5.48797782 15.1803193,6.3808529 13.3166907,7.59482153 L11.6337339,5.91081293 L10.4693048,4.74565615 L10.4693048,4.74565615 Z M42.2426309,36.5388386 C44.1112782,33.8575016 45.4206461,30.7581504 46,27.4117269 L41.9441211,27.4117269 C41.4527945,29.6618926 40.5583692,31.762911 39.3404412,33.6349356 L41.0332347,35.3287869 L42.2425306,36.5388386 L42.2426309,36.5388386 Z M36.5707441,42.2264227 C33.9167773,44.0867967 30.8509793,45.3972842 27.5398693,45.9911616 L27.5398693,41.7960549 C29.7376402,41.3202901 31.7936841,40.4593536 33.6336246,39.287568 L35.3554258,41.0104453 L36.5707441,42.2265231 L36.5707441,42.2264227 Z M4.71179965,36.4731535 C2.86744274,33.8069823 1.57463637,30.7309322 1,27.4118273 L5.16889904,27.4118273 C5.64828128,29.6073559 6.51159087,31.661069 7.68465205,33.4984432 L5.95572428,35.2284515 L4.71179965,36.4731535 L4.71179965,36.4731535 Z M10.3640133,42.180423 C13.0462854,44.0745435 16.1527345,45.40552 19.5101165,46 L19.5101165,41.7821947 C17.2817319,41.2916658 15.2000928,40.4048169 13.3430889,39.1995862 L11.6337339,40.9100094 L10.3640133,42.1805235 L10.3640133,42.180423 Z M42.1688567,10.3557038 C44.0373031,13.0048008 45.357411,16.0674929 45.9626612,19.3768556 L41.9469316,19.3768556 C41.4585158,17.1328164 40.5692095,15.0369202 39.3580065,13.1684109 L41.0335358,11.4918346 L42.168957,10.3557038 L42.1688567,10.3557038 Z M36.4651516,4.69995782 C33.8355754,2.87865336 30.8071162,1.59488179 27.5400701,1.00883836 L27.5400701,4.98117831 C29.7484805,5.45915272 31.8137587,6.3260149 33.6604242,7.50643794 L35.3555262,5.8102766 L36.4651516,4.69995782 L36.4651516,4.69995782 Z\" fill=\"#CCCCCC\"></path></svg>";

},{}],15:[function(require,module,exports){
module.exports = "<svg class=\"spinner-xsolla\" width=\"56\" height=\"55\"><path class=\"spinner-xsolla-x\" d=\"M21.03 5.042l-2.112-2.156-3.657 3.695-3.657-3.695-2.112 2.156 3.659 3.673-3.659 3.696 2.112 2.157 3.657-3.697 3.657 3.697 2.112-2.157-3.648-3.696 3.648-3.673z\" fill=\"#F2542D\"></path><path class=\"spinner-xsolla-s\" d=\"M41.232 6.896l2.941-2.974-2.134-2.132-2.92 2.973-.005-.008-2.134 2.135.005.008-.005.005 3.792 3.82-2.915 2.947 2.112 2.156 5.06-5.111-3.798-3.816.001-.001z\" fill=\"#FCCA20\"></path><path class=\"spinner-xsolla-o\" d=\"M48.066 29.159c-1.536 0-2.761 1.263-2.761 2.79 0 1.524 1.226 2.765 2.761 2.765 1.509 0 2.736-1.242 2.736-2.765 0-1.526-1.227-2.79-2.736-2.79m0 8.593c-3.179 0-5.771-2.594-5.771-5.804 0-3.213 2.592-5.808 5.771-5.808 3.155 0 5.745 2.594 5.745 5.808 0 3.21-2.589 5.804-5.745 5.804\" fill=\"#8C3EA4\"></path><path class=\"spinner-xsolla-l\" d=\"M24.389 42.323h2.99v10.437h-2.99v-10.437zm4.334 0h2.989v10.437h-2.989v-10.437z\" fill=\"#B5DC20\"></path><path class=\"spinner-xsolla-a\" d=\"M7.796 31.898l1.404 2.457h-2.835l1.431-2.457h-.001zm-.001-5.757l-6.363 11.102h12.703l-6.341-11.102z\" fill=\"#66CCDA\"></path></svg>";

},{}],16:[function(require,module,exports){
module.exports = require('sassify')('.xpaystation-widget-lightbox{position:fixed;top:0;left:0;bottom:0;right:0;width:100%;height:100%;-webkit-animation:xpaystation-widget-lightbox-fadein 0.15s;animation:xpaystation-widget-lightbox-fadein 0.15s}.xpaystation-widget-lightbox-overlay{position:absolute;top:0;left:0;bottom:0;right:0;z-index:1}.xpaystation-widget-lightbox-content{position:relative;top:0;left:0;z-index:3}.xpaystation-widget-lightbox-content__hidden{visibility:hidden;z-index:-1}.xpaystation-widget-lightbox-content-iframe{width:100%;height:100%;border:0;background:transparent}.xpaystation-widget-lightbox-spinner{position:absolute;top:50%;left:50%;display:none;z-index:2;pointer-events:none}.xpaystation-widget-lightbox-spinner .spinner-xsolla{width:56px;height:55px;margin-top:-28px;margin-left:-26px}.xpaystation-widget-lightbox-spinner .spinner-xsolla .spinner-xsolla-x,.xpaystation-widget-lightbox-spinner .spinner-xsolla .spinner-xsolla-s,.xpaystation-widget-lightbox-spinner .spinner-xsolla .spinner-xsolla-o,.xpaystation-widget-lightbox-spinner .spinner-xsolla .spinner-xsolla-l,.xpaystation-widget-lightbox-spinner .spinner-xsolla .spinner-xsolla-a{-webkit-animation:xpaystation-widget-lightbox-bouncedelay 1s infinite ease-in-out;-webkit-animation-fill-mode:both;animation:xpaystation-widget-lightbox-bouncedelay 1s infinite ease-in-out;animation-fill-mode:both}.xpaystation-widget-lightbox-spinner .spinner-xsolla .spinner-xsolla-x{-webkit-animation-delay:0s;animation-delay:0s}.xpaystation-widget-lightbox-spinner .spinner-xsolla .spinner-xsolla-s{-webkit-animation-delay:.2s;animation-delay:.2s}.xpaystation-widget-lightbox-spinner .spinner-xsolla .spinner-xsolla-o{-webkit-animation-delay:.4s;animation-delay:.4s}.xpaystation-widget-lightbox-spinner .spinner-xsolla .spinner-xsolla-l{-webkit-animation-delay:.6s;animation-delay:.6s}.xpaystation-widget-lightbox-spinner .spinner-xsolla .spinner-xsolla-a{-webkit-animation-delay:.8s;animation-delay:.8s}.xpaystation-widget-lightbox-spinner .spinner-round{margin-top:-23px;margin-left:-23px;-webkit-animation:xpaystation-widget-lightbox-spin 3s infinite linear;animation:xpaystation-widget-lightbox-spin 3s infinite linear}.xpaystation-widget-lightbox-spinner .spinner-custom{-webkit-animation:xpaystation-widget-lightbox-spin infinite linear;animation:xpaystation-widget-lightbox-spin infinite linear}@-webkit-keyframes xpaystation-widget-lightbox-bouncedelay{0%,80%,100%{opacity:0}40%{opacity:1}}@keyframes xpaystation-widget-lightbox-bouncedelay{0%,80%,100%{opacity:0}40%{opacity:1}}@-webkit-keyframes xpaystation-widget-lightbox-fadein{from{opacity:0}to{opacity:1}}@keyframes xpaystation-widget-lightbox-fadein{from{opacity:0}to{opacity:1}}@-webkit-keyframes xpaystation-widget-lightbox-spin{from{-webkit-transform:rotate(0deg)}to{-webkit-transform:rotate(360deg)}}@keyframes xpaystation-widget-lightbox-spin{from{transform:rotate(0deg)}to{transform:rotate(360deg)}} ');;
},{"sassify":27}],17:[function(require,module,exports){
"use strict";

module.exports = '1.2.5';

},{}],18:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _assign = require('object-assign');

var emptyObject = require('fbjs/lib/emptyObject');
var _invariant = require('fbjs/lib/invariant');

if (process.env.NODE_ENV !== 'production') {
  var warning = require('fbjs/lib/warning');
}

var MIXINS_KEY = 'mixins';

// Helper function to allow the creation of anonymous functions which do not
// have .name set to the name of the variable being assigned to.
function identity(fn) {
  return fn;
}

var ReactPropTypeLocationNames;
if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
} else {
  ReactPropTypeLocationNames = {};
}

function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
  /**
   * Policies that describe methods in `ReactClassInterface`.
   */

  var injectedMixins = [];

  /**
   * Composite components are higher-level components that compose other composite
   * or host components.
   *
   * To create a new type of `ReactClass`, pass a specification of
   * your new class to `React.createClass`. The only requirement of your class
   * specification is that you implement a `render` method.
   *
   *   var MyComponent = React.createClass({
   *     render: function() {
   *       return <div>Hello World</div>;
   *     }
   *   });
   *
   * The class specification supports a specific protocol of methods that have
   * special meaning (e.g. `render`). See `ReactClassInterface` for
   * more the comprehensive protocol. Any other properties and methods in the
   * class specification will be available on the prototype.
   *
   * @interface ReactClassInterface
   * @internal
   */
  var ReactClassInterface = {
    /**
     * An array of Mixin objects to include when defining your component.
     *
     * @type {array}
     * @optional
     */
    mixins: 'DEFINE_MANY',

    /**
     * An object containing properties and methods that should be defined on
     * the component's constructor instead of its prototype (static methods).
     *
     * @type {object}
     * @optional
     */
    statics: 'DEFINE_MANY',

    /**
     * Definition of prop types for this component.
     *
     * @type {object}
     * @optional
     */
    propTypes: 'DEFINE_MANY',

    /**
     * Definition of context types for this component.
     *
     * @type {object}
     * @optional
     */
    contextTypes: 'DEFINE_MANY',

    /**
     * Definition of context types this component sets for its children.
     *
     * @type {object}
     * @optional
     */
    childContextTypes: 'DEFINE_MANY',

    // ==== Definition methods ====

    /**
     * Invoked when the component is mounted. Values in the mapping will be set on
     * `this.props` if that prop is not specified (i.e. using an `in` check).
     *
     * This method is invoked before `getInitialState` and therefore cannot rely
     * on `this.state` or use `this.setState`.
     *
     * @return {object}
     * @optional
     */
    getDefaultProps: 'DEFINE_MANY_MERGED',

    /**
     * Invoked once before the component is mounted. The return value will be used
     * as the initial value of `this.state`.
     *
     *   getInitialState: function() {
     *     return {
     *       isOn: false,
     *       fooBaz: new BazFoo()
     *     }
     *   }
     *
     * @return {object}
     * @optional
     */
    getInitialState: 'DEFINE_MANY_MERGED',

    /**
     * @return {object}
     * @optional
     */
    getChildContext: 'DEFINE_MANY_MERGED',

    /**
     * Uses props from `this.props` and state from `this.state` to render the
     * structure of the component.
     *
     * No guarantees are made about when or how often this method is invoked, so
     * it must not have side effects.
     *
     *   render: function() {
     *     var name = this.props.name;
     *     return <div>Hello, {name}!</div>;
     *   }
     *
     * @return {ReactComponent}
     * @required
     */
    render: 'DEFINE_ONCE',

    // ==== Delegate methods ====

    /**
     * Invoked when the component is initially created and about to be mounted.
     * This may have side effects, but any external subscriptions or data created
     * by this method must be cleaned up in `componentWillUnmount`.
     *
     * @optional
     */
    componentWillMount: 'DEFINE_MANY',

    /**
     * Invoked when the component has been mounted and has a DOM representation.
     * However, there is no guarantee that the DOM node is in the document.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been mounted (initialized and rendered) for the first time.
     *
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */
    componentDidMount: 'DEFINE_MANY',

    /**
     * Invoked before the component receives new props.
     *
     * Use this as an opportunity to react to a prop transition by updating the
     * state using `this.setState`. Current props are accessed via `this.props`.
     *
     *   componentWillReceiveProps: function(nextProps, nextContext) {
     *     this.setState({
     *       likesIncreasing: nextProps.likeCount > this.props.likeCount
     *     });
     *   }
     *
     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
     * transition may cause a state change, but the opposite is not true. If you
     * need it, you are probably looking for `componentWillUpdate`.
     *
     * @param {object} nextProps
     * @optional
     */
    componentWillReceiveProps: 'DEFINE_MANY',

    /**
     * Invoked while deciding if the component should be updated as a result of
     * receiving new props, state and/or context.
     *
     * Use this as an opportunity to `return false` when you're certain that the
     * transition to the new props/state/context will not require a component
     * update.
     *
     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
     *     return !equal(nextProps, this.props) ||
     *       !equal(nextState, this.state) ||
     *       !equal(nextContext, this.context);
     *   }
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @return {boolean} True if the component should update.
     * @optional
     */
    shouldComponentUpdate: 'DEFINE_ONCE',

    /**
     * Invoked when the component is about to update due to a transition from
     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
     * and `nextContext`.
     *
     * Use this as an opportunity to perform preparation before an update occurs.
     *
     * NOTE: You **cannot** use `this.setState()` in this method.
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @param {ReactReconcileTransaction} transaction
     * @optional
     */
    componentWillUpdate: 'DEFINE_MANY',

    /**
     * Invoked when the component's DOM representation has been updated.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been updated.
     *
     * @param {object} prevProps
     * @param {?object} prevState
     * @param {?object} prevContext
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */
    componentDidUpdate: 'DEFINE_MANY',

    /**
     * Invoked when the component is about to be removed from its parent and have
     * its DOM representation destroyed.
     *
     * Use this as an opportunity to deallocate any external resources.
     *
     * NOTE: There is no `componentDidUnmount` since your component will have been
     * destroyed by that point.
     *
     * @optional
     */
    componentWillUnmount: 'DEFINE_MANY',

    /**
     * Replacement for (deprecated) `componentWillMount`.
     *
     * @optional
     */
    UNSAFE_componentWillMount: 'DEFINE_MANY',

    /**
     * Replacement for (deprecated) `componentWillReceiveProps`.
     *
     * @optional
     */
    UNSAFE_componentWillReceiveProps: 'DEFINE_MANY',

    /**
     * Replacement for (deprecated) `componentWillUpdate`.
     *
     * @optional
     */
    UNSAFE_componentWillUpdate: 'DEFINE_MANY',

    // ==== Advanced methods ====

    /**
     * Updates the component's currently mounted DOM representation.
     *
     * By default, this implements React's rendering and reconciliation algorithm.
     * Sophisticated clients may wish to override this.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     * @overridable
     */
    updateComponent: 'OVERRIDE_BASE'
  };

  /**
   * Similar to ReactClassInterface but for static methods.
   */
  var ReactClassStaticInterface = {
    /**
     * This method is invoked after a component is instantiated and when it
     * receives new props. Return an object to update state in response to
     * prop changes. Return null to indicate no change to state.
     *
     * If an object is returned, its keys will be merged into the existing state.
     *
     * @return {object || null}
     * @optional
     */
    getDerivedStateFromProps: 'DEFINE_MANY_MERGED'
  };

  /**
   * Mapping from class specification keys to special processing functions.
   *
   * Although these are declared like instance properties in the specification
   * when defining classes using `React.createClass`, they are actually static
   * and are accessible on the constructor instead of the prototype. Despite
   * being static, they must be defined outside of the "statics" key under
   * which all other static methods are defined.
   */
  var RESERVED_SPEC_KEYS = {
    displayName: function(Constructor, displayName) {
      Constructor.displayName = displayName;
    },
    mixins: function(Constructor, mixins) {
      if (mixins) {
        for (var i = 0; i < mixins.length; i++) {
          mixSpecIntoComponent(Constructor, mixins[i]);
        }
      }
    },
    childContextTypes: function(Constructor, childContextTypes) {
      if (process.env.NODE_ENV !== 'production') {
        validateTypeDef(Constructor, childContextTypes, 'childContext');
      }
      Constructor.childContextTypes = _assign(
        {},
        Constructor.childContextTypes,
        childContextTypes
      );
    },
    contextTypes: function(Constructor, contextTypes) {
      if (process.env.NODE_ENV !== 'production') {
        validateTypeDef(Constructor, contextTypes, 'context');
      }
      Constructor.contextTypes = _assign(
        {},
        Constructor.contextTypes,
        contextTypes
      );
    },
    /**
     * Special case getDefaultProps which should move into statics but requires
     * automatic merging.
     */
    getDefaultProps: function(Constructor, getDefaultProps) {
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps = createMergedResultFunction(
          Constructor.getDefaultProps,
          getDefaultProps
        );
      } else {
        Constructor.getDefaultProps = getDefaultProps;
      }
    },
    propTypes: function(Constructor, propTypes) {
      if (process.env.NODE_ENV !== 'production') {
        validateTypeDef(Constructor, propTypes, 'prop');
      }
      Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
    },
    statics: function(Constructor, statics) {
      mixStaticSpecIntoComponent(Constructor, statics);
    },
    autobind: function() {}
  };

  function validateTypeDef(Constructor, typeDef, location) {
    for (var propName in typeDef) {
      if (typeDef.hasOwnProperty(propName)) {
        // use a warning instead of an _invariant so components
        // don't show up in prod but only in __DEV__
        if (process.env.NODE_ENV !== 'production') {
          warning(
            typeof typeDef[propName] === 'function',
            '%s: %s type `%s` is invalid; it must be a function, usually from ' +
              'React.PropTypes.',
            Constructor.displayName || 'ReactClass',
            ReactPropTypeLocationNames[location],
            propName
          );
        }
      }
    }
  }

  function validateMethodOverride(isAlreadyDefined, name) {
    var specPolicy = ReactClassInterface.hasOwnProperty(name)
      ? ReactClassInterface[name]
      : null;

    // Disallow overriding of base class methods unless explicitly allowed.
    if (ReactClassMixin.hasOwnProperty(name)) {
      _invariant(
        specPolicy === 'OVERRIDE_BASE',
        'ReactClassInterface: You are attempting to override ' +
          '`%s` from your class specification. Ensure that your method names ' +
          'do not overlap with React methods.',
        name
      );
    }

    // Disallow defining methods more than once unless explicitly allowed.
    if (isAlreadyDefined) {
      _invariant(
        specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED',
        'ReactClassInterface: You are attempting to define ' +
          '`%s` on your component more than once. This conflict may be due ' +
          'to a mixin.',
        name
      );
    }
  }

  /**
   * Mixin helper which handles policy validation and reserved
   * specification keys when building React classes.
   */
  function mixSpecIntoComponent(Constructor, spec) {
    if (!spec) {
      if (process.env.NODE_ENV !== 'production') {
        var typeofSpec = typeof spec;
        var isMixinValid = typeofSpec === 'object' && spec !== null;

        if (process.env.NODE_ENV !== 'production') {
          warning(
            isMixinValid,
            "%s: You're attempting to include a mixin that is either null " +
              'or not an object. Check the mixins included by the component, ' +
              'as well as any mixins they include themselves. ' +
              'Expected object but got %s.',
            Constructor.displayName || 'ReactClass',
            spec === null ? null : typeofSpec
          );
        }
      }

      return;
    }

    _invariant(
      typeof spec !== 'function',
      "ReactClass: You're attempting to " +
        'use a component class or function as a mixin. Instead, just use a ' +
        'regular object.'
    );
    _invariant(
      !isValidElement(spec),
      "ReactClass: You're attempting to " +
        'use a component as a mixin. Instead, just use a regular object.'
    );

    var proto = Constructor.prototype;
    var autoBindPairs = proto.__reactAutoBindPairs;

    // By handling mixins before any other properties, we ensure the same
    // chaining order is applied to methods with DEFINE_MANY policy, whether
    // mixins are listed before or after these methods in the spec.
    if (spec.hasOwnProperty(MIXINS_KEY)) {
      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
    }

    for (var name in spec) {
      if (!spec.hasOwnProperty(name)) {
        continue;
      }

      if (name === MIXINS_KEY) {
        // We have already handled mixins in a special case above.
        continue;
      }

      var property = spec[name];
      var isAlreadyDefined = proto.hasOwnProperty(name);
      validateMethodOverride(isAlreadyDefined, name);

      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
        RESERVED_SPEC_KEYS[name](Constructor, property);
      } else {
        // Setup methods on prototype:
        // The following member methods should not be automatically bound:
        // 1. Expected ReactClass methods (in the "interface").
        // 2. Overridden methods (that were mixed in).
        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
        var isFunction = typeof property === 'function';
        var shouldAutoBind =
          isFunction &&
          !isReactClassMethod &&
          !isAlreadyDefined &&
          spec.autobind !== false;

        if (shouldAutoBind) {
          autoBindPairs.push(name, property);
          proto[name] = property;
        } else {
          if (isAlreadyDefined) {
            var specPolicy = ReactClassInterface[name];

            // These cases should already be caught by validateMethodOverride.
            _invariant(
              isReactClassMethod &&
                (specPolicy === 'DEFINE_MANY_MERGED' ||
                  specPolicy === 'DEFINE_MANY'),
              'ReactClass: Unexpected spec policy %s for key %s ' +
                'when mixing in component specs.',
              specPolicy,
              name
            );

            // For methods which are defined more than once, call the existing
            // methods before calling the new property, merging if appropriate.
            if (specPolicy === 'DEFINE_MANY_MERGED') {
              proto[name] = createMergedResultFunction(proto[name], property);
            } else if (specPolicy === 'DEFINE_MANY') {
              proto[name] = createChainedFunction(proto[name], property);
            }
          } else {
            proto[name] = property;
            if (process.env.NODE_ENV !== 'production') {
              // Add verbose displayName to the function, which helps when looking
              // at profiling tools.
              if (typeof property === 'function' && spec.displayName) {
                proto[name].displayName = spec.displayName + '_' + name;
              }
            }
          }
        }
      }
    }
  }

  function mixStaticSpecIntoComponent(Constructor, statics) {
    if (!statics) {
      return;
    }

    for (var name in statics) {
      var property = statics[name];
      if (!statics.hasOwnProperty(name)) {
        continue;
      }

      var isReserved = name in RESERVED_SPEC_KEYS;
      _invariant(
        !isReserved,
        'ReactClass: You are attempting to define a reserved ' +
          'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
          'as an instance property instead; it will still be accessible on the ' +
          'constructor.',
        name
      );

      var isAlreadyDefined = name in Constructor;
      if (isAlreadyDefined) {
        var specPolicy = ReactClassStaticInterface.hasOwnProperty(name)
          ? ReactClassStaticInterface[name]
          : null;

        _invariant(
          specPolicy === 'DEFINE_MANY_MERGED',
          'ReactClass: You are attempting to define ' +
            '`%s` on your component more than once. This conflict may be ' +
            'due to a mixin.',
          name
        );

        Constructor[name] = createMergedResultFunction(Constructor[name], property);

        return;
      }

      Constructor[name] = property;
    }
  }

  /**
   * Merge two objects, but throw if both contain the same key.
   *
   * @param {object} one The first object, which is mutated.
   * @param {object} two The second object
   * @return {object} one after it has been mutated to contain everything in two.
   */
  function mergeIntoWithNoDuplicateKeys(one, two) {
    _invariant(
      one && two && typeof one === 'object' && typeof two === 'object',
      'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
    );

    for (var key in two) {
      if (two.hasOwnProperty(key)) {
        _invariant(
          one[key] === undefined,
          'mergeIntoWithNoDuplicateKeys(): ' +
            'Tried to merge two objects with the same key: `%s`. This conflict ' +
            'may be due to a mixin; in particular, this may be caused by two ' +
            'getInitialState() or getDefaultProps() methods returning objects ' +
            'with clashing keys.',
          key
        );
        one[key] = two[key];
      }
    }
    return one;
  }

  /**
   * Creates a function that invokes two functions and merges their return values.
   *
   * @param {function} one Function to invoke first.
   * @param {function} two Function to invoke second.
   * @return {function} Function that invokes the two argument functions.
   * @private
   */
  function createMergedResultFunction(one, two) {
    return function mergedResult() {
      var a = one.apply(this, arguments);
      var b = two.apply(this, arguments);
      if (a == null) {
        return b;
      } else if (b == null) {
        return a;
      }
      var c = {};
      mergeIntoWithNoDuplicateKeys(c, a);
      mergeIntoWithNoDuplicateKeys(c, b);
      return c;
    };
  }

  /**
   * Creates a function that invokes two functions and ignores their return vales.
   *
   * @param {function} one Function to invoke first.
   * @param {function} two Function to invoke second.
   * @return {function} Function that invokes the two argument functions.
   * @private
   */
  function createChainedFunction(one, two) {
    return function chainedFunction() {
      one.apply(this, arguments);
      two.apply(this, arguments);
    };
  }

  /**
   * Binds a method to the component.
   *
   * @param {object} component Component whose method is going to be bound.
   * @param {function} method Method to be bound.
   * @return {function} The bound method.
   */
  function bindAutoBindMethod(component, method) {
    var boundMethod = method.bind(component);
    if (process.env.NODE_ENV !== 'production') {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function(newThis) {
        for (
          var _len = arguments.length,
            args = Array(_len > 1 ? _len - 1 : 0),
            _key = 1;
          _key < _len;
          _key++
        ) {
          args[_key - 1] = arguments[_key];
        }

        // User is trying to bind() an autobound method; we effectively will
        // ignore the value of "this" that the user is trying to use, so
        // let's warn.
        if (newThis !== component && newThis !== null) {
          if (process.env.NODE_ENV !== 'production') {
            warning(
              false,
              'bind(): React component methods may only be bound to the ' +
                'component instance. See %s',
              componentName
            );
          }
        } else if (!args.length) {
          if (process.env.NODE_ENV !== 'production') {
            warning(
              false,
              'bind(): You are binding a component method to the component. ' +
                'React does this for you automatically in a high-performance ' +
                'way, so you can safely remove this call. See %s',
              componentName
            );
          }
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }

  /**
   * Binds all auto-bound methods in a component.
   *
   * @param {object} component Component whose method is going to be bound.
   */
  function bindAutoBindMethods(component) {
    var pairs = component.__reactAutoBindPairs;
    for (var i = 0; i < pairs.length; i += 2) {
      var autoBindKey = pairs[i];
      var method = pairs[i + 1];
      component[autoBindKey] = bindAutoBindMethod(component, method);
    }
  }

  var IsMountedPreMixin = {
    componentDidMount: function() {
      this.__isMounted = true;
    }
  };

  var IsMountedPostMixin = {
    componentWillUnmount: function() {
      this.__isMounted = false;
    }
  };

  /**
   * Add more to the ReactClass base class. These are all legacy features and
   * therefore not already part of the modern ReactComponent.
   */
  var ReactClassMixin = {
    /**
     * TODO: This will be deprecated because state should always keep a consistent
     * type signature and the only use case for this, is to avoid that.
     */
    replaceState: function(newState, callback) {
      this.updater.enqueueReplaceState(this, newState, callback);
    },

    /**
     * Checks whether or not this composite component is mounted.
     * @return {boolean} True if mounted, false otherwise.
     * @protected
     * @final
     */
    isMounted: function() {
      if (process.env.NODE_ENV !== 'production') {
        warning(
          this.__didWarnIsMounted,
          '%s: isMounted is deprecated. Instead, make sure to clean up ' +
            'subscriptions and pending requests in componentWillUnmount to ' +
            'prevent memory leaks.',
          (this.constructor && this.constructor.displayName) ||
            this.name ||
            'Component'
        );
        this.__didWarnIsMounted = true;
      }
      return !!this.__isMounted;
    }
  };

  var ReactClassComponent = function() {};
  _assign(
    ReactClassComponent.prototype,
    ReactComponent.prototype,
    ReactClassMixin
  );

  /**
   * Creates a composite component class given a class specification.
   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  function createClass(spec) {
    // To keep our warnings more understandable, we'll use a little hack here to
    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
    // unnecessarily identify a class without displayName as 'Constructor'.
    var Constructor = identity(function(props, context, updater) {
      // This constructor gets overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      if (process.env.NODE_ENV !== 'production') {
        warning(
          this instanceof Constructor,
          'Something is calling a React component directly. Use a factory or ' +
            'JSX instead. See: https://fb.me/react-legacyfactory'
        );
      }

      // Wire up auto-binding
      if (this.__reactAutoBindPairs.length) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;

      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if (process.env.NODE_ENV !== 'production') {
        // We allow auto-mocks to proceed as if they're returning null.
        if (
          initialState === undefined &&
          this.getInitialState._isMockFunction
        ) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;
        }
      }
      _invariant(
        typeof initialState === 'object' && !Array.isArray(initialState),
        '%s.getInitialState(): must return an object or null',
        Constructor.displayName || 'ReactCompositeComponent'
      );

      this.state = initialState;
    });
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;
    Constructor.prototype.__reactAutoBindPairs = [];

    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

    mixSpecIntoComponent(Constructor, IsMountedPreMixin);
    mixSpecIntoComponent(Constructor, spec);
    mixSpecIntoComponent(Constructor, IsMountedPostMixin);

    // Initialize the defaultProps property after all mixins have been merged.
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if (process.env.NODE_ENV !== 'production') {
      // This is a tag to indicate that the use of these method names is ok,
      // since it's used with createClass. If it's not, then it's likely a
      // mistake so we'll warn you to use the static property, property
      // initializer or constructor respectively.
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    _invariant(
      Constructor.prototype.render,
      'createClass(...): Class specification must implement a `render` method.'
    );

    if (process.env.NODE_ENV !== 'production') {
      warning(
        !Constructor.prototype.componentShouldUpdate,
        '%s has a method called ' +
          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
          'The name is phrased as a question because the function is ' +
          'expected to return a value.',
        spec.displayName || 'A component'
      );
      warning(
        !Constructor.prototype.componentWillRecieveProps,
        '%s has a method called ' +
          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',
        spec.displayName || 'A component'
      );
      warning(
        !Constructor.prototype.UNSAFE_componentWillRecieveProps,
        '%s has a method called UNSAFE_componentWillRecieveProps(). ' +
          'Did you mean UNSAFE_componentWillReceiveProps()?',
        spec.displayName || 'A component'
      );
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    return Constructor;
  }

  return createClass;
}

module.exports = factory;

}).call(this,require('_process'))

},{"_process":26,"fbjs/lib/emptyObject":22,"fbjs/lib/invariant":23,"fbjs/lib/warning":24,"object-assign":25}],19:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var React = require('react');
var factory = require('./factory');

if (typeof React === 'undefined') {
  throw Error(
    'create-react-class could not find the React object. If you are using script tags, ' +
      'make sure that React is being loaded before create-react-class.'
  );
}

// Hack to grab NoopUpdateQueue from isomorphic React
var ReactNoopUpdateQueue = new React.Component().updater;

module.exports = factory(
  React.Component,
  React.isValidElement,
  ReactNoopUpdateQueue
);

},{"./factory":18,"react":"react"}],20:[function(require,module,exports){
module.exports = function (css, customDocument) {
  var doc = customDocument || document;
  if (doc.createStyleSheet) {
    var sheet = doc.createStyleSheet()
    sheet.cssText = css;
    return sheet.ownerNode;
  } else {
    var head = doc.getElementsByTagName('head')[0],
        style = doc.createElement('style');

    style.type = 'text/css';

    if (style.styleSheet) {
      style.styleSheet.cssText = css;
    } else {
      style.appendChild(doc.createTextNode(css));
    }

    head.appendChild(style);
    return style;
  }
};

module.exports.byUrl = function(url) {
  if (document.createStyleSheet) {
    return document.createStyleSheet(url).ownerNode;
  } else {
    var head = document.getElementsByTagName('head')[0],
        link = document.createElement('link');

    link.rel = 'stylesheet';
    link.href = url;

    head.appendChild(link);
    return link;
  }
};

},{}],21:[function(require,module,exports){
"use strict";

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;
},{}],22:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var emptyObject = {};

if (process.env.NODE_ENV !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
}).call(this,require('_process'))

},{"_process":26}],23:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

if (process.env.NODE_ENV !== 'production') {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;
}).call(this,require('_process'))

},{"_process":26}],24:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var emptyFunction = require('./emptyFunction');

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  var printWarning = function printWarning(format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  warning = function warning(condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

module.exports = warning;
}).call(this,require('_process'))

},{"./emptyFunction":21,"_process":26}],25:[function(require,module,exports){
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],26:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],27:[function(require,module,exports){
module.exports = require('cssify');
},{"cssify":20}],28:[function(require,module,exports){
(function (setImmediate,clearImmediate){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
}).call(this,require("timers").setImmediate,require("timers").clearImmediate)

},{"process/browser.js":26,"timers":28}],29:[function(require,module,exports){

/**
 * Export.
 */

module.exports = toNoCase

/**
 * Test whether a string is camel-case.
 */

var hasSpace = /\s/
var hasSeparator = /(_|-|\.|:)/
var hasCamel = /([a-z][A-Z]|[A-Z][a-z])/

/**
 * Remove any starting case from a `string`, like camel or snake, but keep
 * spaces and punctuation that may be important otherwise.
 *
 * @param {String} string
 * @return {String}
 */

function toNoCase(string) {
  if (hasSpace.test(string)) return string.toLowerCase()
  if (hasSeparator.test(string)) return (unseparate(string) || string).toLowerCase()
  if (hasCamel.test(string)) return uncamelize(string).toLowerCase()
  return string.toLowerCase()
}

/**
 * Separator splitter.
 */

var separatorSplitter = /[\W_]+(.|$)/g

/**
 * Un-separate a `string`.
 *
 * @param {String} string
 * @return {String}
 */

function unseparate(string) {
  return string.replace(separatorSplitter, function (m, next) {
    return next ? ' ' + next : ''
  })
}

/**
 * Camelcase splitter.
 */

var camelSplitter = /(.)([A-Z]+)/g

/**
 * Un-camelcase a `string`.
 *
 * @param {String} string
 * @return {String}
 */

function uncamelize(string) {
  return string.replace(camelSplitter, function (m, previous, uppers) {
    return previous + ' ' + uppers.toLowerCase().split('').join(' ')
  })
}

},{}],30:[function(require,module,exports){

var toSpace = require('to-space-case')

/**
 * Export.
 */

module.exports = toSnakeCase

/**
 * Convert a `string` to snake case.
 *
 * @param {String} string
 * @return {String}
 */

function toSnakeCase(string) {
  return toSpace(string).replace(/\s/g, '_')
}

},{"to-space-case":31}],31:[function(require,module,exports){

var clean = require('to-no-case')

/**
 * Export.
 */

module.exports = toSpaceCase

/**
 * Convert a `string` to space case.
 *
 * @param {String} string
 * @return {String}
 */

function toSpaceCase(string) {
  return clean(string).replace(/[\W_]+(.|$)/g, function (matches, match) {
    return match ? ' ' + match : ''
  }).trim()
}

},{"to-no-case":29}],32:[function(require,module,exports){
"use strict";

var Helpers = require('./helpers');

module.exports = function () {
  function Api(options) {
    this.config = options;
  }

  Api.prototype.initRequest = function (project_id, data, auth_token) {
    return new Promise(function (resolve, reject) {
      var url = "https://".concat(this.config.api_host, "/v2/project/").concat(project_id, "/widget/init");
      var searchParams = Helpers.buildQueryString(data);
      var request = new XMLHttpRequest();
      request.open('POST', url, true);
      request.setRequestHeader('Accept', 'application/json, text/javascript, */*; q=0.01');
      request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');

      if (auth_token) {
        request.setRequestHeader('Authorization', "Bearer ".concat(auth_token));
      }

      request.send(searchParams);

      request.onreadystatechange = function () {
        if (request.readyState === 4) {
          var jsonResponse = JSON.parse(request.responseText);

          if (this.status !== 200) {
            reject(jsonResponse);
          }

          resolve(jsonResponse);
        }
      };
    }.bind(this));
  };

  return Api;
}();

},{"./helpers":36}],33:[function(require,module,exports){
"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var PaystationEmbedApp = require('paystation-embed-app');

var XL = require('xsolla-login-app');

var Exception = require('exception');

var React = require('react');

var ReactDOM = require('react-dom');

var Api = require('./api');

var Helpers = require('./helpers');

var Translate = require('./translate');

var Jwt = require('./jwt');

var Cookie = require('./cookie');

module.exports = function () {
  var DEFAULT_ITEM_TYPE = 'digital_content';
  var DEFAULT_HOST = 'store.xsolla.com';
  var DEFAULT_API_HOST = 'store.xsolla.com/api';
  var DEFAULT_PAYSTATION_RESIZE_TIMEOUT = 2000;
  var DEFAULT_CONFIG = {
    access_token: null,
    access_data: null,
    item_type: DEFAULT_ITEM_TYPE,
    project_id: null,
    sku: null,
    drm: null,
    user: {
      xsolla_login_token: null,
      auth: null,
      locale: null
    },
    api_settings: {
      host: DEFAULT_HOST,
      api_host: DEFAULT_API_HOST
    },
    widget_ui: {
      theme: {
        foreground: 'blue',
        background: 'light'
      },
      template: 'standard'
    },
    payment_ui: null,
    payment_widget_ui: null,
    login_ui: {
      popupBackgroundColor: 'rgba(0, 0, 0, 0.64)',
      theme: null,
      iframeZIndex: 1000000
    }
  };

  function App() {
    this.config = Object.assign({}, DEFAULT_CONFIG);
    this.eventObject = {
      on: function (event, handle) {
        if (!this.targetElement) {
          return;
        }

        this.targetElement.addEventListener(event, handle);
      }.bind(this),
      off: function (event, handle) {
        if (!this.targetElement) {
          return;
        }

        this.targetElement.removeEventListener(event, handle);
      }.bind(this)
    };
    this.isInitiated = false;
    this.targetElement = null;
    this.view = null;
    this.xsollaLoginProjectId = null;
    this.locale = null;
  }

  App.foregroundTypes = {
    BLUE: 'blue',
    RED: 'red',
    GOLD: 'gold',
    GREEN: 'green'
  };
  App.backgroundTypes = {
    LIGHT: 'light',
    DARK: 'dark'
  };
  App.tokenCookieName = 'xsolla_login_token';
  App.tokenParameterName = 'token';
  App.selectorCookieName = 'xsolla_login_selector';
  App.selectorParameterName = 'css_selector';
  App.eventTypes = Object.assign({}, PaystationEmbedApp.eventTypes);
  /** Private Members **/

  App.prototype.checkConfigForRequiredParams = function () {
    if (Helpers.isEmpty(this.config.project_id)) {
      this.throwError('No project id given');
    }

    if (Helpers.isEmpty(this.config.item_type)) {
      this.throwError('No item_type given');
    }

    if (Helpers.isEmpty(this.config.access_token)) {
      if (Helpers.isEmpty(this.config.sku)) {
        this.throwError('No sku given');
      }
    }

    if (!Helpers.isEmpty(this.config.access_data) && _typeof(this.config.access_data) !== 'object') {
      this.throwError('Invalid access data format');
    }

    if (this.config.api_settings && Helpers.isEmpty(this.config.api_settings.host)) {
      this.config.api_settings.host = DEFAULT_HOST;
    }

    if (this.config.api_settings && this.config.api_settings.host && Helpers.isEmpty(this.config.api_settings.api_host)) {
      this.config.api_settings.api_host = this.config.api_settings.host + '/api';
    }

    if (Helpers.isEmpty(this.config.widget_ui) || Helpers.isEmpty(this.config.widget_ui.target_element)) {
      this.throwError('No target element given');
    }

    if (this.config.widget_ui && this.config.widget_ui.target_element && !document.querySelector(this.config.widget_ui.target_element)) {
      this.throwError('Target element doesn\'t exist in the DOM');
    }

    if (this.config.widget_ui) {
      if (Helpers.isEmpty(this.config.widget_ui.theme)) {
        this.config.widget_ui.theme = {};
      }

      if (!Object.values(App.foregroundTypes).includes(this.config.widget_ui.theme.foreground)) {
        this.config.widget_ui.theme.foreground = App.foregroundTypes.BLUE;
      }

      if (!Object.values(App.backgroundTypes).includes(this.config.widget_ui.theme.background)) {
        this.config.widget_ui.theme.background = App.backgroundTypes.LIGHT;
      }
    }

    if (Helpers.isEmpty(this.config.payment_widget_ui)) {
      this.config.payment_widget_ui = {};
    }

    this.config.payment_widget_ui.lightbox = _objectSpread({
      resizeTimeout: DEFAULT_PAYSTATION_RESIZE_TIMEOUT
    }, this.config.payment_widget_ui.lightbox);
  };

  App.prototype.openXsollaLogin = function () {
    var loginPayload = {
      css_selector: this.targetElement.getAttribute('id')
    };
    var loginOptions = {
      payload: JSON.stringify(loginPayload),
      projectId: this.xsollaLoginProjectId,
      callbackUrl: document.location.href,
      locale: this.locale,
      popupBackgroundColor: this.config.login_ui.popupBackgroundColor,
      theme: this.config.login_ui.theme,
      iframeZIndex: this.config.login_ui.iframeZIndex,
      route: XL.ROUTES.SOCIALS_LOGIN
    };
    XL.init(Helpers.deepClone(loginOptions));
    XL.show();
  };

  App.prototype.openPaystation = function (params) {
    var buyParams = {
      project_id: Number(this.config.project_id),
      type: this.config.item_type,
      sku: this.config.sku,
      drm: this.config.drm,
      access_token: this.config.access_token,
      access_data: this.config.access_data && btoa(JSON.stringify(this.config.access_data)),
      mode: this.config.api_settings && this.config.api_settings.sandbox && 'sandbox',
      ui_settings: this.config.payment_ui && btoa(JSON.stringify(this.config.payment_ui)),
      xsolla_login_token: this.getAuthToken(),
      locale: this.config.user && this.config.user.locale,
      country: this.getCountryFromAccessData(),
      currency: this.getCurrencyFromAccessData()
    };
    Helpers.filterObject(buyParams);
    var buyUrlWithoutQueryParams = 'https://' + this.config.api_settings.host + '/pages/buy.php?';
    var buyUrl = buyUrlWithoutQueryParams + Helpers.buildQueryString(buyParams);
    PaystationEmbedApp.init({
      payment_url: buyUrl,
      embed_type: 'widget',
      lightbox: this.config.payment_widget_ui && this.config.payment_widget_ui.lightbox,
      childWindow: this.config.payment_widget_ui && this.config.payment_widget_ui.childWindow
    }); // Register events (forwarding)

    var events = Object.keys(App.eventTypes).map(function (eventType) {
      return App.eventTypes[eventType];
    }).join(' ');

    var eventHandler = function (event) {
      this.triggerEvent.apply(this, [event]);
    }.bind(this);

    PaystationEmbedApp.on(events, eventHandler);

    var openHandler = function () {
      var instanceId = (params || {}).instance_id;
      var tips = (params || {}).tips;

      if (instanceId || tips) {
        PaystationEmbedApp.sendMessage('set-data', {
          settings: {
            payment_method: instanceId,
            tips: tips
          }
        });
      }
    }.bind(this);

    PaystationEmbedApp.on('load', openHandler); // Unregister events

    PaystationEmbedApp.on('close', function handleClose() {
      PaystationEmbedApp.off('close', handleClose);
      PaystationEmbedApp.off('load', openHandler);
      PaystationEmbedApp.off(events, eventHandler);
      Cookie.deleteCookie(App.selectorCookieName);
      Cookie.deleteCookie(App.tokenCookieName);
    });
    PaystationEmbedApp.open();
  };

  App.prototype.checkApp = function () {
    if (!this.isInitiated) {
      this.throwError('Initialize widget before opening');
    }
  };

  App.prototype.throwError = function (message) {
    throw new Exception(message);
  };

  App.prototype.triggerEvent = function () {
    [].forEach.call(arguments, function (eventName) {
      if (typeof eventName !== 'string') {
        eventName = eventName.type;
      }

      var event = document.createEvent('HTMLEvents');
      event.initEvent(eventName, false, false);
      this.targetElement.dispatchEvent(event);
    }.bind(this));
  };

  App.prototype.setUpTheme = function () {
    switch (this.config.widget_ui.template) {
      case 'simple':
        require('./styles/base/simple.scss');

        this.view = require('./views/layouts/simple.jsx');
        break;

      case 'standard':
      default:
        require('./styles/base/widget.scss');

        this.view = require('./views/layouts/tiny.jsx');
        break;
    }
  };

  App.prototype.reinitializeAfterLogin = function () {
    var urlParams = new URLSearchParams(window.location.search);
    var xsollaLoginToken = urlParams.get(App.tokenParameterName);

    if (xsollaLoginToken) {
      this.saveSelectorToCookie(xsollaLoginToken);
      this.saveXsollaLoginTokenToCookie(xsollaLoginToken);
      Helpers.removeParamFromUrl(App.tokenParameterName);
    }
  };

  App.prototype.saveXsollaLoginTokenToCookie = function (xsollaLoginToken) {
    if (xsollaLoginToken) {
      Cookie.setCookie(App.tokenCookieName, xsollaLoginToken);
    }
  };

  App.prototype.saveSelectorToCookie = function (xsollaLoginToken) {
    if (xsollaLoginToken) {
      var parsedJwt = Jwt.parseJwt(xsollaLoginToken);

      if (parsedJwt && parsedJwt.payload) {
        var payload = JSON.parse(parsedJwt.payload);
        var selector = payload && payload[App.selectorParameterName];

        if (selector) {
          Cookie.setCookie(App.selectorCookieName, selector);
        }
      }
    }
  };

  App.prototype.getAuthToken = function () {
    if (this.config.user && this.config.user.auth) {
      return this.config.user.auth;
    }

    if (this.config.user && this.config.user.xsolla_login_token) {
      return this.config.user.xsolla_login_token;
    }

    return Cookie.getCookie(App.tokenCookieName);
  };

  App.prototype.getCountryFromAccessData = function () {
    return this.config.access_data && this.config.access_data.user && this.config.access_data.user.country && this.config.access_data.user.country.value;
  };

  App.prototype.getCurrencyFromAccessData = function () {
    return this.config.access_data && this.config.access_data.settings && this.config.access_data.settings.currency;
  };

  App.prototype.getSelector = function () {
    return Cookie.getCookie(App.selectorCookieName);
  };

  App.prototype.needShowLogin = function () {
    return this.xsollaLoginProjectId && !this.getAuthToken();
  };
  /**
   * Initialize widget with options
   * @param config
   */


  App.prototype.init = function (config) {
    this.isInitiated = true;
    this.config = Helpers.deepClone(Object.assign({}, DEFAULT_CONFIG, config));
    this.checkConfigForRequiredParams();
    this.setUpTheme();
    this.reinitializeAfterLogin();
    this.targetElement = document.querySelector(this.config.widget_ui.target_element);
    this.api = new Api(this.config.api_settings);
    this.render(this.config);
    this.triggerEvent('init');
  };
  /**
   * Open payment interface (PayStation)
   */


  App.prototype.open = function (params) {
    this.checkApp();

    if (this.needShowLogin()) {
      this.openXsollaLogin();
    } else {
      this.openPaystation(params);
    }
  };
  /**
   * Attach an event handler function for one or more events to the widget
   * @param event One or more space-separated event types (init, open, load, close, status, status-invoice, status-delivering, status-troubled, status-done)
   * @param handler A function to execute when the event is triggered
   */


  App.prototype.on = function (event, handler) {
    if (typeof handler !== 'function') {
      return;
    }

    this.eventObject.on(event, handler);
  };
  /**
   * Remove an event handler
   * @param event One or more space-separated event types
   * @param handler A handler function previously attached for the event(s)
   */


  App.prototype.off = function (event, handler) {
    this.eventObject.off(event, handler);
  };
  /**
   * Render widget template
   */


  App.prototype.render = function () {
    var _this = this;

    var props = {
      data: {},
      onPaymentOpen: function onPaymentOpen(params) {
        return _this.open(params);
      },
      paymentButtonColor: this.config.widget_ui.theme.foreground,
      themeColor: this.config.widget_ui.theme.background
    };

    var updateView = function updateView() {
      var css_selector = _this.getSelector();

      var current_selector = _this.targetElement.getAttribute('id');

      props.needShowPaystation = css_selector === current_selector;
      ReactDOM.render(React.createElement(_this.view, props), _this.targetElement);
    };

    var initLoginParams = function initLoginParams(locale) {
      _this.xsollaLoginProjectId = props.data.xsollaLoginProjectId;
      _this.locale = locale;
    };

    updateView();
    var initParams = {
      type: this.config.item_type,
      sku: this.config.sku,
      drm: this.config.drm,
      access_token: this.config.access_token,
      mode: this.config.api_settings && this.config.api_settings.sandbox && 'sandbox',
      locale: this.config.user && this.config.user.locale,
      country: this.getCountryFromAccessData(),
      currency: this.getCurrencyFromAccessData()
    };
    Helpers.filterObject(initParams);
    this.api.initRequest(Number(this.config.project_id), initParams, this.getAuthToken()).then(function (data) {
      props.data = {
        amount: {
          value: data.item.amount,
          value_without_discount: data.item.amount_without_discount,
          currency: data.item.currency,
          hasDifferent: data.item.has_different_prices
        },
        name: data.item.name,
        logoUrl: data.item.image_url,
        is_released: data.item.is_released,
        locale: data.user.locale,
        xsollaLoginProjectId: data.user.xsolla_login_project_id
      };
      Translate.init(data.ui_translations || {});

      if (props.data.xsollaLoginProjectId) {
        initLoginParams(data.user.locale);
      }

      updateView();
    }).catch(function (error) {
      props.data = {
        error: error
      };

      if (error.errorCode && error.errorMessage) {
        console.warn('XsollaBuyButtonWidget', error.errorCode, error.errorMessage);
      }

      updateView();
    });
  };

  return App;
}();

},{"./api":32,"./cookie":34,"./helpers":36,"./jwt":37,"./styles/base/simple.scss":39,"./styles/base/widget.scss":40,"./translate":41,"./views/layouts/simple.jsx":46,"./views/layouts/tiny.jsx":47,"exception":35,"paystation-embed-app":"paystation-embed-app","react":"react","react-dom":"react-dom","xsolla-login-app":"xsolla-login-app"}],34:[function(require,module,exports){
"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getCookie(name) {
  var matches = document.cookie.match(new RegExp("(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"));
  return matches ? decodeURIComponent(matches[1]) : undefined;
}

function setCookie(name, value) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  options = _objectSpread({
    path: '/'
  }, options);
  var updatedCookie = encodeURIComponent(name) + "=" + encodeURIComponent(value);

  for (var optionKey in options) {
    updatedCookie += "; " + optionKey;
    var optionValue = options[optionKey];

    if (optionValue !== true) {
      updatedCookie += "=" + optionValue;
    }
  }

  document.cookie = updatedCookie;
}

function deleteCookie(name) {
  setCookie(name, '', {
    'max-age': -1
  });
}

module.exports = {
  getCookie: getCookie,
  setCookie: setCookie,
  deleteCookie: deleteCookie
};

},{}],35:[function(require,module,exports){
"use strict";

module.exports = function (message) {
  this.message = message;
  this.name = "XsollaBuyButtonWidgetException";

  this.toString = function () {
    return this.name + ': ' + this.message;
  }.bind(this);
};

},{}],36:[function(require,module,exports){
"use strict";

function isEmpty(value) {
  return value === null || value === undefined;
}

function zipObject(props, values) {
  var index = -1,
      length = props ? props.length : 0,
      result = {};

  if (length && !values && !Array.isArray(props[0])) {
    values = [];
  }

  while (++index < length) {
    var key = props[index];

    if (values) {
      result[key] = values[index];
    } else if (key) {
      result[key[0]] = key[1];
    }
  }

  return result;
}

function deepClone(data) {
  return JSON.parse(JSON.stringify(data));
}

function filterObject(object) {
  Object.keys(object).forEach(function (key) {
    return !Boolean(object[key]) && delete object[key];
  });
}

function buildQueryString(data) {
  return Object.keys(data).map(function (key) {
    return encodeURIComponent(key) + '=' + encodeURIComponent(data[key]);
  }).join('&');
}

function removeParamFromUrl(paramName) {
  var urlParams = new URLSearchParams(window.location.search);
  urlParams.delete(paramName);
  var url = document.location.origin + document.location.pathname + '?' + urlParams.toString() + document.location.hash;
  window.history.pushState({}, document.title, url);
}

module.exports = {
  isEmpty: isEmpty,
  zipObject: zipObject,
  deepClone: deepClone,
  filterObject: filterObject,
  buildQueryString: buildQueryString,
  removeParamFromUrl: removeParamFromUrl
};

},{}],37:[function(require,module,exports){
"use strict";

function parseJwt(jwtToken) {
  var base64Url = jwtToken.split('.')[1];
  var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
  var jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {
    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
  }).join(''));
  return JSON.parse(jsonPayload);
}

module.exports = {
  parseJwt: parseJwt
};

},{}],38:[function(require,module,exports){
(function (global,setImmediate){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function promise() {
  // https://github.com/taylorhakes/promise-polyfill
  !function (e, n) {
    "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? n() : "function" == typeof define && define.amd ? define(n) : n();
  }(0, function () {
    "use strict";

    function e(e) {
      var n = this.constructor;
      return this.then(function (t) {
        return n.resolve(e()).then(function () {
          return t;
        });
      }, function (t) {
        return n.resolve(e()).then(function () {
          return n.reject(t);
        });
      });
    }

    function n(e) {
      return !(!e || "undefined" == typeof e.length);
    }

    function t() {}

    function o(e) {
      if (!(this instanceof o)) throw new TypeError("Promises must be constructed via new");
      if ("function" != typeof e) throw new TypeError("not a function");
      this._state = 0, this._handled = !1, this._value = undefined, this._deferreds = [], c(e, this);
    }

    function r(e, n) {
      for (; 3 === e._state;) {
        e = e._value;
      }

      0 !== e._state ? (e._handled = !0, o._immediateFn(function () {
        var t = 1 === e._state ? n.onFulfilled : n.onRejected;

        if (null !== t) {
          var o;

          try {
            o = t(e._value);
          } catch (r) {
            return void f(n.promise, r);
          }

          i(n.promise, o);
        } else (1 === e._state ? i : f)(n.promise, e._value);
      })) : e._deferreds.push(n);
    }

    function i(e, n) {
      try {
        if (n === e) throw new TypeError("A promise cannot be resolved with itself.");

        if (n && ("object" == _typeof(n) || "function" == typeof n)) {
          var t = n.then;
          if (n instanceof o) return e._state = 3, e._value = n, void u(e);
          if ("function" == typeof t) return void c(function (e, n) {
            return function () {
              e.apply(n, arguments);
            };
          }(t, n), e);
        }

        e._state = 1, e._value = n, u(e);
      } catch (r) {
        f(e, r);
      }
    }

    function f(e, n) {
      e._state = 2, e._value = n, u(e);
    }

    function u(e) {
      2 === e._state && 0 === e._deferreds.length && o._immediateFn(function () {
        e._handled || o._unhandledRejectionFn(e._value);
      });

      for (var n = 0, t = e._deferreds.length; t > n; n++) {
        r(e, e._deferreds[n]);
      }

      e._deferreds = null;
    }

    function c(e, n) {
      var t = !1;

      try {
        e(function (e) {
          t || (t = !0, i(n, e));
        }, function (e) {
          t || (t = !0, f(n, e));
        });
      } catch (o) {
        if (t) return;
        t = !0, f(n, o);
      }
    }

    var a = setTimeout;
    o.prototype["catch"] = function (e) {
      return this.then(null, e);
    }, o.prototype.then = function (e, n) {
      var o = new this.constructor(t);
      return r(this, new function (e, n, t) {
        this.onFulfilled = "function" == typeof e ? e : null, this.onRejected = "function" == typeof n ? n : null, this.promise = t;
      }(e, n, o)), o;
    }, o.prototype["finally"] = e, o.all = function (e) {
      return new o(function (t, o) {
        function r(e, n) {
          try {
            if (n && ("object" == _typeof(n) || "function" == typeof n)) {
              var u = n.then;
              if ("function" == typeof u) return void u.call(n, function (n) {
                r(e, n);
              }, o);
            }

            i[e] = n, 0 == --f && t(i);
          } catch (c) {
            o(c);
          }
        }

        if (!n(e)) return o(new TypeError("Promise.all accepts an array"));
        var i = Array.prototype.slice.call(e);
        if (0 === i.length) return t([]);

        for (var f = i.length, u = 0; i.length > u; u++) {
          r(u, i[u]);
        }
      });
    }, o.resolve = function (e) {
      return e && "object" == _typeof(e) && e.constructor === o ? e : new o(function (n) {
        n(e);
      });
    }, o.reject = function (e) {
      return new o(function (n, t) {
        t(e);
      });
    }, o.race = function (e) {
      return new o(function (t, r) {
        if (!n(e)) return r(new TypeError("Promise.race accepts an array"));

        for (var i = 0, f = e.length; f > i; i++) {
          o.resolve(e[i]).then(t, r);
        }
      });
    }, o._immediateFn = "function" == typeof setImmediate && function (e) {
      setImmediate(e);
    } || function (e) {
      a(e, 0);
    }, o._unhandledRejectionFn = function (e) {
      void 0 !== console && console && console.warn("Possible Unhandled Promise Rejection:", e);
    };

    var l = function () {
      if ("undefined" != typeof self) return self;
      if ("undefined" != typeof window) return window;
      if ("undefined" != typeof global) return global;
      throw Error("unable to locate global object");
    }();

    "Promise" in l ? l.Promise.prototype["finally"] || (l.Promise.prototype["finally"] = e) : l.Promise = o;
  });
}

function objectAssign() {
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign Polyfill
  Object.assign || Object.defineProperty(Object, "assign", {
    enumerable: !1,
    configurable: !0,
    writable: !0,
    value: function value(e, r) {
      "use strict";

      if (null == e) throw new TypeError("Cannot convert first argument to object");

      for (var t = Object(e), n = 1; n < arguments.length; n++) {
        var o = arguments[n];
        if (null != o) for (var a = Object.keys(Object(o)), c = 0, b = a.length; c < b; c++) {
          var i = a[c],
              l = Object.getOwnPropertyDescriptor(o, i);
          void 0 !== l && l.enumerable && (t[i] = o[i]);
        }
      }

      return t;
    }
  });
}

function arrayForEach() {
  Array.prototype.forEach || (Array.prototype.forEach = function (r, o) {
    var t, n;
    if (null == this) throw new TypeError(" this is null or not defined");
    var e = Object(this),
        i = e.length >>> 0;
    if ("function" != typeof r) throw new TypeError(r + " is not a function");

    for (arguments.length > 1 && (t = o), n = 0; n < i;) {
      var f;
      n in e && (f = e[n], r.call(t, f, n, e)), n++;
    }
  });
}

function urlSearchParams() {
  !function (r) {
    "use strict";

    var t,
        n = r.URLSearchParams && r.URLSearchParams.prototype.get ? r.URLSearchParams : null,
        e = n && "a=1" === new n({
      a: 1
    }).toString(),
        o = n && "+" === new n("s=%2B").get("s"),
        a = "__URLSearchParams__",
        i = !n || ((t = new n()).append("s", " &"), "s=+%26" === t.toString()),
        c = l.prototype,
        s = !(!r.Symbol || !r.Symbol.iterator);

    if (!(n && e && o && i)) {
      c.append = function (t, n) {
        y(this[a], t, n);
      }, c.delete = function (t) {
        delete this[a][t];
      }, c.get = function (t) {
        var n = this[a];
        return t in n ? n[t][0] : null;
      }, c.getAll = function (t) {
        var n = this[a];
        return t in n ? n[t].slice(0) : [];
      }, c.has = function (t) {
        return t in this[a];
      }, c.set = function (t, n) {
        this[a][t] = ["" + n];
      }, c.toString = function () {
        var t,
            n,
            r,
            e,
            o = this[a],
            i = [];

        for (n in o) {
          for (r = h(n), t = 0, e = o[n]; t < e.length; t++) {
            i.push(r + "=" + h(e[t]));
          }
        }

        return i.join("&");
      };
      var u = !!o && n && !e && r.Proxy;
      Object.defineProperty(r, "URLSearchParams", {
        value: u ? new Proxy(n, {
          construct: function construct(t, n) {
            return new t(new l(n[0]).toString());
          }
        }) : l
      });
      var f = r.URLSearchParams.prototype;
      f.polyfill = !0, f.forEach = f.forEach || function (r, e) {
        var t = v(this.toString());
        Object.getOwnPropertyNames(t).forEach(function (n) {
          t[n].forEach(function (t) {
            r.call(e, t, n, this);
          }, this);
        }, this);
      }, f.sort = f.sort || function () {
        var t,
            n,
            r,
            e = v(this.toString()),
            o = [];

        for (t in e) {
          o.push(t);
        }

        for (o.sort(), n = 0; n < o.length; n++) {
          this.delete(o[n]);
        }

        for (n = 0; n < o.length; n++) {
          var i = o[n],
              a = e[i];

          for (r = 0; r < a.length; r++) {
            this.append(i, a[r]);
          }
        }
      }, f.keys = f.keys || function () {
        var r = [];
        return this.forEach(function (t, n) {
          r.push(n);
        }), g(r);
      }, f.values = f.values || function () {
        var n = [];
        return this.forEach(function (t) {
          n.push(t);
        }), g(n);
      }, f.entries = f.entries || function () {
        var r = [];
        return this.forEach(function (t, n) {
          r.push([n, t]);
        }), g(r);
      }, s && (f[r.Symbol.iterator] = f[r.Symbol.iterator] || f.entries);
    }

    function l(t) {
      ((t = t || "") instanceof URLSearchParams || t instanceof l) && (t = t.toString()), this[a] = v(t);
    }

    function h(t) {
      var n = {
        "!": "%21",
        "'": "%27",
        "(": "%28",
        ")": "%29",
        "~": "%7E",
        "%20": "+",
        "%00": "\0"
      };
      return encodeURIComponent(t).replace(/[!'\(\)~]|%20|%00/g, function (t) {
        return n[t];
      });
    }

    function p(t) {
      return t.replace(/[ +]/g, "%20").replace(/(%[a-f0-9]{2})+/gi, function (t) {
        return decodeURIComponent(t);
      });
    }

    function g(n) {
      var t = {
        next: function next() {
          var t = n.shift();
          return {
            done: void 0 === t,
            value: t
          };
        }
      };
      return s && (t[r.Symbol.iterator] = function () {
        return t;
      }), t;
    }

    function v(t) {
      var n = {};
      if ("object" == _typeof(t)) {
        if (S(t)) for (var r = 0; r < t.length; r++) {
          var e = t[r];
          if (!S(e) || 2 !== e.length) throw new TypeError("Failed to construct 'URLSearchParams': Sequence initializer must only contain pair elements");
          y(n, e[0], e[1]);
        } else for (var o in t) {
          t.hasOwnProperty(o) && y(n, o, t[o]);
        }
      } else {
        0 === t.indexOf("?") && (t = t.slice(1));

        for (var i = t.split("&"), a = 0; a < i.length; a++) {
          var c = i[a],
              s = c.indexOf("=");
          -1 < s ? y(n, p(c.slice(0, s)), p(c.slice(s + 1))) : c && y(n, p(c), "");
        }
      }
      return n;
    }

    function y(t, n, r) {
      var e = "string" == typeof r ? r : null != r && "function" == typeof r.toString ? r.toString() : JSON.stringify(r);
      n in t ? t[n].push(e) : t[n] = [e];
    }

    function S(t) {
      return !!t && "[object Array]" === Object.prototype.toString.call(t);
    }
  }("undefined" != typeof global ? global : "undefined" != typeof window ? window : this);
}

function applyPolyfills() {
  promise();
  objectAssign();
  arrayForEach();
  urlSearchParams();
}

module.exports = {
  applyPolyfills: applyPolyfills
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("timers").setImmediate)

},{"timers":28}],39:[function(require,module,exports){
module.exports = require('sassify')('@-webkit-keyframes x-buy-button-widget-simple-spin{from{-webkit-transform:rotate(0deg)}to{-webkit-transform:rotate(360deg)}}@keyframes x-buy-button-widget-simple-spin{from{transform:rotate(0deg)}to{transform:rotate(360deg)}}.xbuyButton-widget-tether-element,.xbuyButton-widget-tether-element:after,.xbuyButton-widget-tether-element:before,.xbuyButton-widget-tether-element *,.xbuyButton-widget-tether-element *:after,.xbuyButton-widget-tether-element *:before{box-sizing:border-box}.xbuyButton-widget-tether-element{font-family:Arial,"Helvetica Neue",Helvetica,sans-serif;position:absolute;display:none}.xbuyButton-widget-tether-element div,.xbuyButton-widget-tether-element a,.xbuyButton-widget-tether-element button{box-sizing:border-box}.xbuyButton-widget-tether-element button{font-family:Arial,"Helvetica Neue",Helvetica,sans-serif}.xbuyButton-widget-tether-element a:active,.xbuyButton-widget-tether-element a:hover,.xbuyButton-widget-tether-element button{outline:0}.xbuyButton-widget-tether-element button::-moz-focus-inner,.xbuyButton-widget-tether-element input[type="button"]::-moz-focus-inner,.xbuyButton-widget-tether-element input[type="submit"]::-moz-focus-inner,.xbuyButton-widget-tether-element input[type="reset"]::-moz-focus-inner{padding:0;border:0 none}.xbuyButton-widget-tether-element pre{display:block;font-family:inherit;line-height:1.3em;margin:0;white-space:pre-wrap}.xbuyButton-widget-tether-element.xbuyButton-widget-tether__visible{display:block}.xbuyButton-widget-tether-element{max-width:100%;max-height:100%}.xbuyButton-widget-tether-element .xbuyButton-widget-tether-content{border-radius:5px;position:relative;font-family:inherit;background:#fff;color:#4a4a4a;padding:1em;font-size:14px;line-height:1.3em;box-shadow:0 3px 12px rgba(0,0,0,0.35);max-width:400px;pointer-events:none}.xbuyButton-widget-tether-element .xbuyButton-widget-tether-content:before{content:"";display:block;position:absolute;width:0;height:0;border-color:transparent;border-width:8px;border-style:solid}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-bottom.xbuyButton-widget-tether-element-attached-center .xbuyButton-widget-tether-content{margin-bottom:8px}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-bottom.xbuyButton-widget-tether-element-attached-center .xbuyButton-widget-tether-content:before{top:100%;left:50%;margin-left:-8px;border-top-color:#fff}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-top.xbuyButton-widget-tether-element-attached-center .xbuyButton-widget-tether-content{margin-top:8px}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-top.xbuyButton-widget-tether-element-attached-center .xbuyButton-widget-tether-content:before{bottom:100%;left:50%;margin-left:-8px;border-bottom-color:#fff}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-right.xbuyButton-widget-tether-element-attached-middle .xbuyButton-widget-tether-content{margin-right:8px}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-right.xbuyButton-widget-tether-element-attached-middle .xbuyButton-widget-tether-content:before{left:100%;top:50%;margin-top:-8px;border-left-color:#fff}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-left.xbuyButton-widget-tether-element-attached-middle .xbuyButton-widget-tether-content{margin-left:8px}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-left.xbuyButton-widget-tether-element-attached-middle .xbuyButton-widget-tether-content:before{right:100%;top:50%;margin-top:-8px;border-right-color:#fff}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-top.xbuyButton-widget-tether-element-attached-left.xbuyButton-widget-tether-target-attached-bottom .xbuyButton-widget-tether-content{margin-top:8px}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-top.xbuyButton-widget-tether-element-attached-left.xbuyButton-widget-tether-target-attached-bottom .xbuyButton-widget-tether-content:before{bottom:100%;left:8px;border-bottom-color:#fff}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-top.xbuyButton-widget-tether-element-attached-right.xbuyButton-widget-tether-target-attached-bottom .xbuyButton-widget-tether-content{margin-top:8px}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-top.xbuyButton-widget-tether-element-attached-right.xbuyButton-widget-tether-target-attached-bottom .xbuyButton-widget-tether-content:before{bottom:100%;right:8px;border-bottom-color:#fff}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-bottom.xbuyButton-widget-tether-element-attached-left.xbuyButton-widget-tether-target-attached-top .xbuyButton-widget-tether-content{margin-bottom:8px}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-bottom.xbuyButton-widget-tether-element-attached-left.xbuyButton-widget-tether-target-attached-top .xbuyButton-widget-tether-content:before{top:100%;left:8px;border-top-color:#fff}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-bottom.xbuyButton-widget-tether-element-attached-right.xbuyButton-widget-tether-target-attached-top .xbuyButton-widget-tether-content{margin-bottom:8px}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-bottom.xbuyButton-widget-tether-element-attached-right.xbuyButton-widget-tether-target-attached-top .xbuyButton-widget-tether-content:before{top:100%;right:8px;border-top-color:#fff}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-top.xbuyButton-widget-tether-element-attached-right.xbuyButton-widget-tether-target-attached-left .xbuyButton-widget-tether-content{margin-right:8px}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-top.xbuyButton-widget-tether-element-attached-right.xbuyButton-widget-tether-target-attached-left .xbuyButton-widget-tether-content:before{top:8px;left:100%;border-left-color:#fff}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-top.xbuyButton-widget-tether-element-attached-left.xbuyButton-widget-tether-target-attached-right .xbuyButton-widget-tether-content{margin-left:8px}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-top.xbuyButton-widget-tether-element-attached-left.xbuyButton-widget-tether-target-attached-right .xbuyButton-widget-tether-content:before{top:8px;right:100%;border-right-color:#fff}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-bottom.xbuyButton-widget-tether-element-attached-right.xbuyButton-widget-tether-target-attached-left .xbuyButton-widget-tether-content{margin-right:8px}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-bottom.xbuyButton-widget-tether-element-attached-right.xbuyButton-widget-tether-target-attached-left .xbuyButton-widget-tether-content:before{bottom:8px;left:100%;border-left-color:#fff}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-bottom.xbuyButton-widget-tether-element-attached-left.xbuyButton-widget-tether-target-attached-right .xbuyButton-widget-tether-content{margin-left:8px}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-bottom.xbuyButton-widget-tether-element-attached-left.xbuyButton-widget-tether-target-attached-right .xbuyButton-widget-tether-content:before{bottom:8px;right:100%;border-right-color:#fff}.x-buy-button-widget-simple{font-family:Arial,"Helvetica Neue",Helvetica,sans-serif;overflow:hidden;position:relative;z-index:1}.x-buy-button-widget-simple div,.x-buy-button-widget-simple a,.x-buy-button-widget-simple button{box-sizing:border-box}.x-buy-button-widget-simple button{font-family:Arial,"Helvetica Neue",Helvetica,sans-serif}.x-buy-button-widget-simple a:active,.x-buy-button-widget-simple a:hover,.x-buy-button-widget-simple button{outline:0}.x-buy-button-widget-simple button::-moz-focus-inner,.x-buy-button-widget-simple input[type="button"]::-moz-focus-inner,.x-buy-button-widget-simple input[type="submit"]::-moz-focus-inner,.x-buy-button-widget-simple input[type="reset"]::-moz-focus-inner{padding:0;border:0 none}.x-buy-button-widget-simple pre{display:block;font-family:inherit;line-height:1.3em;margin:0;white-space:pre-wrap}.x-buy-button-widget-simple .spinner{position:absolute;top:50%;left:50%;display:block;z-index:2;pointer-events:none}.x-buy-button-widget-simple .spinner .spinner-round{margin-top:-23px;margin-left:-23px;-webkit-animation:x-buy-button-widget-simple-spin 3s infinite linear;animation:x-buy-button-widget-simple-spin 3s infinite linear}.x-buy-button-widget-simple .error-message{position:absolute;top:50%;left:0;right:0;margin-top:-36px;display:block;z-index:2;text-align:center}.x-buy-button-widget-simple-button-block{display:flex;flex-direction:column}.x-buy-button-widget-simple .formatted-currency{white-space:nowrap}.x-buy-button-widget-simple .formatted-currency-ruble{display:inline-block;font-size:.75em;height:1em;vertical-align:baseline;margin-left:.1em}.x-buy-button-widget-simple .formatted-currency-ruble svg{height:1em;width:1em;fill:currentColor}.x-buy-button-widget-simple .formatted-currency-ruble svg g{fill:currentColor} ');;
},{"sassify":27}],40:[function(require,module,exports){
module.exports = require('sassify')('@-webkit-keyframes x-buy-button-widget-spin{from{-webkit-transform:rotate(0deg)}to{-webkit-transform:rotate(360deg)}}@keyframes x-buy-button-widget-spin{from{transform:rotate(0deg)}to{transform:rotate(360deg)}}.xbuyButton-widget-tether-element,.xbuyButton-widget-tether-element:after,.xbuyButton-widget-tether-element:before,.xbuyButton-widget-tether-element *,.xbuyButton-widget-tether-element *:after,.xbuyButton-widget-tether-element *:before{box-sizing:border-box}.xbuyButton-widget-tether-element{font-family:Arial,"Helvetica Neue",Helvetica,sans-serif;position:absolute;display:none}.xbuyButton-widget-tether-element div,.xbuyButton-widget-tether-element a,.xbuyButton-widget-tether-element button{box-sizing:border-box}.xbuyButton-widget-tether-element button{font-family:Arial,"Helvetica Neue",Helvetica,sans-serif}.xbuyButton-widget-tether-element a:active,.xbuyButton-widget-tether-element a:hover,.xbuyButton-widget-tether-element button{outline:0}.xbuyButton-widget-tether-element button::-moz-focus-inner,.xbuyButton-widget-tether-element input[type="button"]::-moz-focus-inner,.xbuyButton-widget-tether-element input[type="submit"]::-moz-focus-inner,.xbuyButton-widget-tether-element input[type="reset"]::-moz-focus-inner{padding:0;border:0 none}.xbuyButton-widget-tether-element pre{display:block;font-family:inherit;line-height:1.3em;margin:0;white-space:pre-wrap}.xbuyButton-widget-tether-element.xbuyButton-widget-tether__visible{display:block}.xbuyButton-widget-tether-element{max-width:100%;max-height:100%}.xbuyButton-widget-tether-element .xbuyButton-widget-tether-content{border-radius:5px;position:relative;font-family:inherit;background:#fff;color:#4a4a4a;padding:1em;font-size:14px;line-height:1.3em;box-shadow:0 3px 12px rgba(0,0,0,0.35);max-width:400px;pointer-events:none}.xbuyButton-widget-tether-element .xbuyButton-widget-tether-content:before{content:"";display:block;position:absolute;width:0;height:0;border-color:transparent;border-width:8px;border-style:solid}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-bottom.xbuyButton-widget-tether-element-attached-center .xbuyButton-widget-tether-content{margin-bottom:8px}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-bottom.xbuyButton-widget-tether-element-attached-center .xbuyButton-widget-tether-content:before{top:100%;left:50%;margin-left:-8px;border-top-color:#fff}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-top.xbuyButton-widget-tether-element-attached-center .xbuyButton-widget-tether-content{margin-top:8px}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-top.xbuyButton-widget-tether-element-attached-center .xbuyButton-widget-tether-content:before{bottom:100%;left:50%;margin-left:-8px;border-bottom-color:#fff}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-right.xbuyButton-widget-tether-element-attached-middle .xbuyButton-widget-tether-content{margin-right:8px}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-right.xbuyButton-widget-tether-element-attached-middle .xbuyButton-widget-tether-content:before{left:100%;top:50%;margin-top:-8px;border-left-color:#fff}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-left.xbuyButton-widget-tether-element-attached-middle .xbuyButton-widget-tether-content{margin-left:8px}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-left.xbuyButton-widget-tether-element-attached-middle .xbuyButton-widget-tether-content:before{right:100%;top:50%;margin-top:-8px;border-right-color:#fff}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-top.xbuyButton-widget-tether-element-attached-left.xbuyButton-widget-tether-target-attached-bottom .xbuyButton-widget-tether-content{margin-top:8px}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-top.xbuyButton-widget-tether-element-attached-left.xbuyButton-widget-tether-target-attached-bottom .xbuyButton-widget-tether-content:before{bottom:100%;left:8px;border-bottom-color:#fff}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-top.xbuyButton-widget-tether-element-attached-right.xbuyButton-widget-tether-target-attached-bottom .xbuyButton-widget-tether-content{margin-top:8px}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-top.xbuyButton-widget-tether-element-attached-right.xbuyButton-widget-tether-target-attached-bottom .xbuyButton-widget-tether-content:before{bottom:100%;right:8px;border-bottom-color:#fff}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-bottom.xbuyButton-widget-tether-element-attached-left.xbuyButton-widget-tether-target-attached-top .xbuyButton-widget-tether-content{margin-bottom:8px}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-bottom.xbuyButton-widget-tether-element-attached-left.xbuyButton-widget-tether-target-attached-top .xbuyButton-widget-tether-content:before{top:100%;left:8px;border-top-color:#fff}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-bottom.xbuyButton-widget-tether-element-attached-right.xbuyButton-widget-tether-target-attached-top .xbuyButton-widget-tether-content{margin-bottom:8px}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-bottom.xbuyButton-widget-tether-element-attached-right.xbuyButton-widget-tether-target-attached-top .xbuyButton-widget-tether-content:before{top:100%;right:8px;border-top-color:#fff}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-top.xbuyButton-widget-tether-element-attached-right.xbuyButton-widget-tether-target-attached-left .xbuyButton-widget-tether-content{margin-right:8px}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-top.xbuyButton-widget-tether-element-attached-right.xbuyButton-widget-tether-target-attached-left .xbuyButton-widget-tether-content:before{top:8px;left:100%;border-left-color:#fff}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-top.xbuyButton-widget-tether-element-attached-left.xbuyButton-widget-tether-target-attached-right .xbuyButton-widget-tether-content{margin-left:8px}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-top.xbuyButton-widget-tether-element-attached-left.xbuyButton-widget-tether-target-attached-right .xbuyButton-widget-tether-content:before{top:8px;right:100%;border-right-color:#fff}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-bottom.xbuyButton-widget-tether-element-attached-right.xbuyButton-widget-tether-target-attached-left .xbuyButton-widget-tether-content{margin-right:8px}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-bottom.xbuyButton-widget-tether-element-attached-right.xbuyButton-widget-tether-target-attached-left .xbuyButton-widget-tether-content:before{bottom:8px;left:100%;border-left-color:#fff}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-bottom.xbuyButton-widget-tether-element-attached-left.xbuyButton-widget-tether-target-attached-right .xbuyButton-widget-tether-content{margin-left:8px}.xbuyButton-widget-tether-element.xbuyButton-widget-tether-element-attached-bottom.xbuyButton-widget-tether-element-attached-left.xbuyButton-widget-tether-target-attached-right .xbuyButton-widget-tether-content:before{bottom:8px;right:100%;border-right-color:#fff}.x-buy-button-widget{font-family:Arial,"Helvetica Neue",Helvetica,sans-serif;border-radius:6px;overflow:hidden;font-size:18px;line-height:1.3em;position:relative;z-index:1}.x-buy-button-widget div,.x-buy-button-widget a,.x-buy-button-widget button{box-sizing:border-box}.x-buy-button-widget button{font-family:Arial,"Helvetica Neue",Helvetica,sans-serif}.x-buy-button-widget a:active,.x-buy-button-widget a:hover,.x-buy-button-widget button{outline:0}.x-buy-button-widget button::-moz-focus-inner,.x-buy-button-widget input[type="button"]::-moz-focus-inner,.x-buy-button-widget input[type="submit"]::-moz-focus-inner,.x-buy-button-widget input[type="reset"]::-moz-focus-inner{padding:0;border:0 none}.x-buy-button-widget pre{display:block;font-family:inherit;line-height:1.3em;margin:0;white-space:pre-wrap}.x-buy-button-widget__light{background:#ffffff}.x-buy-button-widget__dark{background:#000}.x-buy-button-widget .spinner{position:absolute;top:50%;left:50%;display:block;z-index:2;pointer-events:none}.x-buy-button-widget .spinner .spinner-round{margin-top:-23px;margin-left:-23px;-webkit-animation:x-buy-button-widget-spin 3s infinite linear;animation:x-buy-button-widget-spin 3s infinite linear}.x-buy-button-widget .error-message{position:absolute;top:50%;left:0;right:0;margin-top:-36px;display:block;z-index:2;text-align:center}.x-buy-button-widget-button-block{position:absolute;left:0;right:0;bottom:0;display:flex;padding-right:4px;padding-left:4px;padding-bottom:4px;flex-direction:column}.x-buy-button-widget-button-block__light{background-color:#ffffff}.x-buy-button-widget-button-block__dark{background-color:#000}.x-buy-button-widget-gradient-block{position:absolute;left:0;right:0;height:130px;top:-30px}.x-buy-button-widget-gradient-block__light{background-image:linear-gradient(180deg, rgba(255,255,255,0) 0%, #fff 22%)}.x-buy-button-widget-gradient-block__dark{background-image:linear-gradient(180deg, rgba(0,0,0,0) 0%, #000 25%)}.x-buy-button-widget .formatted-currency{white-space:nowrap}.x-buy-button-widget .formatted-currency-ruble{display:inline-block;font-size:.75em;height:1em;vertical-align:baseline;margin-left:.1em}.x-buy-button-widget .formatted-currency-ruble svg{height:1em;width:1em;fill:currentColor}.x-buy-button-widget .formatted-currency-ruble svg g{fill:currentColor}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-game-logo{background-position:center center;background-repeat:no-repeat;background-size:cover;height:155px;width:100%;transition:opacity 200ms, transform 200ms;opacity:1;transform:translateX(0px) translateY(0px) translateZ(0px)}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-game-logo__moved{opacity:0;transform:translateX(0px) translateY(-10px) translateZ(0px)}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-game-name{position:relative;z-index:1;display:block;margin-right:auto;margin-left:auto;margin-bottom:4px;font-size:14px;max-width:450px;text-align:center;font-weight:700;line-height:20px;vertical-align:middle;transition:opacity 200ms;opacity:1}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-game-name__light{color:#4a4a4a}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-game-name__dark{color:#ffffff}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-game-name__moved{opacity:0}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-plus-icon{font-size:110%;position:relative;top:0.05em}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-tip{position:relative;z-index:1;display:flex;overflow:hidden;height:26px;justify-content:center;align-self:center;font-size:12px;cursor:pointer;transition:transform 200ms;transform:translateX(0px) translateY(0px) translateZ(0px)}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-tip__light{color:#6f6f6f}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-tip__dark{color:#acacac}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-tip:hover{opacity:0.65}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-tip__moved{transform:translateX(0px) translateY(-140px) translateZ(0px)}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-tip__disable{cursor:default}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-tip__disable:hover{opacity:1}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-tip-txt{display:flex;justify-content:center;align-items:center;line-height:20px}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-tip-button,.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-tip-img{display:inline-block}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-tip-plus-icon{margin-bottom:2px;vertical-align:middle}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-tip-img{height:16px;vertical-align:middle;text-align:center;margin-right:3px}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-tip-img__light{color:#6f6f6f}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-tip-img__light .x-buy-button-widget-tip-icon{fill:#6f6f6f}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-tip-img__dark{color:#acacac}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-tip-img__dark .x-buy-button-widget-tip-icon{fill:#acacac}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-tip-img .x-buy-button-widget-thank-icon{fill:#e96b6b}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-tips-list-block{display:flex;opacity:1;transition:opacity 200ms}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-tips-list-block__hide{display:none;opacity:0}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-thank{color:#6f6f6f;font-size:14px;display:inline-block;text-align:center;cursor:pointer;overflow:hidden;width:100%}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-thank-text,.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-thank-img{display:inline-block}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-payment-button{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-moz-appearance:none;-webkit-appearance:none;z-index:1;display:block;position:relative;text-align:center;cursor:pointer;font-size:15px;border:0;padding:0;color:#ffffff;line-height:normal;background-color:#0047ff;border-radius:3px;transition:background-color 0.2s ease 0s, transform 200ms;transform:translateX(0px) translateY(0px) translateZ(0px);height:44px;width:100%}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-payment-button__green{background-color:#00a562}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-payment-button__green:hover{background-color:#00cc79}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-payment-button__red{background-color:#d80c0c}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-payment-button__red:hover{background-color:#ff1616}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-payment-button__blue{background-color:#0047ff}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-payment-button__blue:hover{background-color:#007aff}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-payment-button__gold{background-color:#d69200}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-payment-button__gold:hover{background-color:#eba000}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-payment-button[disabled]{background-color:#a7a7a7;font-size:12px}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-payment-button__moved{transform:translateX(0px) translateY(-144px) translateZ(0px)}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-payment-button-amount{position:absolute;top:49%;left:50%;width:162px;transform:translate(-50%, -50%)}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-payment-button-amount>span{display:block}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-payment-button-amount .discount{margin-top:1px;font-size:11px;text-decoration:line-through;opacity:0.7}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-payment-button .x-buy-button-widget-tips-list{background-color:#fff;height:48px;width:100%;font-size:14px}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-payment-button:active{box-shadow:inset 0 3px 5px rgba(0,0,0,0.15)}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-tips-list{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;list-style-type:none;position:absolute;left:0;right:0;bottom:0;z-index:2;text-align:center;font-size:14px;transition:background-color 0.1s ease 0s, transform 200ms;transform:translateX(0px) translateY(0px) translateZ(0px)}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-tips-list-item{align-items:center;text-align:center;display:flex;justify-content:center;margin-left:auto;margin-right:auto;cursor:pointer}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-tips-list-item a{padding-right:6px;padding-left:6px;height:36px;display:flex;justify-content:center;min-width:60px;align-items:center;transition:background-color 200ms ease, -webkit-transform 200ms ease;transition:background-color 200ms ease, transform 200ms ease;transition:background-color 200ms ease, transform 200ms ease, -webkit-transform 200ms ease}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-tips-list-item-icon{margin-top:2px;height:30px;vertical-align:middle}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-tips-list-item__close{height:30px}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-tips-list-item-amount:hover{transform:scale(1.1)}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-tips-list-item-amount__light:hover{background-color:#c6c6c6}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-tips-list-item-amount__dark:hover{background-color:#545454}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-tips-list-item__light a{color:#000000}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-tips-list-item__dark a{color:#ffffff}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-tips-list-item-link-close__light:hover .x-buy-button-widget-tips-list-item-icon{fill:#bebebe}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-tips-list-item-link-close__dark:hover .x-buy-button-widget-tips-list-item-icon{fill:#525252}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-tips-list-item-icon__light{fill:#8a8a8a}.x-buy-button-widget.x-buy-button-widget__tiny .x-buy-button-widget-tips-list-item-icon__dark{fill:#acacac}.x-buy-button-widget.x-buy-button-widget__tiny{width:220px;height:220px} ');;
},{"sassify":27}],41:[function(require,module,exports){
"use strict";

var Polyglot = require('polyglot');

var polyglot;

module.exports = function () {
  return {
    init: function init(translations) {
      polyglot = new Polyglot({
        phrases: translations
      });
    },
    translate: function translate() {
      if (!polyglot) {
        return null;
      }

      return polyglot.t.apply(polyglot, arguments);
    }
  };
}();

},{"polyglot":"polyglot"}],42:[function(require,module,exports){
"use strict";

module.exports = '3.1.6';

},{}],43:[function(require,module,exports){
"use strict";

var React = require('react');

var CreateReactClass = require('create-react-class');

var errorSVG = require('./images/error.svg');

var DEFAULT_DISPLAY_ERROR_CODE = '0401-1000';
var ERROR_CODE_REGEX = /[\d]{4}-[\d]{4}/gi;
var ErrorMessageView = CreateReactClass({
  render: function render() {
    var displayErrorCode = DEFAULT_DISPLAY_ERROR_CODE;
    var error = this.props.error;

    if (error.errorMessage) {
      displayErrorCode = error.errorMessage.match(ERROR_CODE_REGEX);
    }

    return /*#__PURE__*/React.createElement("span", {
      className: "error-message"
    }, /*#__PURE__*/React.createElement("div", {
      dangerouslySetInnerHTML: {
        __html: errorSVG
      }
    }), /*#__PURE__*/React.createElement("div", null, "Error"), /*#__PURE__*/React.createElement("div", null, displayErrorCode ? "(".concat(displayErrorCode, ")") : ''));
  }
});
module.exports = ErrorMessageView;

},{"./images/error.svg":45,"create-react-class":19,"react":"react"}],44:[function(require,module,exports){
"use strict";

var React = require('react');

var CreateReactClass = require('create-react-class');

var currencyFormat = require('currency-format.json');

var currencyNumberFormat = require('currency-number-format.json'); // CURRENCY CODE


function defaultCurrency(currency) {
  return {
    'name': currency,
    'fractionSize': 2,
    'symbol': {
      'grapheme': currency,
      'template': null,
      'rtl': false
    },
    'uniqSymbol': null
  };
}

function getCurrencyOptions(currency) {
  return currency ? currencyFormat[currency.toUpperCase()] || defaultCurrency(currency) : defaultCurrency(currency);
} // LOCALE


var defaultLocale = 'en_US';
var localesMap = {
  'ar': 'ar_AE',
  'bg': 'bg_BG',
  'cn': 'zh_CN',
  'cs': 'cs_CZ',
  'de': 'de_DE',
  'en': 'en_US',
  'es': 'es_ES',
  'fr': 'fr_FR',
  'he': 'he_IL',
  'it': 'it_IT',
  'ja': 'ja_JP',
  'ko': 'ko_KR',
  'pl': 'pl_PL',
  'pt': 'pt_BR',
  'ro': 'ro_RO',
  'ru': 'ru_RU',
  'th': 'th_TH',
  'tr': 'tr_TR',
  'tw': 'zh_TW',
  'vi': 'vi_VN'
};

function formatLocale(locale) {
  return [locale.substr(0, 2).toLowerCase(), locale.substr(3, 2).toUpperCase()].join('_');
}

function getLanguageOptions(locale) {
  return locale ? currencyNumberFormat[formatLocale(locale)] || currencyNumberFormat[defaultLocale] : currencyNumberFormat[defaultLocale];
}

function map2to5Locale(locale) {
  return locale && locale.length === 5 ? locale : localesMap[locale] || defaultLocale;
} // CURRENCY


function getFormattedCurrency(amount, currency, locale) {
  var parsedAmount = parseFloat(amount);

  if (!currency || isNaN(parsedAmount)) {
    return {
      formattedCurrency: amount + ' ' + currency,
      dir: 'ltr'
    };
  }

  var currencyOptions = getCurrencyOptions(currency);
  var languageOptions = getLanguageOptions(locale);
  var signAmount = parsedAmount < 0 ? '-' : '';
  var fractionSize = currencyOptions.fractionSize;
  var symbol = currencyOptions.symbol;
  var thousandSeparator = languageOptions.thousands;
  var decimalSeparator = languageOptions.decimal; // Spike for escaping case when grapheme is arabic symbol, and russian style separators was chosen

  if ((!symbol || symbol.rtl) && languageOptions.thousands === ' ') {
    thousandSeparator = ',';
    decimalSeparator = '.';
  }

  var splittedAmount = Math.abs(parsedAmount).toFixed(fractionSize).split('.');
  splittedAmount[0] = splittedAmount[0].replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1' + thousandSeparator);
  var formattedAmount = splittedAmount.join(decimalSeparator);
  var formattedCurrency = signAmount + formattedAmount + ' ' + currency;
  var rtl = false;

  if (symbol && symbol.template) {
    formattedCurrency = signAmount + symbol.template.replace('1', formattedAmount).replace('$', symbol.grapheme);
    rtl = symbol.rtl;
  }

  return {
    formattedCurrency: formattedCurrency,
    dir: rtl ? 'rtl' : 'ltr'
  };
}

var FormattedCurrencyView = CreateReactClass({
  render: function render() {
    if (!this.props.amount) {
      return null;
    }

    var formattedCurrency = getFormattedCurrency(this.props.amount, this.props.currency, map2to5Locale(this.props.locale));

    if (!formattedCurrency) {
      return;
    }

    var cls = this.props.cls || '';
    return /*#__PURE__*/React.createElement("span", {
      className: 'formatted-currency ' + cls,
      dir: formattedCurrency.dir
    }, formattedCurrency.formattedCurrency);
  }
});
module.exports = FormattedCurrencyView;

},{"create-react-class":19,"currency-format.json":"currency-format.json","currency-number-format.json":"currency-number-format.json","react":"react"}],45:[function(require,module,exports){
module.exports = "<svg width=\"48\" height=\"48\" viewBox=\"0 0 48 48\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M24 48c-13.234 0-24-10.766-24-24 0-13.233 10.766-24 24-24 13.233 0 24 10.766 24 24s-10.766 24-24 24zm-3.716-24.052l-7.338-7.353c-1.019-1.021-1.019-2.676 0-3.697s2.67-1.021 3.689 0l7.338 7.353 7.338-7.353c1.019-1.021 2.67-1.021 3.689 0 1.019 1.021 1.019 2.676 0 3.697l-7.338 7.353 7.389 7.404c1.019 1.021 1.019 2.676 0 3.697s-2.67 1.021-3.689 0l-7.389-7.404-7.389 7.404c-1.019 1.021-2.67 1.021-3.689 0-1.019-1.021-1.019-2.676 0-3.697l7.389-7.404zm-16.284-.011c0 11.028 8.972 20 20 20s20-8.972 20-20-8.971-20-20-20c-11.028 0-20 8.972-20 20z\" fill=\"#ccc\"/></svg>";

},{}],46:[function(require,module,exports){
"use strict";

var React = require('react');

var CreateReactClass = require('create-react-class');

var ErrorMessageView = require('../error-message.jsx');

var PaymentButton = require('../payment-button.jsx');

var Helpers = require('../../helpers');

var SimpleView = CreateReactClass({
  className: 'x-buy-button-widget-simple',
  SHOW_TIPS_THANK_DURATION: 1000,
  getInitialState: function getInitialState() {
    return {
      selectedTipIndex: -1,
      isTipsListOpened: false,
      isThankShow: false
    };
  },
  getDefaultProps: function getDefaultProps() {
    return {
      data: {},
      paymentButtonColor: null,
      themeColor: null
    };
  },
  onPaymentOpen: function onPaymentOpen(options) {
    this.props.onPaymentOpen.call(this, options);
  },
  onTipButtonClick: function onTipButtonClick(e) {
    if (e && e.stopPropagation && e.preventDefault) {
      e.stopPropagation();
      e.preventDefault();
    }

    if (!this.state.isThankShow) {
      this.setState({
        isTipsListOpened: true
      });
    }
  },
  onTipSelect: function onTipSelect(index) {
    if (typeof index !== 'number') {
      index = -1;
    }

    if (index !== -1) {
      this.setState({
        isTipsListOpened: false,
        selectedTipIndex: -1,
        isThankShow: true
      });
      setTimeout(function () {
        this.setState({
          isTipsListOpened: false,
          selectedTipIndex: index,
          isThankShow: false
        });
      }.bind(this), this.SHOW_TIPS_THANK_DURATION);
    } else {
      this.setState({
        isTipsListOpened: false,
        selectedTipIndex: index,
        isThankShow: false
      });
    }
  },
  render: function render() {
    var data = this.props.data;
    var isLoaded = !Helpers.isEmpty(data);
    var error = data.error;
    var paymentButtonColor = this.props.paymentButtonColor;
    var themeColor = this.props.themeColor;
    var logoModifiers = [themeColor];
    var amount = data.amount;
    var showPaymentButton = amount !== undefined;

    if (this.state.isTipsListOpened) {
      logoModifiers.push('moved');
    }

    var paymentButton = showPaymentButton && /*#__PURE__*/React.createElement(PaymentButton, {
      amount: amount,
      baseClassName: this.className,
      tips: data.tips,
      selectedTipIndex: this.state.selectedTipIndex,
      isTipsListOpened: this.state.isTipsListOpened,
      isThankShow: this.state.isThankShow,
      paymentButtonColor: paymentButtonColor,
      onPaymentOpen: this.onPaymentOpen,
      isReleased: data.is_released,
      disabled: false,
      tagName: 'div',
      locale: data.locale,
      needShowPaystation: this.props.needShowPaystation
    });
    var spinner = !isLoaded && /*#__PURE__*/React.createElement("div", {
      className: "spinner-simple"
    });
    var errorMessage = error && /*#__PURE__*/React.createElement(ErrorMessageView, {
      error: error
    });
    var blockButton = isLoaded && /*#__PURE__*/React.createElement("div", {
      className: this.className + '-button-block' + ' ' + this.className + '-button-block' + '__' + themeColor
    }, paymentButton);
    return /*#__PURE__*/React.createElement("div", {
      className: this.className + ' ' + this.className + '__simple' + ' ' + this.className + '__' + themeColor
    }, blockButton, spinner, errorMessage);
  }
});
module.exports = SimpleView;

},{"../../helpers":36,"../error-message.jsx":43,"../payment-button.jsx":49,"create-react-class":19,"react":"react"}],47:[function(require,module,exports){
"use strict";

var React = require('react');

var CreateReactClass = require('create-react-class');

var SpinnerView = require('../spinner.jsx');

var ErrorMessageView = require('../error-message.jsx');

var PaymentButton = require('../payment-button.jsx');

var FormattedCurrency = require('../formatted-currency.jsx');

var TranslateMessage = require('../translate-message.jsx');

var TipsList = require('../tips-list.jsx');

var Logo = require('../logo.jsx');

var Helpers = require('../../helpers');

var TinyView = CreateReactClass({
  className: 'x-buy-button-widget',
  SHOW_TIPS_THANK_DURATION: 1000,
  getInitialState: function getInitialState() {
    return {
      selectedTipIndex: -1,
      isTipsListOpened: false,
      isThankShow: false
    };
  },
  getDefaultProps: function getDefaultProps() {
    return {
      data: {},
      paymentButtonColor: null,
      themeColor: null
    };
  },
  onPaymentOpen: function onPaymentOpen(options) {
    this.props.onPaymentOpen.call(this, options);
  },
  onTipButtonClick: function onTipButtonClick(e) {
    if (e && e.stopPropagation && e.preventDefault) {
      e.stopPropagation();
      e.preventDefault();
    }

    if (!this.state.isThankShow) {
      this.setState({
        isTipsListOpened: true
      });
    }
  },
  onTipSelect: function onTipSelect(index) {
    if (typeof index !== 'number') {
      index = -1;
    }

    if (index !== -1) {
      this.setState({
        isTipsListOpened: false,
        selectedTipIndex: -1,
        isThankShow: true
      });
      setTimeout(function () {
        this.setState({
          isTipsListOpened: false,
          selectedTipIndex: index,
          isThankShow: false
        });
      }.bind(this), this.SHOW_TIPS_THANK_DURATION);
    } else {
      this.setState({
        isTipsListOpened: false,
        selectedTipIndex: index,
        isThankShow: false
      });
    }
  },
  render: function render() {
    var data = this.props.data;
    var isLoaded = !Helpers.isEmpty(data);
    var logoUrl = data.logoUrl;
    var error = data.error;
    var name = data.name;
    var paymentButtonColor = this.props.paymentButtonColor;
    var themeColor = this.props.themeColor;
    var logoModifiers = [themeColor];
    var amount = data.amount;
    var showPaymentButton = amount !== undefined;

    if (this.state.isTipsListOpened) {
      logoModifiers.push('moved');
    }

    var paymentButton = showPaymentButton && /*#__PURE__*/React.createElement(PaymentButton, {
      amount: amount,
      baseClassName: this.className,
      tips: data.tips,
      selectedTipIndex: this.state.selectedTipIndex,
      isTipsListOpened: this.state.isTipsListOpened,
      isThankShow: this.state.isThankShow,
      paymentButtonColor: paymentButtonColor,
      onPaymentOpen: this.onPaymentOpen,
      isReleased: data.is_released,
      disabled: false,
      locale: data.locale,
      needShowPaystation: this.props.needShowPaystation
    });
    var tips = data.tips && /*#__PURE__*/React.createElement(TipsList, {
      baseClassName: this.className,
      tips: data.tips,
      onSelect: this.onTipSelect,
      isTipsListOpened: this.state.isTipsListOpened,
      themeColor: themeColor
    });
    var tipButtonContent = false;
    var selectedTips = null;
    var svgContent = false;

    if (this.state.selectedTipIndex >= 0 && this.state.selectedTipIndex < data.tips.length && !this.state.isTipsListOpened) {
      selectedTips = data.tips[this.state.selectedTipIndex];
      svgContent = false;
      tipButtonContent = /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("span", {
        className: this.className + '-plus-icon'
      }, "+"), "\u2009", /*#__PURE__*/React.createElement(FormattedCurrency, {
        amount: selectedTips.amount,
        currency: selectedTips.currency,
        truncate: true
      }));
      this.state.isThankShow = false;
    } else {
      if (this.state.isThankShow) {
        tipButtonContent = /*#__PURE__*/React.createElement(TranslateMessage, {
          message: "thanks_tips"
        });
        svgContent = /*#__PURE__*/React.createElement("svg", {
          className: this.className + '-thank-icon',
          xmlns: "http://www.w3.org/2000/svg",
          width: "12",
          height: "12",
          viewBox: "0 0 24 24"
        }, /*#__PURE__*/React.createElement("path", {
          d: "M12,21.35L10.55,20.03C5.4,15.36 2,12.27 2,8.5C2,5.41 4.42,3 7.5,3C9.24,3 10.91,3.81 12,5.08C13.09,3.81 14.76,3 16.5,3C19.58,3 22,5.41 22,8.5C22,12.27 18.6,15.36 13.45,20.03L12,21.35Z"
        }));
      } else {
        tipButtonContent = /*#__PURE__*/React.createElement(TranslateMessage, {
          message: "tip_the_developer"
        });
        svgContent = /*#__PURE__*/React.createElement("svg", {
          className: this.className + '-tip-icon',
          xmlns: "http://www.w3.org/2000/svg",
          width: "12",
          height: "12",
          viewBox: "0 0 24 24"
        }, /*#__PURE__*/React.createElement("path", {
          d: "M12.1,18.55L12,18.65L11.89,18.55C7.14,14.24 4,11.39 4,8.5C4,6.5 5.5,5 7.5,5C9.04,5 10.54,6 11.07,7.36H12.93C13.46,6 14.96,5 16.5,5C18.5,5 20,6.5 20,8.5C20,11.39 16.86,14.24 12.1,18.55M16.5,3C14.76,3 13.09,3.81 12,5.08C10.91,3.81 9.24,3 7.5,3C4.42,3 2,5.41 2,8.5C2,12.27 5.4,15.36 10.55,20.03L12,21.35L13.45,20.03C18.6,15.36 22,12.27 22,8.5C22,5.41 19.58,3 16.5,3Z"
        }));
      }
    }

    var tipButton = data.tips && /*#__PURE__*/React.createElement("div", {
      className: this.className + '-tip ' + ' ' + this.className + '-tip' + '__' + themeColor + ' ' + (this.state.isTipsListOpened ? this.className + '-tip__moved ' : '') + (this.state.isThankShow || this.state.isTipsListOpened ? this.className + '-tip__disable' : '')
    }, /*#__PURE__*/React.createElement("div", {
      className: this.className + '-tip-txt'
    }, /*#__PURE__*/React.createElement("div", {
      className: this.className + '-tip-img ' + this.className + '-tip-img' + '__' + themeColor
    }, svgContent), /*#__PURE__*/React.createElement("div", {
      className: this.className + '-tip-button',
      onClick: this.onTipButtonClick
    }, tipButtonContent)));
    var gameInfo = /*#__PURE__*/React.createElement("div", {
      className: this.className + '-game-name ' + this.className + '-game-name' + '__' + themeColor + ' ' + (this.state.isTipsListOpened ? this.className + '-game-name__moved' : '')
    }, name);
    var spinner = !isLoaded && /*#__PURE__*/React.createElement(SpinnerView, null);
    var errorMessage = error && /*#__PURE__*/React.createElement(ErrorMessageView, {
      error: error
    });
    var gradientBlock = /*#__PURE__*/React.createElement("div", {
      className: this.className + '-gradient-block ' + this.className + '-gradient-block' + '__' + themeColor
    });
    var blockButton = isLoaded && /*#__PURE__*/React.createElement("div", {
      className: this.className + '-button-block' + ' ' + this.className + '-button-block' + '__' + themeColor
    }, gameInfo, paymentButton, gradientBlock, tipButton, tips);
    return /*#__PURE__*/React.createElement("div", {
      className: this.className + ' ' + this.className + '__tiny' + ' ' + this.className + '__' + themeColor
    }, logoUrl && /*#__PURE__*/React.createElement(Logo, {
      url: logoUrl,
      container: this.className,
      modifiers: logoModifiers
    }), blockButton, spinner, errorMessage);
  }
});
module.exports = TinyView;

},{"../../helpers":36,"../error-message.jsx":43,"../formatted-currency.jsx":44,"../logo.jsx":48,"../payment-button.jsx":49,"../spinner.jsx":50,"../tips-list.jsx":51,"../translate-message.jsx":52,"create-react-class":19,"react":"react"}],48:[function(require,module,exports){
"use strict";

var React = require('react');

function Logo(props) {
  var container = props.container;
  var modifiers = props.modifiers;
  var url = props.url;
  var baseClassName = container + '-game-logo';
  var classNameWithModifiers = [baseClassName].concat(modifiers.map(function (m) {
    return baseClassName + '__' + m;
  })).join(' ');
  return /*#__PURE__*/React.createElement("div", {
    className: classNameWithModifiers,
    style: {
      backgroundImage: 'url(' + url + ')'
    }
  });
}

module.exports = Logo;

},{"react":"react"}],49:[function(require,module,exports){
"use strict";

var React = require('react');

var CreateReactClass = require('create-react-class');

var TranslateMessage = require('./translate-message.jsx');

var FormattedCurrency = require('./formatted-currency.jsx');

var PaymentButton = CreateReactClass({
  onBtnClick: function onBtnClick(e) {
    var options = {
      instance_id: null,
      tips: null
    };

    if (this.props.selectedTipIndex >= 0) {
      options.tips = this.props.tips[this.props.selectedTipIndex];
    }

    if (!this.props.isThankShow) {
      this.props.onPaymentOpen.call(this, options, e);
    }
  },
  componentDidMount: function componentDidMount() {
    if (this.props.needShowPaystation) {
      var options = {
        instance_id: null,
        tips: null
      };

      if (this.props.selectedTipIndex >= 0) {
        options.tips = this.props.tips[this.props.selectedTipIndex];
      }

      if (!this.props.isThankShow) {
        this.props.onPaymentOpen.call(this, options, null);
      }
    }
  },
  render: function render() {
    var amount = this.props.amount;
    var tagName = this.props.tagName && this.props.tagName !== undefined ? this.props.tagName : 'button';
    var hasDiscount = amount.value_without_discount && amount.value < amount.value_without_discount;
    var buttonClassName = this.props.baseClassName + '-payment-button';
    var modifiers = [this.props.isTipsListOpened && 'moved', this.props.paymentButtonColor];
    var isReleased = this.props.isReleased;
    var disabled = this.props.disabled;
    var message;

    if (isReleased) {
      message = amount.hasDifferent ? 'payment_button_from_label' : 'payment_button_label';
    } else {
      message = 'payment_button_pre_purchase_label';
    }

    if (disabled) {
      modifiers = [];
      message = 'payment_button_not_available_label';
    }

    var buttonClassNameWithModifiers = buttonClassName + ' ' + modifiers.map(function (m) {
      return m ? buttonClassName + '__' + m : '';
    }).join(' ');
    return React.createElement(tagName, {
      className: buttonClassNameWithModifiers,
      disabled: disabled,
      onClick: this.onBtnClick
    }, /*#__PURE__*/React.createElement("span", {
      className: buttonClassName + '-amount'
    }, /*#__PURE__*/React.createElement(TranslateMessage, {
      message: message,
      values: !disabled && {
        amount: /*#__PURE__*/React.createElement(FormattedCurrency, {
          amount: amount.value,
          currency: amount.currency,
          locale: this.props.locale
        })
      },
      doubleSpan: true
    }), !disabled && hasDiscount && amount.value > 0 ? /*#__PURE__*/React.createElement(FormattedCurrency, {
      amount: amount.value_without_discount,
      currency: amount.currency,
      locale: this.props.locale,
      cls: "discount"
    }) : null));
  }
});
module.exports = PaymentButton;

},{"./formatted-currency.jsx":44,"./translate-message.jsx":52,"create-react-class":19,"react":"react"}],50:[function(require,module,exports){
"use strict";

var React = require('react');

var CreateReactClass = require('create-react-class');

var spinnerSVG = require('spinners/round.svg');

var SpinnerView = CreateReactClass({
  render: function render() {
    return /*#__PURE__*/React.createElement("span", {
      className: "spinner",
      dangerouslySetInnerHTML: {
        __html: spinnerSVG
      }
    });
  }
});
module.exports = SpinnerView;

},{"create-react-class":19,"react":"react","spinners/round.svg":14}],51:[function(require,module,exports){
"use strict";

var React = require('react');

var CreateReactClass = require('create-react-class');

var FormattedCurrency = require('./formatted-currency.jsx');

var TipsList = CreateReactClass({
  onTipItemClick: function onTipItemClick(index, e) {
    e.stopPropagation();
    e.preventDefault();
    this.props.onSelect.call(this, index);
  },
  render: function render() {
    var self = this;

    if (!this.props.tips) {
      return null;
    }

    return /*#__PURE__*/React.createElement("div", {
      className: this.props.baseClassName + '-tips-list-block ' + (!this.props.isTipsListOpened ? this.props.baseClassName + '-tips-list-block__hide' : '')
    }, /*#__PURE__*/React.createElement("div", {
      className: this.props.baseClassName + '-tips-list ' + this.props.baseClassName + '-tips-list' + '__' + this.props.themeColor
    }, this.props.tips.map(function (tip, index) {
      return /*#__PURE__*/React.createElement("div", {
        key: index,
        onClick: self.onTipItemClick.bind(self, index),
        className: self.props.baseClassName + '-tips-list-item ' + self.props.baseClassName + '-tips-list-item' + '__' + self.props.themeColor + ' '
      }, /*#__PURE__*/React.createElement("a", {
        className: self.props.baseClassName + '-tips-list-item-amount ' + self.props.baseClassName + '-tips-list-item-amount' + '__' + self.props.themeColor
      }, /*#__PURE__*/React.createElement(FormattedCurrency, {
        amount: tip.amount,
        currency: tip.currency,
        truncate: true
      })));
    }), /*#__PURE__*/React.createElement("div", {
      key: -1,
      onClick: this.onTipItemClick.bind(this, -1),
      className: this.props.baseClassName + '-tips-list-item ' + this.props.baseClassName + '-tips-list-item__close'
    }, /*#__PURE__*/React.createElement("a", {
      className: this.props.baseClassName + '-tips-list-item-link-close ' + this.props.baseClassName + '-tips-list-item-link-close' + '__' + this.props.themeColor
    }, /*#__PURE__*/React.createElement("svg", {
      className: this.props.baseClassName + '-tips-list-item-icon ' + this.props.baseClassName + '-tips-list-item-icon' + '__' + this.props.themeColor,
      xmlns: "http://www.w3.org/2000/svg",
      width: "14",
      height: "14",
      viewBox: "0 0 24 24"
    }, /*#__PURE__*/React.createElement("path", {
      d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
    }))))));
  }
});
module.exports = TipsList;

},{"./formatted-currency.jsx":44,"create-react-class":19,"react":"react"}],52:[function(require,module,exports){
"use strict";

var React = require('react');

var CreateReactClass = require('create-react-class');

var ReactDOMServer = require('react-dom-server');

var Translate = require('../translate.js');

var TranslateMessage = CreateReactClass({
  render: function render() {
    var values = this.props.values;
    var message = this.props.message;
    var doubleSpan = this.props.doubleSpan;
    var translateContent = values && Object.keys(values).filter(function (key) {
      return React.isValidElement(values[key]);
    }).reduce(function (acc, curr) {
      acc[curr] = ReactDOMServer.renderToStaticMarkup(values[curr]);
      return acc;
    }, {}) || [];

    if (doubleSpan) {
      return /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("span", {
        className: 'translate-message',
        dangerouslySetInnerHTML: {
          __html: Translate.translate(message, {
            amount: ''
          })
        }
      }), /*#__PURE__*/React.createElement("span", {
        className: 'translate-message-amount',
        dangerouslySetInnerHTML: {
          __html: translateContent.amount
        }
      }));
    } else {
      return /*#__PURE__*/React.createElement("span", {
        className: 'translate-message',
        dangerouslySetInnerHTML: {
          __html: Translate.translate(message, translateContent)
        }
      });
    }
  }
});
module.exports = TranslateMessage;

},{"../translate.js":41,"create-react-class":19,"react":"react","react-dom-server":"react-dom-server"}],"currency-format.json":[function(require,module,exports){
module.exports={
  "AED": {
    "name": "UAE Dirham",
    "fractionSize": 2,
    "symbol": {
      "grapheme": ".د.إ",
      "template": "1 $",
      "rtl": true
    },
    "uniqSymbol": null
  },
  "AFN": {
    "name": "Afghani",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "؋",
      "template": "1 $",
      "rtl": true
    },
    "uniqSymbol": {
      "grapheme": "؋",
      "template": "1 $",
      "rtl": true
    }
  },
  "ALL": {
    "name": "Lek",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "L",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "Lek",
      "template": "$1",
      "rtl": false
    }
  },
  "AMD": {
    "name": "Armenian Dram",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "դր.",
      "template": "1 $",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "դր.",
      "template": "1 $",
      "rtl": false
    }
  },
  "ANG": {
    "name": "Netherlands Antillean Guilder",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "ƒ",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "NAƒ",
      "template": "$1",
      "rtl": false
    }
  },
  "AOA": {
    "name": "Kwanza",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "ARS": {
    "name": "Argentine Peso",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "$",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": null
  },
  "AUD": {
    "name": "Australian Dollar",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "$",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "A$",
      "template": "$1",
      "rtl": false
    }
  },
  "AWG": {
    "name": "Aruban Florin",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "ƒ",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "Afl",
      "template": "$1",
      "rtl": false
    }
  },
  "AZN": {
    "name": "Azerbaijanian Manat",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "₼",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "₼",
      "template": "$1",
      "rtl": false
    }
  },
  "BAM": {
    "name": "Convertible Mark",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "KM",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "KM",
      "template": "$1",
      "rtl": false
    }
  },
  "BBD": {
    "name": "Barbados Dollar",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "$",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": null
  },
  "BDT": {
    "name": "Taka",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "BGN": {
    "name": "Bulgarian Lev",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "лв",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "лв",
      "template": "$1",
      "rtl": false
    }
  },
  "BHD": {
    "name": "Bahraini Dinar",
    "fractionSize": 3,
    "symbol": {
      "grapheme": ".د.ب",
      "template": "1 $",
      "rtl": true
    },
    "uniqSymbol": {
      "grapheme": ".د.ب",
      "template": "1 $",
      "rtl": true
    }
  },
  "BIF": {
    "name": "Burundi Franc",
    "fractionSize": 0,
    "symbol": null,
    "uniqSymbol": null
  },
  "BMD": {
    "name": "Bermudian Dollar",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "$",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "BD$",
      "template": "$1",
      "rtl": false
    }
  },
  "BND": {
    "name": "Brunei Dollar",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "$",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": null
  },
  "BOB": {
    "name": "Boliviano",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "Bs.",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "Bs.",
      "template": "$1",
      "rtl": false
    }
  },
  "BOV": {
    "name": "Mvdol",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "BRL": {
    "name": "Brazilian Real",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "R$",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "R$",
      "template": "$1",
      "rtl": false
    }
  },
  "BSD": {
    "name": "Bahamian Dollar",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "$",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": null
  },
  "BTN": {
    "name": "Ngultrum",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "BWP": {
    "name": "Pula",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "P",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "P",
      "template": "$1",
      "rtl": false
    }
  },
  "BYN": {
    "name": "Belarussian Ruble",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "p.",
      "template": "1 $",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "р.",
      "template": "1 $",
      "rtl": false
    }
  },
  "BYR": {
    "name": "Belarussian Ruble",
    "fractionSize": 0,
    "symbol": {
      "grapheme": "p.",
      "template": "1 $",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "р.",
      "template": "1 $",
      "rtl": false
    }
  },
  "BZD": {
    "name": "Belize Dollar",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "BZ$",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "BZ$",
      "template": "$1",
      "rtl": false
    }
  },
  "CAD": {
    "name": "Canadian Dollar",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "$",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "CA$",
      "template": "$1",
      "rtl": false
    }
  },
  "CDF": {
    "name": "Congolese Franc",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "CHE": {
    "name": "WIR Euro",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "CHF": {
    "name": "Swiss Franc",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "CHW": {
    "name": "WIR Franc",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "CLF": {
    "name": "Unidad de Fomento",
    "fractionSize": 4,
    "symbol": null,
    "uniqSymbol": null
  },
  "CLP": {
    "name": "Chilean Peso",
    "fractionSize": 0,
    "symbol": {
      "grapheme": "$",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": null
  },
  "CNY": {
    "name": "Yuan Renminbi",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "元",
      "template": "1 $",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "元",
      "template": "1 $",
      "rtl": false
    }
  },
  "COP": {
    "name": "Colombian Peso",
    "fractionSize": 0,
    "symbol": {
      "grapheme": "$",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": null
  },
  "COU": {
    "name": "Unidad de Valor Real",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "CRC": {
    "name": "Cost Rican Colon",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "₡",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "₡",
      "template": "$1",
      "rtl": false
    }
  },
  "CUC": {
    "name": "Peso Convertible",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "CUP": {
    "name": "Cuban Peso",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "$MN",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "$MN",
      "template": "$1",
      "rtl": false
    }
  },
  "CVE": {
    "name": "Cabo Verde Escudo",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "CZK": {
    "name": "Czech Koruna",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "Kč",
      "template": "1 $",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "Kč",
      "template": "1 $",
      "rtl": false
    }
  },
  "DJF": {
    "name": "Djibouti Franc",
    "fractionSize": 0,
    "symbol": null,
    "uniqSymbol": null
  },
  "DKK": {
    "name": "Danish Krone",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "kr",
      "template": "1 $",
      "rtl": false
    },
    "uniqSymbol": null
  },
  "DOP": {
    "name": "Dominican Peso",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "RD$",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "RD$",
      "template": "$1",
      "rtl": false
    }
  },
  "DZD": {
    "name": "Algerian Dinar",
    "fractionSize": 2,
    "symbol": {
      "grapheme": ".د.ج",
      "template": "1 $",
      "rtl": true
    },
    "uniqSymbol": {
      "grapheme": ".د.ج",
      "template": "1 $",
      "rtl": true
    }
  },
  "EEK": {
    "name": "Estonian Kroon",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "kr",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": null
  },
  "EGP": {
    "name": "Egyptian Pound",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "£",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": ".ج.م",
      "template": "1 $",
      "rtl": true
    }
  },
  "ERN": {
    "name": "Nakfa",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "ETB": {
    "name": "Ethiopian Birr",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "EUR": {
    "name": "Euro",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "€",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "€",
      "template": "$1",
      "rtl": false
    }
  },
  "FJD": {
    "name": "Fiji Dollar",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "$",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "FJ$",
      "template": "$1",
      "rtl": false
    }
  },
  "FKP": {
    "name": "Falkland Islands Pound",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "£",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": null
  },
  "GBP": {
    "name": "Pound Sterling",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "£",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "£",
      "template": "$1",
      "rtl": false
    }
  },
  "GEL": {
    "name": "Lari",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "GGP": {
    "name": "Guernsey Pound",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "£",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": null
  },
  "GHC": {
    "name": "Ghanaian Cedi",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "¢",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "¢",
      "template": "$1",
      "rtl": false
    }
  },
  "GHS": {
    "name": "Ghan Cedi",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "GIP": {
    "name": "Gibraltar Pound",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "£",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": null
  },
  "GMD": {
    "name": "Dalasi",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "GNF": {
    "name": "Guine Franc",
    "fractionSize": 0,
    "symbol": null,
    "uniqSymbol": null
  },
  "GTQ": {
    "name": "Quetzal",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "Q",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "Q",
      "template": "$1",
      "rtl": false
    }
  },
  "GYD": {
    "name": "Guyan Dollar",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "$",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "GY$",
      "template": "$1",
      "rtl": false
    }
  },
  "HKD": {
    "name": "Hong Kong Dollar",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "$",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "HK$",
      "template": "$1",
      "rtl": false
    }
  },
  "HNL": {
    "name": "Lempira",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "L",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "L",
      "template": "$1",
      "rtl": false
    }
  },
  "HRK": {
    "name": "Croatian Kuna",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "kn",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "kn",
      "template": "$1",
      "rtl": false
    }
  },
  "HTG": {
    "name": "Gourde",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "HUF": {
    "name": "Forint",
    "fractionSize": 0,
    "symbol": {
      "grapheme": "Ft",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "Ft",
      "template": "$1",
      "rtl": false
    }
  },
  "IDR": {
    "name": "Rupiah",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "Rp",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "Rp",
      "template": "$1",
      "rtl": false
    }
  },
  "ILS": {
    "name": "New Israeli Sheqel",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "₪",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "₪",
      "template": "$1",
      "rtl": false
    }
  },
  "IMP": {
    "name": "Manx Pound",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "£",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": null
  },
  "INR": {
    "name": "Indian Rupee",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "₹",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "₹",
      "template": "$1",
      "rtl": false
    }
  },
  "IQD": {
    "name": "Iraqi Dinar",
    "fractionSize": 3,
    "symbol": {
      "grapheme": ".د.ع",
      "template": "1 $",
      "rtl": true
    },
    "uniqSymbol": {
      "grapheme": ".د.ع",
      "template": "1 $",
      "rtl": true
    }
  },
  "IRR": {
    "name": "Iranian Rial",
    "fractionSize": 0,
    "symbol": {
      "grapheme": "﷼",
      "template": "1 $",
      "rtl": true
    },
    "uniqSymbol": {
      "grapheme": "﷼",
      "template": "1 $",
      "rtl": true
    }
  },
  "ISK": {
    "name": "Iceland Krona",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "kr",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": null
  },
  "JEP": {
    "name": "Jersey Pound",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "£",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": null
  },
  "JMD": {
    "name": "Jamaican Dollar",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "J$",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "J$",
      "template": "$1",
      "rtl": false
    }
  },
  "JOD": {
    "name": "Jordanian Dinar",
    "fractionSize": 3,
    "symbol": {
      "grapheme": ".د.إ",
      "template": "1 $",
      "rtl": true
    },
    "uniqSymbol": null
  },
  "JPY": {
    "name": "Yen",
    "fractionSize": 0,
    "symbol": {
      "grapheme": "¥",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "¥",
      "template": "$1",
      "rtl": false
    }
  },
  "KES": {
    "name": "Kenyan Shilling",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "KSh",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "KSh",
      "template": "$1",
      "rtl": false
    }
  },
  "KGS": {
    "name": "Som",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "сом",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "сом",
      "template": "$1",
      "rtl": false
    }
  },
  "KHR": {
    "name": "Riel",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "៛",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "៛",
      "template": "$1",
      "rtl": false
    }
  },
  "KMF": {
    "name": "Comoro Franc",
    "fractionSize": 0,
    "symbol": null,
    "uniqSymbol": null
  },
  "KPW": {
    "name": "North Korean Won",
    "fractionSize": 0,
    "symbol": {
      "grapheme": "₩",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": null
  },
  "KRW": {
    "name": "Won",
    "fractionSize": 0,
    "symbol": {
      "grapheme": "₩",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "₩",
      "template": "$1",
      "rtl": false
    }
  },
  "KWD": {
    "name": "Kuwaiti Dinar",
    "fractionSize": 3,
    "symbol": {
      "grapheme": ".د.ك",
      "template": "1 $",
      "rtl": true
    },
    "uniqSymbol": {
      "grapheme": ".د.ك",
      "template": "1 $",
      "rtl": true
    }
  },
  "KYD": {
    "name": "Cayman Islands Dollar",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "$",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "CI$",
      "template": "$1",
      "rtl": false
    }
  },
  "KZT": {
    "name": "Tenge",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "₸",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "₸",
      "template": "$1",
      "rtl": false
    }
  },
  "LAK": {
    "name": "Kip",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "₭",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "₭",
      "template": "$1",
      "rtl": false
    }
  },
  "LBP": {
    "name": "Lebanese Pound",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "£",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": ".ل.ل",
      "template": "1 $",
      "rtl": true
    }
  },
  "LKR": {
    "name": "Sri Lank Rupee",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "₨",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": null
  },
  "LRD": {
    "name": "Liberian Dollar",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "$",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "L$",
      "template": "$1",
      "rtl": false
    }
  },
  "LSL": {
    "name": "Loti",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "LTL": {
    "name": "Lithuanian Litas",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "Lt",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "Lt",
      "template": "$1",
      "rtl": false
    }
  },
  "LVL": {
    "name": "Latvian Lats",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "Ls",
      "template": "1 $",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "Ls",
      "template": "1 $",
      "rtl": false
    }
  },
  "LYD": {
    "name": "Libyan Dinar",
    "fractionSize": 3,
    "symbol": {
      "grapheme": ".د.ل",
      "template": "1 $",
      "rtl": true
    },
    "uniqSymbol": {
      "grapheme": ".د.ل",
      "template": "1 $",
      "rtl": true
    }
  },
  "MAD": {
    "name": "Moroccan Dirham",
    "fractionSize": 2,
    "symbol": {
      "grapheme": ".د.م",
      "template": "1 $",
      "rtl": true
    },
    "uniqSymbol": {
      "grapheme": ".د.م",
      "template": "1 $",
      "rtl": true
    }
  },
  "MDL": {
    "name": "Moldovan Leu",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "MGA": {
    "name": "Malagasy ariary",
    "fractionSize": 1,
    "symbol": null,
    "uniqSymbol": null
  },
  "MKD": {
    "name": "Denar",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "ден",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "ден",
      "template": "$1",
      "rtl": false
    }
  },
  "MMK": {
    "name": "Kyat",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "MNT": {
    "name": "Tugrik",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "₮",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "₮",
      "template": "$1",
      "rtl": false
    }
  },
  "MOP": {
    "name": "Pataca",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "MRO": {
    "name": "Ouguiya",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "MUR": {
    "name": "Mauritius Rupee",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "₨",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": null
  },
  "MVR": {
    "name": "Rufiyaa",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "MWK": {
    "name": "Kwacha",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "MXN": {
    "name": "Mexican Peso",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "$",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": null
  },
  "MXV": {
    "name": "Mexican Unidad de Inversion (UDI)",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "MYR": {
    "name": "Malaysian Ringgit",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "RM",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "RM",
      "template": "$1",
      "rtl": false
    }
  },
  "MZN": {
    "name": "Mozambique Metical",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "MT",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "MT",
      "template": "$1",
      "rtl": false
    }
  },
  "NAD": {
    "name": "Namibi Dollar",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "$",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "N$",
      "template": "$1",
      "rtl": false
    }
  },
  "NGN": {
    "name": "Naira",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "₦",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "₦",
      "template": "$1",
      "rtl": false
    }
  },
  "NIO": {
    "name": "Cordob Oro",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "C$",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "C$",
      "template": "$1",
      "rtl": false
    }
  },
  "NOK": {
    "name": "Norwegian Krone",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "kr",
      "template": "1 $",
      "rtl": false
    },
    "uniqSymbol": null
  },
  "NPR": {
    "name": "Nepalese Rupee",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "₨",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": null
  },
  "NZD": {
    "name": "New Zealand Dollar",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "$",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "NZ$",
      "template": "$1",
      "rtl": false
    }
  },
  "OMR": {
    "name": "Rial Omani",
    "fractionSize": 3,
    "symbol": {
      "grapheme": "﷼",
      "template": "1 $",
      "rtl": true
    },
    "uniqSymbol": {
      "grapheme": ".ر.ع",
      "template": "1 $",
      "rtl": true
    }
  },
  "PAB": {
    "name": "Balboa",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "B/.",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "B/.",
      "template": "$1",
      "rtl": false
    }
  },
  "PEN": {
    "name": "Nuevo Sol",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "S/",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "S/",
      "template": "$1",
      "rtl": false
    }
  },
  "PGK": {
    "name": "Kina",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "PHP": {
    "name": "Philippine Peso",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "₱",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "₱",
      "template": "$1",
      "rtl": false
    }
  },
  "PKR": {
    "name": "Pakistan Rupee",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "₨",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": null
  },
  "PLN": {
    "name": "Zloty",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "zł",
      "template": "1 $",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "zł",
      "template": "1 $",
      "rtl": false
    }
  },
  "PYG": {
    "name": "Guarani",
    "fractionSize": 0,
    "symbol": {
      "grapheme": "Gs",
      "template": "1$",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "Gs",
      "template": "1$",
      "rtl": false
    }
  },
  "QAR": {
    "name": "Qatari Rial",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "﷼",
      "template": "1 $",
      "rtl": true
    },
    "uniqSymbol": {
      "grapheme": ".ر.ق",
      "template": "1 $",
      "rtl": true
    }
  },
  "RON": {
    "name": "New Romanian Leu",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "lei",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "lei",
      "template": "$1",
      "rtl": false
    }
  },
  "RSD": {
    "name": "Serbian Dinar",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "Дин.",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "Дин.",
      "template": "$1",
      "rtl": false
    }
  },
  "RUB": {
    "name": "Russian Ruble",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "₽",
      "template": "1 $",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "₽",
      "template": "1 $",
      "rtl": false
    }
  },
  "RUR": {
    "name": "Russian Ruble",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "₽",
      "template": "1 $",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "₽",
      "template": "1 $",
      "rtl": false
    }
  },
  "RWF": {
    "name": "Rwand Franc",
    "fractionSize": 0,
    "symbol": null,
    "uniqSymbol": null
  },
  "SAR": {
    "name": "Saudi Riyal",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "﷼",
      "template": "1 $",
      "rtl": true
    },
    "uniqSymbol": {
      "grapheme": ".ر.س",
      "template": "1 $",
      "rtl": true
    }
  },
  "SBD": {
    "name": "Solomon Islands Dollar",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "$",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "SI$",
      "template": "$1",
      "rtl": false
    }
  },
  "SCR": {
    "name": "Seychelles Rupee",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "₨",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": null
  },
  "SDG": {
    "name": "Sudanese Pound",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "SEK": {
    "name": "Swedish Krona",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "kr",
      "template": "1 $",
      "rtl": false
    },
    "uniqSymbol": null
  },
  "SGD": {
    "name": "Singapore Dollar",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "$",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "S$",
      "template": "$1",
      "rtl": false
    }
  },
  "SHP": {
    "name": "Saint Helen Pound",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "£",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": null
  },
  "SLL": {
    "name": "Leone",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "SOS": {
    "name": "Somali Shilling",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "S",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "S",
      "template": "$1",
      "rtl": false
    }
  },
  "SRD": {
    "name": "Surinam Dollar",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "$",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": null
  },
  "SSP": {
    "name": "South Sudanese Pound",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "STD": {
    "name": "Dobra",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "SVC": {
    "name": "El Salvador Colon",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "$",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "C",
      "template": "$1",
      "rtl": false
    }
  },
  "SYP": {
    "name": "Syrian Pound",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "£",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": ".ل.س",
      "template": "1 $",
      "rtl": true
    }
  },
  "SZL": {
    "name": "Lilangeni",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "THB": {
    "name": "Baht",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "฿",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "฿",
      "template": "$1",
      "rtl": false
    }
  },
  "TJS": {
    "name": "Somoni",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "TMT": {
    "name": "Turkmenistan New Manat",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "TND": {
    "name": "Tunisian Dinar",
    "fractionSize": 3,
    "symbol": {
      "grapheme": ".د.ت",
      "template": "1 $",
      "rtl": true
    },
    "uniqSymbol": {
      "grapheme": ".د.ت",
      "template": "1 $",
      "rtl": true
    }
  },
  "TOP": {
    "name": "Pa’anga",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "TRL": {
    "name": "Turkish Lira",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "₤",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": null
  },
  "TRY": {
    "name": "Turkish Lira",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "₺",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "₺",
      "template": "$1",
      "rtl": false
    }
  },
  "TTD": {
    "name": "Trinidad and Tobago Dollar",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "TT$",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "TT$",
      "template": "$1",
      "rtl": false
    }
  },
  "TWD": {
    "name": "New Taiwan Dollar",
    "fractionSize": 0,
    "symbol": {
      "grapheme": "NT$",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "NT$",
      "template": "$1",
      "rtl": false
    }
  },
  "TZS": {
    "name": "Tanzanian Shilling",
    "fractionSize": 0,
    "symbol": {
      "grapheme": "TSh",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "TSh",
      "template": "$1",
      "rtl": false
    }
  },
  "UAH": {
    "name": "Hryvnia",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "₴",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "₴",
      "template": "$1",
      "rtl": false
    }
  },
  "UGX": {
    "name": "Ugand Shilling",
    "fractionSize": 0,
    "symbol": {
      "grapheme": "USh",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "USh",
      "template": "$1",
      "rtl": false
    }
  },
  "USD": {
    "name": "US Dollar",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "$",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "$",
      "template": "$1",
      "rtl": false
    }
  },
  "USN": {
    "name": "US Dollar (Next day)",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "UYI": {
    "name": "Uruguay Peso en Unidades Indexadas (URUIURUI)",
    "fractionSize": 0,
    "symbol": null,
    "uniqSymbol": null
  },
  "UYU": {
    "name": "Peso Uruguayo",
    "fractionSize": 0,
    "symbol": {
      "grapheme": "$U",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "$U",
      "template": "$1",
      "rtl": false
    }
  },
  "UZS": {
    "name": "Uzbekistan Sum",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "so’m",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "so’m",
      "template": "$1",
      "rtl": false
    }
  },
  "VEF": {
    "name": "Bolivar",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "Bs",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "Bs",
      "template": "$1",
      "rtl": false
    }
  },
  "VES": {
    "name": "Bolivar",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "Bs",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "Bs",
      "template": "$1",
      "rtl": false
    }
  },
  "VND": {
    "name": "Dong",
    "fractionSize": 0,
    "symbol": {
      "grapheme": "₫",
      "template": "1 $",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "₫",
      "template": "1 $",
      "rtl": false
    }
  },
  "VUV": {
    "name": "Vatu",
    "fractionSize": 0,
    "symbol": null,
    "uniqSymbol": null
  },
  "WST": {
    "name": "Tala",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "XAF": {
    "name": "CFA Franc BEAC",
    "fractionSize": 0,
    "symbol": {
      "grapheme": "FCFA",
      "template": "1 $",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "FCFA",
      "template": "1 $",
      "rtl": false
    }
  },
  "XCD": {
    "name": "East Caribbean Dollar",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "$",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "EC$",
      "template": "$1",
      "rtl": false
    }
  },
  "XDR": {
    "name": "SDR (Special Drawing Right)",
    "fractionSize": 0,
    "symbol": null,
    "uniqSymbol": null
  },
  "XOF": {
    "name": "CFA Franc BCEAO",
    "fractionSize": 0,
    "symbol": {
      "grapheme": "CFA",
      "template": "1 $",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "CFA",
      "template": "1 $",
      "rtl": false
    }
  },
  "XPF": {
    "name": "CFP Franc",
    "fractionSize": 0,
    "symbol": null,
    "uniqSymbol": null
  },
  "XSU": {
    "name": "Sucre",
    "fractionSize": 0,
    "symbol": null,
    "uniqSymbol": null
  },
  "XUA": {
    "name": "ADB Unit of Account",
    "fractionSize": 0,
    "symbol": null,
    "uniqSymbol": null
  },
  "YER": {
    "name": "Yemeni Rial",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "﷼",
      "template": "1 $",
      "rtl": true
    },
    "uniqSymbol": {
      "grapheme": ".ر.ي",
      "template": "1 $",
      "rtl": true
    }
  },
  "ZAR": {
    "name": "Rand",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "R",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "R",
      "template": "$1",
      "rtl": false
    }
  },
  "ZMW": {
    "name": "Zambian Kwacha",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "ZWD": {
    "name": "Zimbabwe Dollar",
    "fractionSize": 2,
    "symbol": {
      "grapheme": "Z$",
      "template": "$1",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "Z$",
      "template": "$1",
      "rtl": false
    }
  },
  "ZWL": {
    "name": "Zimbabwe Dollar",
    "fractionSize": 2,
    "symbol": null,
    "uniqSymbol": null
  },
  "BTC": {
    "name": "BTC",
    "fractionSize": 4,
    "symbol": {
      "grapheme": "₿",
      "template": "1 $",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "₿",
      "template": "1 $",
      "rtl": false
    }
  },
  "ETH": {
    "name": "ETH",
    "fractionSize": 4,
    "symbol": {
      "grapheme": "Ξ",
      "template": "1 $",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "Ξ",
      "template": "1 $",
      "rtl": false
    }
  },
  "LTC": {
    "name": "LTC",
    "fractionSize": 4,
    "symbol": {
      "grapheme": "Ł",
      "template": "1 $",
      "rtl": false
    },
    "uniqSymbol": {
      "grapheme": "Ł",
      "template": "1 $",
      "rtl": false
    }
  }
}

},{}],"currency-number-format.json":[function(require,module,exports){
module.exports={
    "ar_AE": {
        "decimal": ".",
        "thousands": ","
    },
    "bg_BG": {
        "decimal": ".",
        "thousands": ","
    },
    "cs_CZ": {
        "decimal": ",",
        "thousands": " "
    },
    "de_DE": {
        "decimal": ",",
        "thousands": " "
    },
    "en_US": {
        "decimal": ".",
        "thousands": ","
    },
    "es_ES": {
        "decimal": ",",
        "thousands": "."
    },
    "et_EE": {
        "decimal": ",",
        "thousands": " "
    },
    "fi_FI": {
        "decimal": ",",
        "thousands": " "
    },
    "fr_FR": {
        "decimal": ",",
        "thousands": " "
    },
    "he_IL": {
        "decimal": ",",
        "thousands": " "
    },
    "hu_HU": {
        "decimal": ",",
        "thousands": " "
    },
    "it_IT": {
        "decimal": ",",
        "thousands": "."
    },
    "ja_JP": {
        "decimal": ".",
        "thousands": ","
    },
    "ko_KR": {
        "decimal": ".",
        "thousands": ","
    },
    "nl_NL": {
        "decimal": ",",
        "thousands": "."
    },
    "pl_PL": {
        "decimal": ".",
        "thousands": " "
    },
    "pt_PT": {
        "decimal": ",",
        "thousands": " "
    },
    "ro_RO": {
        "decimal": ",",
        "thousands": "."
    },
    "ru_RU": {
        "decimal": ",",
        "thousands": " "
    },
    "sk_SK": {
        "decimal": ",",
        "thousands": " "
    },
    "th_TH": {
        "decimal": ".",
        "thousands": ","
    },
    "tr_TR": {
        "decimal": ",",
        "thousands": "."
    },
    "vi_VN": {
        "decimal": ",",
        "thousands": "."
    },
    "zh_TW": {
        "decimal": ",",
        "thousands": "."
    },
    "zh_CN": {
        "decimal": ".",
        "thousands": ","
    }
}
},{}],"is-retina-js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var isRetina = function isRetina() {
  return window.matchMedia && (window.matchMedia('only screen and (min-resolution: 124dpi), only screen and (min-resolution: 1.3dppx), only screen and (min-resolution: 48.8dpcm)').matches || window.matchMedia('only screen and (-webkit-min-device-pixel-ratio: 1.3), only screen and (-o-min-device-pixel-ratio: 2.6/2), only screen and (min--moz-device-pixel-ratio: 1.3), only screen and (min-device-pixel-ratio: 1.3)').matches) || window.devicePixelRatio && window.devicePixelRatio > 1.3;
};

exports['default'] = isRetina;
module.exports = exports['default'];

},{}],"paystation-embed-app":[function(require,module,exports){
"use strict";

var Helpers = require('./helpers');

var App = require('./app');

var polyfills = require('./polyfills');

polyfills.applyPolyfills();
var instance;

module.exports = function () {
  var getInstance = function getInstance() {
    if (!instance) {
      instance = new App();
    }

    return instance;
  };

  return Object.assign(Helpers.zipObject(['init', 'open', 'on', 'off', 'sendMessage', 'onMessage'].map(function (methodName) {
    var app = getInstance();
    return [methodName, function () {
      return app[methodName].apply(app, arguments);
    }];
  })), {
    eventTypes: App.eventTypes
  });
}();

},{"./app":6,"./helpers":10,"./polyfills":12}],"polyglot":[function(require,module,exports){
"use strict";

// Added for convenience in the Node environment.
// The meat and potatoes exist in ./lib/polyglot.js.
module.exports = require('./lib/polyglot');

},{"./lib/polyglot":2}],"react-dom-server":[function(require,module,exports){
/** @license React v16.1.0
 * react-dom-server.browser.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function (q, n) {
  "object" === (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" !== typeof module ? module.exports = n(require("react")) : "function" === typeof define && define.amd ? define(["react"], n) : q.ReactDOMServer = n(q.React);
})(void 0, function (q) {
  function n(a) {
    for (var b = arguments.length - 1, f = "Minified React error #" + a + "; visit http://facebook.github.io/react/docs/error-decoder.html?invariant\x3d" + a, c = 0; c < b; c++) {
      f += "\x26args[]\x3d" + encodeURIComponent(arguments[c + 1]);
    }

    b = Error(f + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.");
    b.name = "Invariant Violation";
    b.framesToPop = 1;
    throw b;
  }

  function y(a, b) {
    return (a & b) === b;
  }

  function X(a, b) {
    if (I.hasOwnProperty(a) || 2 < a.length && ("o" === a[0] || "O" === a[0]) && ("n" === a[1] || "N" === a[1])) return !1;
    if (null === b) return !0;

    switch (_typeof(b)) {
      case "boolean":
        return J(a);

      case "undefined":
      case "number":
      case "string":
      case "object":
        return !0;

      default:
        return !1;
    }
  }

  function K(a) {
    return D.hasOwnProperty(a) ? D[a] : null;
  }

  function J(a) {
    if (I.hasOwnProperty(a)) return !0;
    var b = K(a);
    if (b) return b.hasBooleanValue || b.hasStringBooleanValue || b.hasOverloadedBooleanValue;
    a = a.toLowerCase().slice(0, 5);
    return "data-" === a || "aria-" === a;
  }

  function E(a) {
    return function () {
      return a;
    };
  }

  function t(a) {
    if ("boolean" === typeof a || "number" === typeof a) return "" + a;
    a = "" + a;
    var b = Y.exec(a);

    if (b) {
      var f = "",
          c,
          l = 0;

      for (c = b.index; c < a.length; c++) {
        switch (a.charCodeAt(c)) {
          case 34:
            b = "\x26quot;";
            break;

          case 38:
            b = "\x26amp;";
            break;

          case 39:
            b = "\x26#x27;";
            break;

          case 60:
            b = "\x26lt;";
            break;

          case 62:
            b = "\x26gt;";
            break;

          default:
            continue;
        }

        l !== c && (f += a.substring(l, c));
        l = c + 1;
        f += b;
      }

      a = l !== c ? f + a.substring(l, c) : f;
    }

    return a;
  }

  function Z(a) {
    if (L.hasOwnProperty(a)) return !0;
    if (M.hasOwnProperty(a)) return !1;
    if (aa.test(a)) return L[a] = !0;
    M[a] = !0;
    return !1;
  }

  function ba(a, b) {
    var f = K(a);

    if (f) {
      if (null == b || f.hasBooleanValue && !b || f.hasNumericValue && isNaN(b) || f.hasPositiveNumericValue && 1 > b || f.hasOverloadedBooleanValue && !1 === b) return "";
      var c = f.attributeName;
      if (f.hasBooleanValue || f.hasOverloadedBooleanValue && !0 === b) return c + '\x3d""';
      if ("boolean" !== typeof b || J(a)) return c + "\x3d" + ('"' + t(b) + '"');
    } else if (X(a, b)) return null == b ? "" : a + "\x3d" + ('"' + t(b) + '"');

    return null;
  }

  function N(a) {
    switch (a) {
      case "svg":
        return "http://www.w3.org/2000/svg";

      case "math":
        return "http://www.w3.org/1998/Math/MathML";

      default:
        return "http://www.w3.org/1999/xhtml";
    }
  }

  function G(a) {
    return "string" === typeof a ? a : "function" === typeof a ? a.displayName || a.name : null;
  }

  function ca(a) {
    var b = "";
    q.Children.forEach(a, function (a) {
      null == a || "string" !== typeof a && "number" !== typeof a || (b += a);
    });
    return b;
  }

  function da(a, b) {
    if (a = a.contextTypes) {
      var f = {},
          c;

      for (c in a) {
        f[c] = b[c];
      }

      b = f;
    } else b = O;

    return b;
  }

  function P(a, b) {
    void 0 === a && n("152", G(b) || "Component");
  }

  function ea(a, b) {
    for (; q.isValidElement(a);) {
      var f = a,
          c = f.type;
      if ("function" !== typeof c) break;
      a = da(c, b);
      var l = [],
          g = !1,
          e = {
        isMounted: function isMounted(a) {
          return !1;
        },
        enqueueForceUpdate: function enqueueForceUpdate(a) {
          if (null === l) return null;
        },
        enqueueReplaceState: function enqueueReplaceState(a, b) {
          g = !0;
          l = [b];
        },
        enqueueSetState: function enqueueSetState(a, b) {
          if (null === l) return null;
          l.push(b);
        }
      };
      if (c.prototype && c.prototype.isReactComponent) var d = new c(f.props, a, e);else if (d = c(f.props, a, e), null == d || null == d.render) {
        a = d;
        P(a, c);
        continue;
      }
      d.props = f.props;
      d.context = a;
      d.updater = e;
      e = d.state;
      void 0 === e && (d.state = e = null);
      if (d.componentWillMount) if (d.componentWillMount(), l.length) {
        e = l;
        var h = g;
        l = null;
        g = !1;
        if (h && 1 === e.length) d.state = e[0];else {
          var k = h ? e[0] : d.state,
              m = !0;

          for (h = h ? 1 : 0; h < e.length; h++) {
            var p = e[h];
            if (p = "function" === typeof p ? p.call(d, k, f.props, a) : p) m ? (m = !1, k = w({}, k, p)) : w(k, p);
          }

          d.state = k;
        }
      } else l = null;
      a = d.render();
      P(a, c);

      if ("function" === typeof d.getChildContext) {
        f = c.childContextTypes;
        "object" !== _typeof(f) ? n("107", G(c) || "Unknown") : void 0;
        var t = d.getChildContext();

        for (var x in t) {
          x in f ? void 0 : n("108", G(c) || "Unknown", x);
        }
      }

      t && (b = w({}, b, t));
    }

    return {
      child: a,
      context: b
    };
  }

  var I = {
    children: !0,
    dangerouslySetInnerHTML: !0,
    defaultValue: !0,
    defaultChecked: !0,
    innerHTML: !0,
    suppressContentEditableWarning: !0,
    suppressHydrationWarning: !0,
    style: !0
  },
      Q = {
    MUST_USE_PROPERTY: 1,
    HAS_BOOLEAN_VALUE: 4,
    HAS_NUMERIC_VALUE: 8,
    HAS_POSITIVE_NUMERIC_VALUE: 24,
    HAS_OVERLOADED_BOOLEAN_VALUE: 32,
    HAS_STRING_BOOLEAN_VALUE: 64,
    injectDOMPropertyConfig: function injectDOMPropertyConfig(a) {
      var b = Q,
          f = a.Properties || {},
          c = a.DOMAttributeNamespaces || {},
          l = a.DOMAttributeNames || {};
      a = a.DOMMutationMethods || {};

      for (var g in f) {
        D.hasOwnProperty(g) ? n("48", g) : void 0;
        var e = g.toLowerCase(),
            d = f[g];
        e = {
          attributeName: e,
          attributeNamespace: null,
          propertyName: g,
          mutationMethod: null,
          mustUseProperty: y(d, b.MUST_USE_PROPERTY),
          hasBooleanValue: y(d, b.HAS_BOOLEAN_VALUE),
          hasNumericValue: y(d, b.HAS_NUMERIC_VALUE),
          hasPositiveNumericValue: y(d, b.HAS_POSITIVE_NUMERIC_VALUE),
          hasOverloadedBooleanValue: y(d, b.HAS_OVERLOADED_BOOLEAN_VALUE),
          hasStringBooleanValue: y(d, b.HAS_STRING_BOOLEAN_VALUE)
        };
        1 >= e.hasBooleanValue + e.hasNumericValue + e.hasOverloadedBooleanValue ? void 0 : n("50", g);
        l.hasOwnProperty(g) && (e.attributeName = l[g]);
        c.hasOwnProperty(g) && (e.attributeNamespace = c[g]);
        a.hasOwnProperty(g) && (e.mutationMethod = a[g]);
        D[g] = e;
      }
    }
  },
      D = {},
      k = Q,
      z = k.MUST_USE_PROPERTY,
      h = k.HAS_BOOLEAN_VALUE,
      R = k.HAS_NUMERIC_VALUE,
      F = k.HAS_POSITIVE_NUMERIC_VALUE,
      A = k.HAS_STRING_BOOLEAN_VALUE;
  z = {
    Properties: {
      allowFullScreen: h,
      autoFocus: A,
      async: h,
      autoPlay: h,
      capture: h,
      checked: z | h,
      cols: F,
      contentEditable: A,
      controls: h,
      "default": h,
      defer: h,
      disabled: h,
      download: k.HAS_OVERLOADED_BOOLEAN_VALUE,
      draggable: A,
      formNoValidate: h,
      hidden: h,
      loop: h,
      multiple: z | h,
      muted: z | h,
      noValidate: h,
      open: h,
      playsInline: h,
      readOnly: h,
      required: h,
      reversed: h,
      rows: F,
      rowSpan: R,
      scoped: h,
      seamless: h,
      selected: z | h,
      size: F,
      start: R,
      span: F,
      spellCheck: A,
      style: 0,
      tabIndex: 0,
      itemScope: h,
      acceptCharset: 0,
      className: 0,
      htmlFor: 0,
      httpEquiv: 0,
      value: A
    },
    DOMAttributeNames: {
      acceptCharset: "accept-charset",
      className: "class",
      htmlFor: "for",
      httpEquiv: "http-equiv"
    },
    DOMMutationMethods: {
      value: function value(a, b) {
        if (null == b) return a.removeAttribute("value");
        "number" !== a.type || !1 === a.hasAttribute("value") ? a.setAttribute("value", "" + b) : a.validity && !a.validity.badInput && a.ownerDocument.activeElement !== a && a.setAttribute("value", "" + b);
      }
    }
  };
  h = k.HAS_STRING_BOOLEAN_VALUE;

  var H = {
    Properties: {
      autoReverse: h,
      externalResourcesRequired: h,
      preserveAlpha: h
    },
    DOMAttributeNames: {
      autoReverse: "autoReverse",
      externalResourcesRequired: "externalResourcesRequired",
      preserveAlpha: "preserveAlpha"
    },
    DOMAttributeNamespaces: {
      xlinkActuate: "http://www.w3.org/1999/xlink",
      xlinkArcrole: "http://www.w3.org/1999/xlink",
      xlinkHref: "http://www.w3.org/1999/xlink",
      xlinkRole: "http://www.w3.org/1999/xlink",
      xlinkShow: "http://www.w3.org/1999/xlink",
      xlinkTitle: "http://www.w3.org/1999/xlink",
      xlinkType: "http://www.w3.org/1999/xlink",
      xmlBase: "http://www.w3.org/XML/1998/namespace",
      xmlLang: "http://www.w3.org/XML/1998/namespace",
      xmlSpace: "http://www.w3.org/XML/1998/namespace"
    }
  },
      fa = /[\-\:]([a-z])/g,
      ha = function ha(a) {
    return a[1].toUpperCase();
  };

  "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode x-height xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type xml:base xmlns:xlink xml:lang xml:space".split(" ").forEach(function (a) {
    var b = a.replace(fa, ha);
    H.Properties[b] = 0;
    H.DOMAttributeNames[b] = a;
  });
  k.injectDOMPropertyConfig(z);
  k.injectDOMPropertyConfig(H);
  var w = q.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.assign;

  k = function k() {};

  k.thatReturns = E;
  k.thatReturnsFalse = E(!1);
  k.thatReturnsTrue = E(!0);
  k.thatReturnsNull = E(null);

  k.thatReturnsThis = function () {
    return this;
  };

  k.thatReturnsArgument = function (a) {
    return a;
  };

  var O = {},
      ia = /([A-Z])/g,
      ja = /^ms-/,
      Y = /["'&<>]/,
      aa = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,
      M = {},
      L = {},
      S = {
    area: !0,
    base: !0,
    br: !0,
    col: !0,
    embed: !0,
    hr: !0,
    img: !0,
    input: !0,
    keygen: !0,
    link: !0,
    meta: !0,
    param: !0,
    source: !0,
    track: !0,
    wbr: !0
  },
      ka = w({
    menuitem: !0
  }, S),
      B = {
    animationIterationCount: !0,
    borderImageOutset: !0,
    borderImageSlice: !0,
    borderImageWidth: !0,
    boxFlex: !0,
    boxFlexGroup: !0,
    boxOrdinalGroup: !0,
    columnCount: !0,
    columns: !0,
    flex: !0,
    flexGrow: !0,
    flexPositive: !0,
    flexShrink: !0,
    flexNegative: !0,
    flexOrder: !0,
    gridRow: !0,
    gridRowEnd: !0,
    gridRowSpan: !0,
    gridRowStart: !0,
    gridColumn: !0,
    gridColumnEnd: !0,
    gridColumnSpan: !0,
    gridColumnStart: !0,
    fontWeight: !0,
    lineClamp: !0,
    lineHeight: !0,
    opacity: !0,
    order: !0,
    orphans: !0,
    tabSize: !0,
    widows: !0,
    zIndex: !0,
    zoom: !0,
    fillOpacity: !0,
    floodOpacity: !0,
    stopOpacity: !0,
    strokeDasharray: !0,
    strokeDashoffset: !0,
    strokeMiterlimit: !0,
    strokeOpacity: !0,
    strokeWidth: !0
  },
      la = ["Webkit", "ms", "Moz", "O"];
  Object.keys(B).forEach(function (a) {
    la.forEach(function (b) {
      b = b + a.charAt(0).toUpperCase() + a.substring(1);
      B[b] = B[a];
    });
  });

  var T = "function" === typeof Symbol && Symbol["for"] && Symbol["for"]("react.fragment") || 60107,
      C = q.Children.toArray,
      U = k.thatReturns(""),
      ma = {
    listing: !0,
    pre: !0,
    textarea: !0
  },
      na = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,
      V = {},
      oa = function (a) {
    var b = {};
    return function (f) {
      b.hasOwnProperty(f) || (b[f] = a.call(this, f));
      return b[f];
    };
  }(function (a) {
    return a.replace(ia, "-$1").toLowerCase().replace(ja, "-ms-");
  }),
      pa = {
    children: null,
    dangerouslySetInnerHTML: null,
    suppressContentEditableWarning: null,
    suppressHydrationWarning: null
  },
      W = function () {
    function a(b, f) {
      if (!(this instanceof a)) throw new TypeError("Cannot call a class as a function");
      q.isValidElement(b) ? b.type !== T ? b = [b] : (b = b.props.children, b = q.isValidElement(b) ? [b] : C(b)) : b = C(b);
      this.stack = [{
        domNamespace: "http://www.w3.org/1999/xhtml",
        children: b,
        childIndex: 0,
        context: O,
        footer: ""
      }];
      this.exhausted = !1;
      this.currentSelectValue = null;
      this.previousWasTextNode = !1;
      this.makeStaticMarkup = f;
    }

    a.prototype.read = function (a) {
      if (this.exhausted) return null;

      for (var b = ""; b.length < a;) {
        if (0 === this.stack.length) {
          this.exhausted = !0;
          break;
        }

        var c = this.stack[this.stack.length - 1];

        if (c.childIndex >= c.children.length) {
          var l = c.footer;
          b += l;
          "" !== l && (this.previousWasTextNode = !1);
          this.stack.pop();
          "select" === c.tag && (this.currentSelectValue = null);
        } else l = c.children[c.childIndex++], b += this.render(l, c.context, c.domNamespace);
      }

      return b;
    };

    a.prototype.render = function (a, f, c) {
      if ("string" === typeof a || "number" === typeof a) {
        c = "" + a;
        if ("" === c) return "";
        if (this.makeStaticMarkup) return t(c);
        if (this.previousWasTextNode) return "\x3c!-- --\x3e" + t(c);
        this.previousWasTextNode = !0;
        return t(c);
      }

      f = ea(a, f);
      a = f.child;
      f = f.context;
      if (null === a || !1 === a) return "";
      if (q.isValidElement(a)) return a.type === T ? (a = C(a.props.children), this.stack.push({
        domNamespace: c,
        children: a,
        childIndex: 0,
        context: f,
        footer: ""
      }), "") : this.renderDOM(a, f, c);
      a = C(a);
      this.stack.push({
        domNamespace: c,
        children: a,
        childIndex: 0,
        context: f,
        footer: ""
      });
      return "";
    };

    a.prototype.renderDOM = function (a, f, c) {
      var b = a.type.toLowerCase();
      "http://www.w3.org/1999/xhtml" === c && N(b);
      V.hasOwnProperty(b) || (na.test(b) ? void 0 : n("65", b), V[b] = !0);
      var g = a.props;
      if ("input" === b) g = w({
        type: void 0
      }, g, {
        defaultChecked: void 0,
        defaultValue: void 0,
        value: null != g.value ? g.value : g.defaultValue,
        checked: null != g.checked ? g.checked : g.defaultChecked
      });else if ("textarea" === b) {
        var e = g.value;

        if (null == e) {
          e = g.defaultValue;
          var d = g.children;
          null != d && (null != e ? n("92") : void 0, Array.isArray(d) && (1 >= d.length ? void 0 : n("93"), d = d[0]), e = "" + d);
          null == e && (e = "");
        }

        g = w({}, g, {
          value: void 0,
          children: "" + e
        });
      } else if ("select" === b) this.currentSelectValue = null != g.value ? g.value : g.defaultValue, g = w({}, g, {
        value: void 0
      });else if ("option" === b) {
        d = this.currentSelectValue;
        var h = ca(g.children);

        if (null != d) {
          var k = null != g.value ? g.value + "" : h;
          e = !1;
          if (Array.isArray(d)) for (var m = 0; m < d.length; m++) {
            if ("" + d[m] === k) {
              e = !0;
              break;
            }
          } else e = "" + d === k;
          g = w({
            selected: void 0,
            children: void 0
          }, g, {
            selected: e,
            children: h
          });
        }
      }
      if (e = g) ka[b] && (null != e.children || null != e.dangerouslySetInnerHTML ? n("137", b, U()) : void 0), null != e.dangerouslySetInnerHTML && (null != e.children ? n("60") : void 0, "object" === _typeof(e.dangerouslySetInnerHTML) && "__html" in e.dangerouslySetInnerHTML ? void 0 : n("61")), null != e.style && "object" !== _typeof(e.style) ? n("62", U()) : void 0;
      e = g;
      d = this.makeStaticMarkup;
      h = 1 === this.stack.length;
      k = "\x3c" + a.type;

      for (r in e) {
        if (e.hasOwnProperty(r)) {
          var p = e[r];

          if (null != p) {
            if ("style" === r) {
              m = void 0;
              var q = "",
                  x = "";

              for (m in p) {
                if (p.hasOwnProperty(m)) {
                  var u = 0 === m.indexOf("--"),
                      v = p[m];
                  null != v && (q += x + oa(m) + ":", x = m, u = null == v || "boolean" === typeof v || "" === v ? "" : u || "number" !== typeof v || 0 === v || B.hasOwnProperty(x) && B[x] ? ("" + v).trim() : v + "px", q += u, x = ";");
                }
              }

              p = q || null;
            }

            m = null;

            b: if (u = b, v = e, -1 === u.indexOf("-")) u = "string" === typeof v.is;else switch (u) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                u = !1;
                break b;

              default:
                u = !0;
            }

            u ? pa.hasOwnProperty(r) || (m = r, m = Z(m) && null != p ? m + "\x3d" + ('"' + t(p) + '"') : "") : m = ba(r, p);
            m && (k += " " + m);
          }
        }
      }

      d || h && (k += ' data-reactroot\x3d""');
      var r = k;
      e = "";
      S.hasOwnProperty(b) ? r += "/\x3e" : (r += "\x3e", e = "\x3c/" + a.type + "\x3e");

      a: {
        d = g.dangerouslySetInnerHTML;

        if (null != d) {
          if (null != d.__html) {
            d = d.__html;
            break a;
          }
        } else if (d = g.children, "string" === typeof d || "number" === typeof d) {
          d = t(d);
          break a;
        }

        d = null;
      }

      null != d ? (g = [], ma[b] && "\n" === d.charAt(0) && (r += "\n"), r += d) : g = C(g.children);
      a = a.type;
      c = null == c || "http://www.w3.org/1999/xhtml" === c ? N(a) : "http://www.w3.org/2000/svg" === c && "foreignObject" === a ? "http://www.w3.org/1999/xhtml" : c;
      this.stack.push({
        domNamespace: c,
        tag: b,
        children: g,
        childIndex: 0,
        context: f,
        footer: e
      });
      this.previousWasTextNode = !1;
      return r;
    };

    return a;
  }();

  return Object.freeze({
    renderToString: function renderToString(a) {
      return new W(a, !1).read(Infinity);
    },
    renderToStaticMarkup: function renderToStaticMarkup(a) {
      return new W(a, !0).read(Infinity);
    },
    renderToNodeStream: function renderToNodeStream() {
      n("207");
    },
    renderToStaticNodeStream: function renderToStaticNodeStream() {
      n("208");
    },
    version: "16.1.0"
  });
});

},{"react":"react"}],"react-dom":[function(require,module,exports){
/** @license React v16.1.0
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/
'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function (ea, l) {
  "object" === (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" !== typeof module ? module.exports = l(require("react")) : "function" === typeof define && define.amd ? define(["react"], l) : ea.ReactDOM = l(ea.React);
})(void 0, function (ea) {
  function l(a) {
    for (var b = arguments.length - 1, c = "Minified React error #" + a + "; visit http://facebook.github.io/react/docs/error-decoder.html?invariant\x3d" + a, d = 0; d < b; d++) {
      c += "\x26args[]\x3d" + encodeURIComponent(arguments[d + 1]);
    }

    b = Error(c + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.");
    b.name = "Invariant Violation";
    b.framesToPop = 1;
    throw b;
  }

  function oa(a, b) {
    return (a & b) === b;
  }

  function Qc(a, b) {
    if (Rc.hasOwnProperty(a) || 2 < a.length && ("o" === a[0] || "O" === a[0]) && ("n" === a[1] || "N" === a[1])) return !1;
    if (null === b) return !0;

    switch (_typeof(b)) {
      case "boolean":
        return Rc.hasOwnProperty(a) ? a = !0 : (b = Jb(a)) ? a = b.hasBooleanValue || b.hasStringBooleanValue || b.hasOverloadedBooleanValue : (a = a.toLowerCase().slice(0, 5), a = "data-" === a || "aria-" === a), a;

      case "undefined":
      case "number":
      case "string":
      case "object":
        return !0;

      default:
        return !1;
    }
  }

  function Jb(a) {
    return fb.hasOwnProperty(a) ? fb[a] : null;
  }

  function Sc() {
    if (gb) for (var a in pa) {
      var b = pa[a],
          c = gb.indexOf(a);
      -1 < c ? void 0 : l("96", a);

      if (!qa[c]) {
        b.extractEvents ? void 0 : l("97", a);
        qa[c] = b;
        c = b.eventTypes;

        for (var d in c) {
          var e = void 0;
          var f = c[d],
              g = b,
              k = d;
          Kb.hasOwnProperty(k) ? l("99", k) : void 0;
          Kb[k] = f;
          var h = f.phasedRegistrationNames;

          if (h) {
            for (e in h) {
              h.hasOwnProperty(e) && Tc(h[e], g, k);
            }

            e = !0;
          } else f.registrationName ? (Tc(f.registrationName, g, k), e = !0) : e = !1;

          e ? void 0 : l("98", d, a);
        }
      }
    }
  }

  function Tc(a, b, c) {
    ra[a] ? l("100", a) : void 0;
    ra[a] = b;
    hb[a] = b.eventTypes[c].dependencies;
  }

  function Uc(a) {
    gb ? l("101") : void 0;
    gb = Array.prototype.slice.call(a);
    Sc();
  }

  function Vc(a) {
    var b = !1,
        c;

    for (c in a) {
      if (a.hasOwnProperty(c)) {
        var d = a[c];
        pa.hasOwnProperty(c) && pa[c] === d || (pa[c] ? l("102", c) : void 0, pa[c] = d, b = !0);
      }
    }

    b && Sc();
  }

  function ib(a) {
    return function () {
      return a;
    };
  }

  function Wc(a, b, c, d) {
    b = a.type || "unknown-event";
    a.currentTarget = Xc(d);
    u.invokeGuardedCallbackAndCatchFirstError(b, c, void 0, a);
    a.currentTarget = null;
  }

  function xa(a, b) {
    null == b ? l("30") : void 0;
    if (null == a) return b;

    if (Array.isArray(a)) {
      if (Array.isArray(b)) return a.push.apply(a, b), a;
      a.push(b);
      return a;
    }

    return Array.isArray(b) ? [a].concat(b) : [a, b];
  }

  function fa(a, b, c) {
    Array.isArray(a) ? a.forEach(b, c) : a && b.call(c, a);
  }

  function Lb(a, b) {
    var c = a.stateNode;
    if (!c) return null;
    var d = Mb(c);
    if (!d) return null;
    c = d[b];

    a: switch (b) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
        (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));
        a = !d;
        break a;

      default:
        a = !1;
    }

    if (a) return null;
    c && "function" !== typeof c ? l("231", b, _typeof(c)) : void 0;
    return c;
  }

  function Yc(a, b, c, d) {
    for (var e, f = 0; f < qa.length; f++) {
      var g = qa[f];
      g && (g = g.extractEvents(a, b, c, d)) && (e = xa(e, g));
    }

    return e;
  }

  function Nb(a) {
    a && (sa = xa(sa, a));
  }

  function Ob(a) {
    var b = sa;
    sa = null;
    a ? fa(b, Re) : fa(b, Se);
    sa ? l("95") : void 0;
    u.rethrowCaughtError();
  }

  function Y(a) {
    if (a[P]) return a[P];

    for (var b = []; !a[P];) {
      if (b.push(a), a.parentNode) a = a.parentNode;else return null;
    }

    var c = void 0,
        d = a[P];
    if (5 === d.tag || 6 === d.tag) return d;

    for (; a && (d = a[P]); a = b.pop()) {
      c = d;
    }

    return c;
  }

  function ya(a) {
    if (5 === a.tag || 6 === a.tag) return a.stateNode;
    l("33");
  }

  function Zc(a) {
    return a[ha] || null;
  }

  function T(a) {
    do {
      a = a["return"];
    } while (a && 5 !== a.tag);

    return a ? a : null;
  }

  function $c(a, b, c) {
    for (var d = []; a;) {
      d.push(a), a = T(a);
    }

    for (a = d.length; 0 < a--;) {
      b(d[a], "captured", c);
    }

    for (a = 0; a < d.length; a++) {
      b(d[a], "bubbled", c);
    }
  }

  function ad(a, b, c) {
    if (b = Lb(a, c.dispatchConfig.phasedRegistrationNames[b])) c._dispatchListeners = xa(c._dispatchListeners, b), c._dispatchInstances = xa(c._dispatchInstances, a);
  }

  function Te(a) {
    a && a.dispatchConfig.phasedRegistrationNames && $c(a._targetInst, ad, a);
  }

  function Ue(a) {
    if (a && a.dispatchConfig.phasedRegistrationNames) {
      var b = a._targetInst;
      b = b ? T(b) : null;
      $c(b, ad, a);
    }
  }

  function Pb(a, b, c) {
    a && c && c.dispatchConfig.registrationName && (b = Lb(a, c.dispatchConfig.registrationName)) && (c._dispatchListeners = xa(c._dispatchListeners, b), c._dispatchInstances = xa(c._dispatchInstances, a));
  }

  function Ve(a) {
    a && a.dispatchConfig.registrationName && Pb(a._targetInst, null, a);
  }

  function za(a) {
    fa(a, Te);
  }

  function bd(a, b, c, d) {
    if (c && d) a: {
      var e = c;

      for (var f = d, g = 0, k = e; k; k = T(k)) {
        g++;
      }

      k = 0;

      for (var h = f; h; h = T(h)) {
        k++;
      }

      for (; 0 < g - k;) {
        e = T(e), g--;
      }

      for (; 0 < k - g;) {
        f = T(f), k--;
      }

      for (; g--;) {
        if (e === f || e === f.alternate) break a;
        e = T(e);
        f = T(f);
      }

      e = null;
    } else e = null;
    f = e;

    for (e = []; c && c !== f;) {
      g = c.alternate;
      if (null !== g && g === f) break;
      e.push(c);
      c = T(c);
    }

    for (c = []; d && d !== f;) {
      g = d.alternate;
      if (null !== g && g === f) break;
      c.push(d);
      d = T(d);
    }

    for (d = 0; d < e.length; d++) {
      Pb(e[d], "bubbled", a);
    }

    for (a = c.length; 0 < a--;) {
      Pb(c[a], "captured", b);
    }
  }

  function cd() {
    !Qb && H.canUseDOM && (Qb = "textContent" in document.documentElement ? "textContent" : "innerText");
    return Qb;
  }

  function dd() {
    if (G._fallbackText) return G._fallbackText;
    var a,
        b = G._startText,
        c = b.length,
        d,
        e = ed(),
        f = e.length;

    for (a = 0; a < c && b[a] === e[a]; a++) {
      ;
    }

    var g = c - a;

    for (d = 1; d <= g && b[c - d] === e[f - d]; d++) {
      ;
    }

    G._fallbackText = e.slice(a, 1 < d ? 1 - d : void 0);
    return G._fallbackText;
  }

  function ed() {
    return "value" in G._root ? G._root.value : G._root[cd()];
  }

  function n(a, b, c, d) {
    this.dispatchConfig = a;
    this._targetInst = b;
    this.nativeEvent = c;
    a = this.constructor.Interface;

    for (var e in a) {
      a.hasOwnProperty(e) && ((b = a[e]) ? this[e] = b(c) : "target" === e ? this.target = d : this[e] = c[e]);
    }

    this.isDefaultPrevented = (null != c.defaultPrevented ? c.defaultPrevented : !1 === c.returnValue) ? E.thatReturnsTrue : E.thatReturnsFalse;
    this.isPropagationStopped = E.thatReturnsFalse;
    return this;
  }

  function We(a, b, c, d) {
    if (this.eventPool.length) {
      var e = this.eventPool.pop();
      this.call(e, a, b, c, d);
      return e;
    }

    return new this(a, b, c, d);
  }

  function Xe(a) {
    a instanceof this ? void 0 : l("223");
    a.destructor();
    10 > this.eventPool.length && this.eventPool.push(a);
  }

  function fd(a) {
    a.eventPool = [];
    a.getPooled = We;
    a.release = Xe;
  }

  function gd(a, b, c, d) {
    return n.call(this, a, b, c, d);
  }

  function hd(a, b, c, d) {
    return n.call(this, a, b, c, d);
  }

  function Ye() {
    var a = window.opera;
    return "object" === _typeof(a) && "function" === typeof a.version && 12 >= parseInt(a.version(), 10);
  }

  function id(a, b) {
    switch (a) {
      case "topKeyUp":
        return -1 !== Ze.indexOf(b.keyCode);

      case "topKeyDown":
        return 229 !== b.keyCode;

      case "topKeyPress":
      case "topMouseDown":
      case "topBlur":
        return !0;

      default:
        return !1;
    }
  }

  function jd(a) {
    a = a.detail;
    return "object" === _typeof(a) && "data" in a ? a.data : null;
  }

  function $e(a, b) {
    switch (a) {
      case "topCompositionEnd":
        return jd(b);

      case "topKeyPress":
        if (32 !== b.which) return null;
        kd = !0;
        return ld;

      case "topTextInput":
        return a = b.data, a === ld && kd ? null : a;

      default:
        return null;
    }
  }

  function af(a, b) {
    if (Aa) return "topCompositionEnd" === a || !Rb && id(a, b) ? (a = dd(), G._root = null, G._startText = null, G._fallbackText = null, Aa = !1, a) : null;

    switch (a) {
      case "topPaste":
        return null;

      case "topKeyPress":
        if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {
          if (b.char && 1 < b.char.length) return b.char;
          if (b.which) return String.fromCharCode(b.which);
        }

        return null;

      case "topCompositionEnd":
        return md ? null : b.data;

      default:
        return null;
    }
  }

  function nd(a) {
    if (a = od(a)) {
      jb && "function" === typeof jb.restoreControlledState ? void 0 : l("194");
      var b = Mb(a.stateNode);
      jb.restoreControlledState(a.stateNode, a.type, b);
    }
  }

  function pd(a) {
    Da ? ia ? ia.push(a) : ia = [a] : Da = a;
  }

  function qd() {
    if (Da) {
      var a = Da,
          b = ia;
      ia = Da = null;
      nd(a);
      if (b) for (a = 0; a < b.length; a++) {
        nd(b[a]);
      }
    }
  }

  function Sb(a, b) {
    if (Tb) return Ub(a, b);
    Tb = !0;

    try {
      return Ub(a, b);
    } finally {
      Tb = !1, qd();
    }
  }

  function rd(a) {
    var b = a && a.nodeName && a.nodeName.toLowerCase();
    return "input" === b ? !!bf[a.type] : "textarea" === b ? !0 : !1;
  }

  function Vb(a) {
    a = a.target || a.srcElement || window;
    a.correspondingUseElement && (a = a.correspondingUseElement);
    return 3 === a.nodeType ? a.parentNode : a;
  }

  function Ea(a, b) {
    if (!H.canUseDOM || b && !("addEventListener" in document)) return !1;
    b = "on" + a;
    var c = (b in document);
    c || (c = document.createElement("div"), c.setAttribute(b, "return;"), c = "function" === typeof c[b]);
    !c && sd && "wheel" === a && (c = document.implementation.hasFeature("Events.wheel", "3.0"));
    return c;
  }

  function td(a) {
    var b = a.type;
    return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b || "radio" === b);
  }

  function cf(a) {
    var b = td(a) ? "checked" : "value",
        c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b),
        d = "" + a[b];
    if (!a.hasOwnProperty(b) && "function" === typeof c.get && "function" === typeof c.set) return Object.defineProperty(a, b, {
      enumerable: c.enumerable,
      configurable: !0,
      get: function get() {
        return c.get.call(this);
      },
      set: function set(a) {
        d = "" + a;
        c.set.call(this, a);
      }
    }), {
      getValue: function getValue() {
        return d;
      },
      setValue: function setValue(a) {
        d = "" + a;
      },
      stopTracking: function stopTracking() {
        a._valueTracker = null;
        delete a[b];
      }
    };
  }

  function kb(a) {
    a._valueTracker || (a._valueTracker = cf(a));
  }

  function ud(a) {
    if (!a) return !1;
    var b = a._valueTracker;
    if (!b) return !0;
    var c = b.getValue();
    var d = "";
    a && (d = td(a) ? a.checked ? "true" : "false" : a.value);
    a = d;
    return a !== c ? (b.setValue(a), !0) : !1;
  }

  function vd(a, b, c) {
    a = n.getPooled(wd.change, a, b, c);
    a.type = "change";
    pd(c);
    za(a);
    return a;
  }

  function df(a) {
    Nb(a);
    Ob(!1);
  }

  function lb(a) {
    var b = ya(a);
    if (ud(b)) return a;
  }

  function ef(a, b) {
    if ("topChange" === a) return b;
  }

  function xd() {
    Ka && (Ka.detachEvent("onpropertychange", yd), La = Ka = null);
  }

  function yd(a) {
    "value" === a.propertyName && lb(La) && (a = vd(La, a, Vb(a)), Sb(df, a));
  }

  function ff(a, b, c) {
    "topFocus" === a ? (xd(), Ka = b, La = c, Ka.attachEvent("onpropertychange", yd)) : "topBlur" === a && xd();
  }

  function gf(a, b) {
    if ("topSelectionChange" === a || "topKeyUp" === a || "topKeyDown" === a) return lb(La);
  }

  function hf(a, b) {
    if ("topClick" === a) return lb(b);
  }

  function jf(a, b) {
    if ("topInput" === a || "topChange" === a) return lb(b);
  }

  function ja(a, b, c, d) {
    return n.call(this, a, b, c, d);
  }

  function kf(a) {
    var b = this.nativeEvent;
    return b.getModifierState ? b.getModifierState(a) : (a = lf[a]) ? !!b[a] : !1;
  }

  function Wb(a) {
    return kf;
  }

  function U(a, b, c, d) {
    return n.call(this, a, b, c, d);
  }

  function Ma(a) {
    a = a.type;
    return "string" === typeof a ? a : "function" === typeof a ? a.displayName || a.name : null;
  }

  function Na(a) {
    var b = a;
    if (a.alternate) for (; b["return"];) {
      b = b["return"];
    } else {
      if (0 !== (b.effectTag & 2)) return 1;

      for (; b["return"];) {
        if (b = b["return"], 0 !== (b.effectTag & 2)) return 1;
      }
    }
    return 3 === b.tag ? 2 : 3;
  }

  function mf(a) {
    return (a = a._reactInternalFiber) ? 2 === Na(a) : !1;
  }

  function zd(a) {
    2 !== Na(a) ? l("188") : void 0;
  }

  function Ad(a) {
    var b = a.alternate;
    if (!b) return b = Na(a), 3 === b ? l("188") : void 0, 1 === b ? null : a;

    for (var c = a, d = b;;) {
      var e = c["return"],
          f = e ? e.alternate : null;
      if (!e || !f) break;

      if (e.child === f.child) {
        for (var g = e.child; g;) {
          if (g === c) return zd(e), a;
          if (g === d) return zd(e), b;
          g = g.sibling;
        }

        l("188");
      }

      if (c["return"] !== d["return"]) c = e, d = f;else {
        g = !1;

        for (var k = e.child; k;) {
          if (k === c) {
            g = !0;
            c = e;
            d = f;
            break;
          }

          if (k === d) {
            g = !0;
            d = e;
            c = f;
            break;
          }

          k = k.sibling;
        }

        if (!g) {
          for (k = f.child; k;) {
            if (k === c) {
              g = !0;
              c = f;
              d = e;
              break;
            }

            if (k === d) {
              g = !0;
              d = f;
              c = e;
              break;
            }

            k = k.sibling;
          }

          g ? void 0 : l("189");
        }
      }
      c.alternate !== d ? l("190") : void 0;
    }

    3 !== c.tag ? l("188") : void 0;
    return c.stateNode.current === c ? a : b;
  }

  function nf(a) {
    a = Ad(a);
    if (!a) return null;

    for (var b = a;;) {
      if (5 === b.tag || 6 === b.tag) return b;
      if (b.child) b.child["return"] = b, b = b.child;else {
        if (b === a) break;

        for (; !b.sibling;) {
          if (!b["return"] || b["return"] === a) return null;
          b = b["return"];
        }

        b.sibling["return"] = b["return"];
        b = b.sibling;
      }
    }

    return null;
  }

  function of(a) {
    a = Ad(a);
    if (!a) return null;

    for (var b = a;;) {
      if (5 === b.tag || 6 === b.tag) return b;
      if (b.child && 4 !== b.tag) b.child["return"] = b, b = b.child;else {
        if (b === a) break;

        for (; !b.sibling;) {
          if (!b["return"] || b["return"] === a) return null;
          b = b["return"];
        }

        b.sibling["return"] = b["return"];
        b = b.sibling;
      }
    }

    return null;
  }

  function pf(a) {
    var b = a.targetInst;

    do {
      if (!b) {
        a.ancestors.push(b);
        break;
      }

      var c;

      for (c = b; c["return"];) {
        c = c["return"];
      }

      c = 3 !== c.tag ? null : c.stateNode.containerInfo;
      if (!c) break;
      a.ancestors.push(b);
      b = Y(c);
    } while (b);

    for (c = 0; c < a.ancestors.length; c++) {
      b = a.ancestors[c], mb(a.topLevelType, b, a.nativeEvent, Vb(a.nativeEvent));
    }
  }

  function Xb(a) {
    Oa = !!a;
  }

  function p(a, b, c) {
    return c ? Bd.listen(c, b, Yb.bind(null, a)) : null;
  }

  function V(a, b, c) {
    return c ? Bd.capture(c, b, Yb.bind(null, a)) : null;
  }

  function Yb(a, b) {
    if (Oa) {
      var c = Vb(b);
      c = Y(c);
      null === c || "number" !== typeof c.tag || 2 === Na(c) || (c = null);

      if (nb.length) {
        var d = nb.pop();
        d.topLevelType = a;
        d.nativeEvent = b;
        d.targetInst = c;
        a = d;
      } else a = {
        topLevelType: a,
        nativeEvent: b,
        targetInst: c,
        ancestors: []
      };

      try {
        Sb(pf, a);
      } finally {
        a.topLevelType = null, a.nativeEvent = null, a.targetInst = null, a.ancestors.length = 0, 10 > nb.length && nb.push(a);
      }
    }
  }

  function ob(a, b) {
    var c = {};
    c[a.toLowerCase()] = b.toLowerCase();
    c["Webkit" + a] = "webkit" + b;
    c["Moz" + a] = "moz" + b;
    c["ms" + a] = "MS" + b;
    c["O" + a] = "o" + b.toLowerCase();
    return c;
  }

  function pb(a) {
    if (Zb[a]) return Zb[a];
    if (!Z[a]) return a;
    var b = Z[a],
        c;

    for (c in b) {
      if (b.hasOwnProperty(c) && c in Cd) return Zb[a] = b[c];
    }

    return "";
  }

  function Dd(a) {
    Object.prototype.hasOwnProperty.call(a, qb) || (a[qb] = qf++, Ed[a[qb]] = {});
    return Ed[a[qb]];
  }

  function Fd(a, b) {
    return a === b ? 0 !== a || 0 !== b || 1 / a === 1 / b : a !== a && b !== b;
  }

  function Gd(a, b) {
    return a && b ? a === b ? !0 : Hd(a) ? !1 : Hd(b) ? Gd(a, b.parentNode) : "contains" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : !1 : !1;
  }

  function Id(a) {
    for (; a && a.firstChild;) {
      a = a.firstChild;
    }

    return a;
  }

  function Jd(a, b) {
    var c = Id(a);
    a = 0;

    for (var d; c;) {
      if (3 === c.nodeType) {
        d = a + c.textContent.length;
        if (a <= b && d >= b) return {
          node: c,
          offset: b - a
        };
        a = d;
      }

      a: {
        for (; c;) {
          if (c.nextSibling) {
            c = c.nextSibling;
            break a;
          }

          c = c.parentNode;
        }

        c = void 0;
      }

      c = Id(c);
    }
  }

  function $b(a) {
    var b = a && a.nodeName && a.nodeName.toLowerCase();
    return b && ("input" === b && "text" === a.type || "textarea" === b || "true" === a.contentEditable);
  }

  function Kd(a, b) {
    if (ac || null == ka || ka !== bc()) return null;
    var c = ka;
    "selectionStart" in c && $b(c) ? c = {
      start: c.selectionStart,
      end: c.selectionEnd
    } : window.getSelection ? (c = window.getSelection(), c = {
      anchorNode: c.anchorNode,
      anchorOffset: c.anchorOffset,
      focusNode: c.focusNode,
      focusOffset: c.focusOffset
    }) : c = void 0;
    return Pa && cc(Pa, c) ? null : (Pa = c, a = n.getPooled(Ld.select, dc, a, b), a.type = "select", a.target = ka, za(a), a);
  }

  function Md(a, b, c, d) {
    return n.call(this, a, b, c, d);
  }

  function Nd(a, b, c, d) {
    return n.call(this, a, b, c, d);
  }

  function Od(a, b, c, d) {
    return n.call(this, a, b, c, d);
  }

  function rb(a) {
    var b = a.keyCode;
    "charCode" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;
    return 32 <= a || 13 === a ? a : 0;
  }

  function Pd(a, b, c, d) {
    return n.call(this, a, b, c, d);
  }

  function Qd(a, b, c, d) {
    return n.call(this, a, b, c, d);
  }

  function Rd(a, b, c, d) {
    return n.call(this, a, b, c, d);
  }

  function Sd(a, b, c, d) {
    return n.call(this, a, b, c, d);
  }

  function Td(a, b, c, d) {
    return n.call(this, a, b, c, d);
  }

  function I(a, b) {
    0 > ta || (a.current = sb[ta], sb[ta] = null, ta--);
  }

  function N(a, b, c) {
    ta++;
    sb[ta] = a.current;
    a.current = b;
  }

  function Qa(a) {
    return Ra(a) ? tb : la.current;
  }

  function Sa(a, b) {
    var c = a.type.contextTypes;
    if (!c) return ma;
    var d = a.stateNode;
    if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;
    var e = {},
        f;

    for (f in c) {
      e[f] = b[f];
    }

    d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);
    return e;
  }

  function Ra(a) {
    return 2 === a.tag && null != a.type.childContextTypes;
  }

  function Ud(a) {
    Ra(a) && (I(J, a), I(la, a));
  }

  function Vd(a, b, c) {
    null != la.cursor ? l("168") : void 0;
    N(la, b, a);
    N(J, c, a);
  }

  function Wd(a, b) {
    var c = a.stateNode,
        d = a.type.childContextTypes;
    if ("function" !== typeof c.getChildContext) return b;
    c = c.getChildContext();

    for (var e in c) {
      e in d ? void 0 : l("108", Ma(a) || "Unknown", e);
    }

    return B({}, b, c);
  }

  function ub(a) {
    if (!Ra(a)) return !1;
    var b = a.stateNode;
    b = b && b.__reactInternalMemoizedMergedChildContext || ma;
    tb = la.current;
    N(la, b, a);
    N(J, J.current, a);
    return !0;
  }

  function Xd(a, b) {
    var c = a.stateNode;
    c ? void 0 : l("169");

    if (b) {
      var d = Wd(a, tb);
      c.__reactInternalMemoizedMergedChildContext = d;
      I(J, a);
      I(la, a);
      N(la, d, a);
    } else I(J, a);

    N(J, b, a);
  }

  function Q(a, b, c) {
    this.tag = a;
    this.key = b;
    this.stateNode = this.type = null;
    this.sibling = this.child = this["return"] = null;
    this.index = 0;
    this.memoizedState = this.updateQueue = this.memoizedProps = this.pendingProps = this.ref = null;
    this.internalContextTag = c;
    this.effectTag = 0;
    this.lastEffect = this.firstEffect = this.nextEffect = null;
    this.expirationTime = 0;
    this.alternate = null;
  }

  function vb(a, b, c) {
    var d = a.alternate;
    null === d ? (d = new Q(a.tag, a.key, a.internalContextTag), d.type = a.type, d.stateNode = a.stateNode, d.alternate = a, a.alternate = d) : (d.effectTag = 0, d.nextEffect = null, d.firstEffect = null, d.lastEffect = null);
    d.expirationTime = c;
    d.pendingProps = b;
    d.child = a.child;
    d.memoizedProps = a.memoizedProps;
    d.memoizedState = a.memoizedState;
    d.updateQueue = a.updateQueue;
    d.sibling = a.sibling;
    d.index = a.index;
    d.ref = a.ref;
    return d;
  }

  function ec(a, b, c) {
    var d = void 0,
        e = a.type,
        f = a.key;
    "function" === typeof e ? (d = e.prototype && e.prototype.isReactComponent ? new Q(2, f, b) : new Q(0, f, b), d.type = e, d.pendingProps = a.props) : "string" === typeof e ? (d = new Q(5, f, b), d.type = e, d.pendingProps = a.props) : "object" === _typeof(e) && null !== e && "number" === typeof e.tag ? (d = e, d.pendingProps = a.props) : l("130", null == e ? e : _typeof(e), "");
    d.expirationTime = c;
    return d;
  }

  function wb(a, b, c, d) {
    b = new Q(10, d, b);
    b.pendingProps = a;
    b.expirationTime = c;
    return b;
  }

  function fc(a, b, c) {
    b = new Q(6, null, b);
    b.pendingProps = a;
    b.expirationTime = c;
    return b;
  }

  function gc(a, b, c) {
    b = new Q(7, a.key, b);
    b.type = a.handler;
    b.pendingProps = a;
    b.expirationTime = c;
    return b;
  }

  function hc(a, b, c) {
    a = new Q(9, null, b);
    a.expirationTime = c;
    return a;
  }

  function ic(a, b, c) {
    b = new Q(4, a.key, b);
    b.pendingProps = a.children || [];
    b.expirationTime = c;
    b.stateNode = {
      containerInfo: a.containerInfo,
      pendingChildren: null,
      implementation: a.implementation
    };
    return b;
  }

  function Yd(a) {
    return function (b) {
      try {
        return a(b);
      } catch (c) {}
    };
  }

  function rf(a) {
    if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return !1;
    var b = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (b.isDisabled || !b.supportsFiber) return !0;

    try {
      var c = b.inject(a);
      jc = Yd(function (a) {
        return b.onCommitFiberRoot(c, a);
      });
      kc = Yd(function (a) {
        return b.onCommitFiberUnmount(c, a);
      });
    } catch (d) {}

    return !0;
  }

  function Zd(a) {
    "function" === typeof jc && jc(a);
  }

  function $d(a) {
    "function" === typeof kc && kc(a);
  }

  function ae(a) {
    return {
      baseState: a,
      expirationTime: 0,
      first: null,
      last: null,
      callbackList: null,
      hasForceUpdate: !1,
      isInitialized: !1
    };
  }

  function xb(a, b) {
    null === a.last ? a.first = a.last = b : (a.last.next = b, a.last = b);
    if (0 === a.expirationTime || a.expirationTime > b.expirationTime) a.expirationTime = b.expirationTime;
  }

  function yb(a, b) {
    var c = a.alternate,
        d = a.updateQueue;
    null === d && (d = a.updateQueue = ae(null));
    null !== c ? (a = c.updateQueue, null === a && (a = c.updateQueue = ae(null))) : a = null;
    a = a !== d ? a : null;
    null === a ? xb(d, b) : null === d.last || null === a.last ? (xb(d, b), xb(a, b)) : (xb(d, b), a.last = b);
  }

  function be(a, b, c, d) {
    a = a.partialState;
    return "function" === typeof a ? a.call(b, c, d) : a;
  }

  function lc(a, b, c, d, e, f) {
    null !== a && a.updateQueue === c && (c = b.updateQueue = {
      baseState: c.baseState,
      expirationTime: c.expirationTime,
      first: c.first,
      last: c.last,
      isInitialized: c.isInitialized,
      callbackList: null,
      hasForceUpdate: !1
    });
    c.expirationTime = 0;
    c.isInitialized ? a = c.baseState : (a = c.baseState = b.memoizedState, c.isInitialized = !0);

    for (var g = !0, k = c.first, h = !1; null !== k;) {
      var l = k.expirationTime;

      if (l > f) {
        var A = c.expirationTime;
        if (0 === A || A > l) c.expirationTime = l;
        h || (h = !0, c.baseState = a);
      } else {
        h || (c.first = k.next, null === c.first && (c.last = null));
        if (k.isReplace) a = be(k, d, a, e), g = !0;else if (l = be(k, d, a, e)) a = g ? B({}, a, l) : B(a, l), g = !1;
        k.isForced && (c.hasForceUpdate = !0);
        null !== k.callback && (l = c.callbackList, null === l && (l = c.callbackList = []), l.push(k));
      }

      k = k.next;
    }

    null !== c.callbackList ? b.effectTag |= 32 : null !== c.first || c.hasForceUpdate || (b.updateQueue = null);
    h || (c.baseState = a);
    return a;
  }

  function ce(a, b) {
    var c = a.callbackList;
    if (null !== c) for (a.callbackList = null, a = 0; a < c.length; a++) {
      var d = c[a],
          e = d.callback;
      d.callback = null;
      "function" !== typeof e ? l("191", e) : void 0;
      e.call(b);
    }
  }

  function sf(a, b, c) {
    var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
    return {
      $$typeof: Ta,
      key: null == d ? null : "" + d,
      children: a,
      containerInfo: b,
      implementation: c
    };
  }

  function Ua(a) {
    if (null === a || "undefined" === typeof a) return null;
    a = de && a[de] || a["@@iterator"];
    return "function" === typeof a ? a : null;
  }

  function Va(a, b) {
    var c = b.ref;

    if (null !== c && "function" !== typeof c) {
      if (b._owner) {
        b = b._owner;
        var d = void 0;
        b && (2 !== b.tag ? l("110") : void 0, d = b.stateNode);
        d ? void 0 : l("147", c);
        var e = "" + c;
        if (null !== a && null !== a.ref && a.ref._stringRef === e) return a.ref;

        a = function a(_a) {
          var b = d.refs === ma ? d.refs = {} : d.refs;
          null === _a ? delete b[e] : b[e] = _a;
        };

        a._stringRef = e;
        return a;
      }

      "string" !== typeof c ? l("148") : void 0;
      b._owner ? void 0 : l("149", c);
    }

    return c;
  }

  function zb(a, b) {
    "textarea" !== a.type && l("31", "[object Object]" === Object.prototype.toString.call(b) ? "object with keys {" + Object.keys(b).join(", ") + "}" : b, "");
  }

  function mc(a, b) {
    function c(c, d) {
      if (b) {
        if (!a) {
          if (null === d.alternate) return;
          d = d.alternate;
        }

        var q = c.lastEffect;
        null !== q ? (q.nextEffect = d, c.lastEffect = d) : c.firstEffect = c.lastEffect = d;
        d.nextEffect = null;
        d.effectTag = 8;
      }
    }

    function d(a, d) {
      if (!b) return null;

      for (; null !== d;) {
        c(a, d), d = d.sibling;
      }

      return null;
    }

    function e(a, b) {
      for (a = new Map(); null !== b;) {
        null !== b.key ? a.set(b.key, b) : a.set(b.index, b), b = b.sibling;
      }

      return a;
    }

    function f(b, c, d) {
      if (a) return b = vb(b, c, d), b.index = 0, b.sibling = null, b;
      b.expirationTime = d;
      b.effectTag = 0;
      b.index = 0;
      b.sibling = null;
      b.pendingProps = c;
      return b;
    }

    function g(a, c, d) {
      a.index = d;
      if (!b) return c;
      d = a.alternate;
      if (null !== d) return d = d.index, d < c ? (a.effectTag = 2, c) : d;
      a.effectTag = 2;
      return c;
    }

    function k(a) {
      b && null === a.alternate && (a.effectTag = 2);
      return a;
    }

    function h(a, b, c, d) {
      if (null === b || 6 !== b.tag) return b = fc(c, a.internalContextTag, d), b["return"] = a, b;
      b = f(b, c, d);
      b["return"] = a;
      return b;
    }

    function Fa(a, b, c, d) {
      if (null !== b && b.type === c.type) return d = f(b, c.props, d), d.ref = Va(b, c), d["return"] = a, d;
      d = ec(c, a.internalContextTag, d);
      d.ref = Va(b, c);
      d["return"] = a;
      return d;
    }

    function A(a, b, c, d) {
      if (null === b || 7 !== b.tag) return b = gc(c, a.internalContextTag, d), b["return"] = a, b;
      b = f(b, c, d);
      b["return"] = a;
      return b;
    }

    function D(a, b, c, d) {
      if (null === b || 9 !== b.tag) return b = hc(c, a.internalContextTag, d), b.type = c.value, b["return"] = a, b;
      b = f(b, null, d);
      b.type = c.value;
      b["return"] = a;
      return b;
    }

    function t(a, b, c, d) {
      if (null === b || 4 !== b.tag || b.stateNode.containerInfo !== c.containerInfo || b.stateNode.implementation !== c.implementation) return b = ic(c, a.internalContextTag, d), b["return"] = a, b;
      b = f(b, c.children || [], d);
      b["return"] = a;
      return b;
    }

    function K(a, b, c, d, e) {
      if (null === b || 10 !== b.tag) return b = wb(c, a.internalContextTag, d, e), b["return"] = a, b;
      b = f(b, c, d);
      b["return"] = a;
      return b;
    }

    function L(a, b, c) {
      if ("string" === typeof b || "number" === typeof b) return b = fc("" + b, a.internalContextTag, c), b["return"] = a, b;

      if ("object" === _typeof(b) && null !== b) {
        switch (b.$$typeof) {
          case Wa:
            if (b.type === ua) return b = wb(b.props.children, a.internalContextTag, c, b.key), b["return"] = a, b;
            c = ec(b, a.internalContextTag, c);
            c.ref = Va(null, b);
            c["return"] = a;
            return c;

          case Xa:
            return b = gc(b, a.internalContextTag, c), b["return"] = a, b;

          case Ya:
            return c = hc(b, a.internalContextTag, c), c.type = b.value, c["return"] = a, c;

          case Ta:
            return b = ic(b, a.internalContextTag, c), b["return"] = a, b;
        }

        if (Ab(b) || Ua(b)) return b = wb(b, a.internalContextTag, c, null), b["return"] = a, b;
        zb(a, b);
      }

      return null;
    }

    function aa(a, b, c, d) {
      var e = null !== b ? b.key : null;
      if ("string" === typeof c || "number" === typeof c) return null !== e ? null : h(a, b, "" + c, d);

      if ("object" === _typeof(c) && null !== c) {
        switch (c.$$typeof) {
          case Wa:
            return c.key === e ? c.type === ua ? K(a, b, c.props.children, d, e) : Fa(a, b, c, d) : null;

          case Xa:
            return c.key === e ? A(a, b, c, d) : null;

          case Ya:
            return null === e ? D(a, b, c, d) : null;

          case Ta:
            return c.key === e ? t(a, b, c, d) : null;
        }

        if (Ab(c) || Ua(c)) return null !== e ? null : K(a, b, c, d, null);
        zb(a, c);
      }

      return null;
    }

    function ee(a, b, c, d, e) {
      if ("string" === typeof d || "number" === typeof d) return a = a.get(c) || null, h(b, a, "" + d, e);

      if ("object" === _typeof(d) && null !== d) {
        switch (d.$$typeof) {
          case Wa:
            return a = a.get(null === d.key ? c : d.key) || null, d.type === ua ? K(b, a, d.props.children, e, d.key) : Fa(b, a, d, e);

          case Xa:
            return a = a.get(null === d.key ? c : d.key) || null, A(b, a, d, e);

          case Ya:
            return a = a.get(c) || null, D(b, a, d, e);

          case Ta:
            return a = a.get(null === d.key ? c : d.key) || null, t(b, a, d, e);
        }

        if (Ab(d) || Ua(d)) return a = a.get(c) || null, K(b, a, d, e, null);
        zb(b, d);
      }

      return null;
    }

    function p(a, f, y, k) {
      for (var q = null, h = null, m = f, v = f = 0, l = null; null !== m && v < y.length; v++) {
        m.index > v ? (l = m, m = null) : l = m.sibling;
        var x = aa(a, m, y[v], k);

        if (null === x) {
          null === m && (m = l);
          break;
        }

        b && m && null === x.alternate && c(a, m);
        f = g(x, f, v);
        null === h ? q = x : h.sibling = x;
        h = x;
        m = l;
      }

      if (v === y.length) return d(a, m), q;

      if (null === m) {
        for (; v < y.length; v++) {
          if (m = L(a, y[v], k)) f = g(m, f, v), null === h ? q = m : h.sibling = m, h = m;
        }

        return q;
      }

      for (m = e(a, m); v < y.length; v++) {
        if (l = ee(m, a, v, y[v], k)) {
          if (b && null !== l.alternate) m["delete"](null === l.key ? v : l.key);
          f = g(l, f, v);
          null === h ? q = l : h.sibling = l;
          h = l;
        }
      }

      b && m.forEach(function (b) {
        return c(a, b);
      });
      return q;
    }

    function n(a, f, y, k) {
      var q = Ua(y);
      "function" !== typeof q ? l("150") : void 0;
      y = q.call(y);
      null == y ? l("151") : void 0;

      for (var h = q = null, m = f, v = f = 0, Fa = null, x = y.next(); null !== m && !x.done; v++, x = y.next()) {
        m.index > v ? (Fa = m, m = null) : Fa = m.sibling;
        var z = aa(a, m, x.value, k);

        if (null === z) {
          m || (m = Fa);
          break;
        }

        b && m && null === z.alternate && c(a, m);
        f = g(z, f, v);
        null === h ? q = z : h.sibling = z;
        h = z;
        m = Fa;
      }

      if (x.done) return d(a, m), q;

      if (null === m) {
        for (; !x.done; v++, x = y.next()) {
          x = L(a, x.value, k), null !== x && (f = g(x, f, v), null === h ? q = x : h.sibling = x, h = x);
        }

        return q;
      }

      for (m = e(a, m); !x.done; v++, x = y.next()) {
        if (x = ee(m, a, v, x.value, k), null !== x) {
          if (b && null !== x.alternate) m["delete"](null === x.key ? v : x.key);
          f = g(x, f, v);
          null === h ? q = x : h.sibling = x;
          h = x;
        }
      }

      b && m.forEach(function (b) {
        return c(a, b);
      });
      return q;
    }

    return function (a, b, e, g) {
      var h = "object" === _typeof(e) && null !== e;
      if (h) switch (e.$$typeof) {
        case Wa:
          a: {
            var q = e.key;

            for (h = b; null !== h;) {
              if (h.key === q) {
                if (10 === h.tag ? e.type === ua : h.type === e.type) {
                  d(a, h.sibling);
                  b = f(h, e.type === ua ? e.props.children : e.props, g);
                  b.ref = Va(h, e);
                  b["return"] = a;
                  a = b;
                  break a;
                } else {
                  d(a, h);
                  break;
                }
              } else c(a, h);
              h = h.sibling;
            }

            e.type === ua ? (e = wb(e.props.children, a.internalContextTag, g, e.key), e["return"] = a, a = e) : (g = ec(e, a.internalContextTag, g), g.ref = Va(b, e), g["return"] = a, a = g);
          }

          return k(a);

        case Xa:
          a: {
            for (h = e.key; null !== b;) {
              if (b.key === h) {
                if (7 === b.tag) {
                  d(a, b.sibling);
                  e = f(b, e, g);
                  e["return"] = a;
                  a = e;
                  break a;
                } else {
                  d(a, b);
                  break;
                }
              } else c(a, b);
              b = b.sibling;
            }

            e = gc(e, a.internalContextTag, g);
            e["return"] = a;
            a = e;
          }

          return k(a);

        case Ya:
          a: {
            if (null !== b) if (9 === b.tag) {
              d(a, b.sibling);
              b = f(b, null, g);
              b.type = e.value;
              b["return"] = a;
              a = b;
              break a;
            } else d(a, b);
            b = hc(e, a.internalContextTag, g);
            b.type = e.value;
            b["return"] = a;
            a = b;
          }

          return k(a);

        case Ta:
          a: {
            for (h = e.key; null !== b;) {
              if (b.key === h) {
                if (4 === b.tag && b.stateNode.containerInfo === e.containerInfo && b.stateNode.implementation === e.implementation) {
                  d(a, b.sibling);
                  e = f(b, e.children || [], g);
                  e["return"] = a;
                  a = e;
                  break a;
                } else {
                  d(a, b);
                  break;
                }
              } else c(a, b);
              b = b.sibling;
            }

            e = ic(e, a.internalContextTag, g);
            e["return"] = a;
            a = e;
          }

          return k(a);
      }
      if ("string" === typeof e || "number" === typeof e) return e = "" + e, null !== b && 6 === b.tag ? (d(a, b.sibling), e = f(b, e, g)) : (d(a, b), e = fc(e, a.internalContextTag, g)), e["return"] = a, a = e, k(a);
      if (Ab(e)) return p(a, b, e, g);
      if (Ua(e)) return n(a, b, e, g);
      h && zb(a, e);
      if ("undefined" === typeof e) switch (a.tag) {
        case 2:
        case 1:
          e = a.type, l("152", e.displayName || e.name || "Component");
      }
      return d(a, b);
    };
  }

  function uf(a) {
    if (fe.hasOwnProperty(a)) return !0;
    if (ge.hasOwnProperty(a)) return !1;
    if (vf.test(a)) return fe[a] = !0;
    ge[a] = !0;
    return !1;
  }

  function nc(a, b, c) {
    var d = Jb(b);

    if (d && Qc(b, c)) {
      var e = d.mutationMethod;
      e ? e(a, c) : null == c || d.hasBooleanValue && !c || d.hasNumericValue && isNaN(c) || d.hasPositiveNumericValue && 1 > c || d.hasOverloadedBooleanValue && !1 === c ? he(a, b) : d.mustUseProperty ? a[d.propertyName] = c : (b = d.attributeName, (e = d.attributeNamespace) ? a.setAttributeNS(e, b, "" + c) : d.hasBooleanValue || d.hasOverloadedBooleanValue && !0 === c ? a.setAttribute(b, "") : a.setAttribute(b, "" + c));
    } else oc(a, b, Qc(b, c) ? c : null);
  }

  function oc(a, b, c) {
    uf(b) && (null == c ? a.removeAttribute(b) : a.setAttribute(b, "" + c));
  }

  function he(a, b) {
    var c = Jb(b);
    c ? (b = c.mutationMethod) ? b(a, void 0) : c.mustUseProperty ? a[c.propertyName] = c.hasBooleanValue ? !1 : "" : a.removeAttribute(c.attributeName) : a.removeAttribute(b);
  }

  function pc(a, b) {
    var c = b.value,
        d = b.checked;
    return B({
      type: void 0,
      step: void 0,
      min: void 0,
      max: void 0
    }, b, {
      defaultChecked: void 0,
      defaultValue: void 0,
      value: null != c ? c : a._wrapperState.initialValue,
      checked: null != d ? d : a._wrapperState.initialChecked
    });
  }

  function ie(a, b) {
    var c = b.defaultValue;
    a._wrapperState = {
      initialChecked: null != b.checked ? b.checked : b.defaultChecked,
      initialValue: null != b.value ? b.value : c,
      controlled: "checkbox" === b.type || "radio" === b.type ? null != b.checked : null != b.value
    };
  }

  function qc(a, b) {
    var c = b.checked;
    null != c && nc(a, "checked", c || !1);
    c = b.value;
    if (null != c) {
      if (0 === c && "" === a.value) a.value = "0";else if ("number" === b.type) {
        if (b = parseFloat(a.value) || 0, c != b || c == b && a.value != c) a.value = "" + c;
      } else a.value !== "" + c && (a.value = "" + c);
    } else null == b.value && null != b.defaultValue && a.defaultValue !== "" + b.defaultValue && (a.defaultValue = "" + b.defaultValue), null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);
  }

  function je(a, b) {
    switch (b.type) {
      case "submit":
      case "reset":
        break;

      case "color":
      case "date":
      case "datetime":
      case "datetime-local":
      case "month":
      case "time":
      case "week":
        a.value = "";
        a.value = a.defaultValue;
        break;

      default:
        a.value = a.value;
    }

    b = a.name;
    "" !== b && (a.name = "");
    a.defaultChecked = !a.defaultChecked;
    a.defaultChecked = !a.defaultChecked;
    "" !== b && (a.name = b);
  }

  function wf(a) {
    var b = "";
    ea.Children.forEach(a, function (a) {
      null == a || "string" !== typeof a && "number" !== typeof a || (b += a);
    });
    return b;
  }

  function rc(a, b) {
    a = B({
      children: void 0
    }, b);
    if (b = wf(b.children)) a.children = b;
    return a;
  }

  function W(a, b, c, d) {
    a = a.options;

    if (b) {
      b = {};

      for (var e = 0; e < c.length; e++) {
        b["$" + c[e]] = !0;
      }

      for (c = 0; c < a.length; c++) {
        e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = !0);
      }
    } else {
      c = "" + c;
      b = null;

      for (e = 0; e < a.length; e++) {
        if (a[e].value === c) {
          a[e].selected = !0;
          d && (a[e].defaultSelected = !0);
          return;
        }

        null !== b || a[e].disabled || (b = a[e]);
      }

      null !== b && (b.selected = !0);
    }
  }

  function ke(a, b) {
    var c = b.value;
    a._wrapperState = {
      initialValue: null != c ? c : b.defaultValue,
      wasMultiple: !!b.multiple
    };
  }

  function sc(a, b) {
    null != b.dangerouslySetInnerHTML ? l("91") : void 0;
    return B({}, b, {
      value: void 0,
      defaultValue: void 0,
      children: "" + a._wrapperState.initialValue
    });
  }

  function le(a, b) {
    var c = b.value,
        d = c;
    null == c && (c = b.defaultValue, b = b.children, null != b && (null != c ? l("92") : void 0, Array.isArray(b) && (1 >= b.length ? void 0 : l("93"), b = b[0]), c = "" + b), null == c && (c = ""), d = c);
    a._wrapperState = {
      initialValue: "" + d
    };
  }

  function me(a, b) {
    var c = b.value;
    null != c && (c = "" + c, c !== a.value && (a.value = c), null == b.defaultValue && (a.defaultValue = c));
    null != b.defaultValue && (a.defaultValue = b.defaultValue);
  }

  function ne(a) {
    switch (a) {
      case "svg":
        return "http://www.w3.org/2000/svg";

      case "math":
        return "http://www.w3.org/1998/Math/MathML";

      default:
        return "http://www.w3.org/1999/xhtml";
    }
  }

  function tc(a, b) {
    return null == a || "http://www.w3.org/1999/xhtml" === a ? ne(b) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b ? "http://www.w3.org/1999/xhtml" : a;
  }

  function oe(a, b, c) {
    a = a.style;

    for (var d in b) {
      if (b.hasOwnProperty(d)) {
        c = 0 === d.indexOf("--");
        var e = d;
        var f = b[d];
        e = null == f || "boolean" === typeof f || "" === f ? "" : c || "number" !== typeof f || 0 === f || Za.hasOwnProperty(e) && Za[e] ? ("" + f).trim() : f + "px";
        "float" === d && (d = "cssFloat");
        c ? a.setProperty(d, e) : a[d] = e;
      }
    }
  }

  function uc(a, b, c) {
    b && (xf[a] && (null != b.children || null != b.dangerouslySetInnerHTML ? l("137", a, c()) : void 0), null != b.dangerouslySetInnerHTML && (null != b.children ? l("60") : void 0, "object" === _typeof(b.dangerouslySetInnerHTML) && "__html" in b.dangerouslySetInnerHTML ? void 0 : l("61")), null != b.style && "object" !== _typeof(b.style) ? l("62", c()) : void 0);
  }

  function vc(a, b) {
    if (-1 === a.indexOf("-")) return "string" === typeof b.is;

    switch (a) {
      case "annotation-xml":
      case "color-profile":
      case "font-face":
      case "font-face-src":
      case "font-face-uri":
      case "font-face-format":
      case "font-face-name":
      case "missing-glyph":
        return !1;

      default:
        return !0;
    }
  }

  function ba(a, b) {
    a = 9 === a.nodeType || 11 === a.nodeType ? a : a.ownerDocument;
    var c = Dd(a);
    b = hb[b];

    for (var d = 0; d < b.length; d++) {
      var e = b[d];
      c.hasOwnProperty(e) && c[e] || ("topWheel" === e ? Ea("wheel") ? p("topWheel", "wheel", a) : Ea("mousewheel") ? p("topWheel", "mousewheel", a) : p("topWheel", "DOMMouseScroll", a) : "topScroll" === e ? V("topScroll", "scroll", a) : "topFocus" === e || "topBlur" === e ? (V("topFocus", "focus", a), V("topBlur", "blur", a), c.topBlur = !0, c.topFocus = !0) : "topCancel" === e ? (Ea("cancel", !0) && V("topCancel", "cancel", a), c.topCancel = !0) : "topClose" === e ? (Ea("close", !0) && V("topClose", "close", a), c.topClose = !0) : pe.hasOwnProperty(e) && p(e, pe[e], a), c[e] = !0);
    }
  }

  function qe(a, b, c, d) {
    c = 9 === c.nodeType ? c : c.ownerDocument;
    "http://www.w3.org/1999/xhtml" === d && (d = ne(a));
    "http://www.w3.org/1999/xhtml" === d ? "script" === a ? (a = c.createElement("div"), a.innerHTML = "\x3cscript\x3e\x3c/script\x3e", a = a.removeChild(a.firstChild)) : a = "string" === typeof b.is ? c.createElement(a, {
      is: b.is
    }) : c.createElement(a) : a = c.createElementNS(d, a);
    return a;
  }

  function re(a, b) {
    return (9 === b.nodeType ? b : b.ownerDocument).createTextNode(a);
  }

  function se(a, b, c, d) {
    var e = vc(b, c);

    switch (b) {
      case "iframe":
      case "object":
        p("topLoad", "load", a);
        var f = c;
        break;

      case "video":
      case "audio":
        for (f in R) {
          R.hasOwnProperty(f) && p(f, R[f], a);
        }

        f = c;
        break;

      case "source":
        p("topError", "error", a);
        f = c;
        break;

      case "img":
      case "image":
        p("topError", "error", a);
        p("topLoad", "load", a);
        f = c;
        break;

      case "form":
        p("topReset", "reset", a);
        p("topSubmit", "submit", a);
        f = c;
        break;

      case "details":
        p("topToggle", "toggle", a);
        f = c;
        break;

      case "input":
        ie(a, c);
        f = pc(a, c);
        p("topInvalid", "invalid", a);
        ba(d, "onChange");
        break;

      case "option":
        f = rc(a, c);
        break;

      case "select":
        ke(a, c);
        f = B({}, c, {
          value: void 0
        });
        p("topInvalid", "invalid", a);
        ba(d, "onChange");
        break;

      case "textarea":
        le(a, c);
        f = sc(a, c);
        p("topInvalid", "invalid", a);
        ba(d, "onChange");
        break;

      default:
        f = c;
    }

    uc(b, f, $a);
    var g = f,
        k;

    for (k in g) {
      if (g.hasOwnProperty(k)) {
        var h = g[k];
        "style" === k ? oe(a, h, $a) : "dangerouslySetInnerHTML" === k ? (h = h ? h.__html : void 0, null != h && wc(a, h)) : "children" === k ? "string" === typeof h ? ("textarea" !== b || "" !== h) && xc(a, h) : "number" === typeof h && xc(a, "" + h) : "suppressContentEditableWarning" !== k && "suppressHydrationWarning" !== k && "autoFocus" !== k && (ra.hasOwnProperty(k) ? null != h && ba(d, k) : e ? oc(a, k, h) : null != h && nc(a, k, h));
      }
    }

    switch (b) {
      case "input":
        kb(a);
        je(a, c);
        break;

      case "textarea":
        kb(a);
        c = a.textContent;
        c === a._wrapperState.initialValue && (a.value = c);
        break;

      case "option":
        null != c.value && a.setAttribute("value", c.value);
        break;

      case "select":
        a.multiple = !!c.multiple;
        b = c.value;
        null != b ? W(a, !!c.multiple, b, !1) : null != c.defaultValue && W(a, !!c.multiple, c.defaultValue, !0);
        break;

      default:
        "function" === typeof f.onClick && (a.onclick = E);
    }
  }

  function te(a, b, c, d, e) {
    var f = null;

    switch (b) {
      case "input":
        c = pc(a, c);
        d = pc(a, d);
        f = [];
        break;

      case "option":
        c = rc(a, c);
        d = rc(a, d);
        f = [];
        break;

      case "select":
        c = B({}, c, {
          value: void 0
        });
        d = B({}, d, {
          value: void 0
        });
        f = [];
        break;

      case "textarea":
        c = sc(a, c);
        d = sc(a, d);
        f = [];
        break;

      default:
        "function" !== typeof c.onClick && "function" === typeof d.onClick && (a.onclick = E);
    }

    uc(b, d, $a);
    var g, k;
    a = null;

    for (g in c) {
      if (!d.hasOwnProperty(g) && c.hasOwnProperty(g) && null != c[g]) if ("style" === g) for (k in b = c[g], b) {
        b.hasOwnProperty(k) && (a || (a = {}), a[k] = "");
      } else "dangerouslySetInnerHTML" !== g && "children" !== g && "suppressContentEditableWarning" !== g && "suppressHydrationWarning" !== g && "autoFocus" !== g && (ra.hasOwnProperty(g) ? f || (f = []) : (f = f || []).push(g, null));
    }

    for (g in d) {
      var h = d[g];
      b = null != c ? c[g] : void 0;
      if (d.hasOwnProperty(g) && h !== b && (null != h || null != b)) if ("style" === g) {
        if (b) {
          for (k in b) {
            !b.hasOwnProperty(k) || h && h.hasOwnProperty(k) || (a || (a = {}), a[k] = "");
          }

          for (k in h) {
            h.hasOwnProperty(k) && b[k] !== h[k] && (a || (a = {}), a[k] = h[k]);
          }
        } else a || (f || (f = []), f.push(g, a)), a = h;
      } else "dangerouslySetInnerHTML" === g ? (h = h ? h.__html : void 0, b = b ? b.__html : void 0, null != h && b !== h && (f = f || []).push(g, "" + h)) : "children" === g ? b === h || "string" !== typeof h && "number" !== typeof h || (f = f || []).push(g, "" + h) : "suppressContentEditableWarning" !== g && "suppressHydrationWarning" !== g && (ra.hasOwnProperty(g) ? (null != h && ba(e, g), f || b === h || (f = [])) : (f = f || []).push(g, h));
    }

    a && (f = f || []).push("style", a);
    return f;
  }

  function ue(a, b, c, d, e) {
    vc(c, d);
    d = vc(c, e);

    for (var f = 0; f < b.length; f += 2) {
      var g = b[f],
          k = b[f + 1];
      "style" === g ? oe(a, k, $a) : "dangerouslySetInnerHTML" === g ? wc(a, k) : "children" === g ? xc(a, k) : d ? null != k ? oc(a, g, k) : a.removeAttribute(g) : null != k ? nc(a, g, k) : he(a, g);
    }

    switch (c) {
      case "input":
        qc(a, e);
        ud(a);
        break;

      case "textarea":
        me(a, e);
        break;

      case "select":
        a._wrapperState.initialValue = void 0, b = a._wrapperState.wasMultiple, a._wrapperState.wasMultiple = !!e.multiple, c = e.value, null != c ? W(a, !!e.multiple, c, !1) : b !== !!e.multiple && (null != e.defaultValue ? W(a, !!e.multiple, e.defaultValue, !0) : W(a, !!e.multiple, e.multiple ? [] : "", !1));
    }
  }

  function ve(a, b, c, d, e) {
    switch (b) {
      case "iframe":
      case "object":
        p("topLoad", "load", a);
        break;

      case "video":
      case "audio":
        for (var f in R) {
          R.hasOwnProperty(f) && p(f, R[f], a);
        }

        break;

      case "source":
        p("topError", "error", a);
        break;

      case "img":
      case "image":
        p("topError", "error", a);
        p("topLoad", "load", a);
        break;

      case "form":
        p("topReset", "reset", a);
        p("topSubmit", "submit", a);
        break;

      case "details":
        p("topToggle", "toggle", a);
        break;

      case "input":
        ie(a, c);
        p("topInvalid", "invalid", a);
        ba(e, "onChange");
        break;

      case "select":
        ke(a, c);
        p("topInvalid", "invalid", a);
        ba(e, "onChange");
        break;

      case "textarea":
        le(a, c), p("topInvalid", "invalid", a), ba(e, "onChange");
    }

    uc(b, c, $a);
    d = null;

    for (var g in c) {
      c.hasOwnProperty(g) && (f = c[g], "children" === g ? "string" === typeof f ? a.textContent !== f && (d = ["children", f]) : "number" === typeof f && a.textContent !== "" + f && (d = ["children", "" + f]) : ra.hasOwnProperty(g) && null != f && ba(e, g));
    }

    switch (b) {
      case "input":
        kb(a);
        je(a, c);
        break;

      case "textarea":
        kb(a);
        b = a.textContent;
        b === a._wrapperState.initialValue && (a.value = b);
        break;

      case "select":
      case "option":
        break;

      default:
        "function" === typeof c.onClick && (a.onclick = E);
    }

    return d;
  }

  function we(a, b) {
    return a.nodeValue !== b;
  }

  function yc(a) {
    return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));
  }

  function yf(a) {
    a = a ? 9 === a.nodeType ? a.documentElement : a.firstChild : null;
    return !(!a || 1 !== a.nodeType || !a.hasAttribute("data-reactroot"));
  }

  function Bb(a, b, c, d, e) {
    yc(c) ? void 0 : l("200");
    var f = c._reactRootContainer;
    if (f) F.updateContainer(b, f, a, e);else {
      d = d || yf(c);
      if (!d) for (f = void 0; f = c.lastChild;) {
        c.removeChild(f);
      }
      var g = F.createContainer(c, d);
      f = c._reactRootContainer = g;
      F.unbatchedUpdates(function () {
        F.updateContainer(b, g, a, e);
      });
    }
    return F.getPublicRootInstance(f);
  }

  function xe(a, b) {
    var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
    yc(b) ? void 0 : l("200");
    return sf(a, b, null, c);
  }

  function ye(a, b) {
    this._reactRootContainer = F.createContainer(a, b);
  }

  ea ? void 0 : l("227");

  var Rc = {
    children: !0,
    dangerouslySetInnerHTML: !0,
    defaultValue: !0,
    defaultChecked: !0,
    innerHTML: !0,
    suppressContentEditableWarning: !0,
    suppressHydrationWarning: !0,
    style: !0
  },
      ze = {
    MUST_USE_PROPERTY: 1,
    HAS_BOOLEAN_VALUE: 4,
    HAS_NUMERIC_VALUE: 8,
    HAS_POSITIVE_NUMERIC_VALUE: 24,
    HAS_OVERLOADED_BOOLEAN_VALUE: 32,
    HAS_STRING_BOOLEAN_VALUE: 64,
    injectDOMPropertyConfig: function injectDOMPropertyConfig(a) {
      var b = ze,
          c = a.Properties || {},
          d = a.DOMAttributeNamespaces || {},
          e = a.DOMAttributeNames || {};
      a = a.DOMMutationMethods || {};

      for (var f in c) {
        fb.hasOwnProperty(f) ? l("48", f) : void 0;
        var g = f.toLowerCase(),
            k = c[f];
        g = {
          attributeName: g,
          attributeNamespace: null,
          propertyName: f,
          mutationMethod: null,
          mustUseProperty: oa(k, b.MUST_USE_PROPERTY),
          hasBooleanValue: oa(k, b.HAS_BOOLEAN_VALUE),
          hasNumericValue: oa(k, b.HAS_NUMERIC_VALUE),
          hasPositiveNumericValue: oa(k, b.HAS_POSITIVE_NUMERIC_VALUE),
          hasOverloadedBooleanValue: oa(k, b.HAS_OVERLOADED_BOOLEAN_VALUE),
          hasStringBooleanValue: oa(k, b.HAS_STRING_BOOLEAN_VALUE)
        };
        1 >= g.hasBooleanValue + g.hasNumericValue + g.hasOverloadedBooleanValue ? void 0 : l("50", f);
        e.hasOwnProperty(f) && (g.attributeName = e[f]);
        d.hasOwnProperty(f) && (g.attributeNamespace = d[f]);
        a.hasOwnProperty(f) && (g.mutationMethod = a[f]);
        fb[f] = g;
      }
    }
  },
      fb = {},
      X = ze,
      Cb = X.MUST_USE_PROPERTY,
      w = X.HAS_BOOLEAN_VALUE,
      Ae = X.HAS_NUMERIC_VALUE,
      Db = X.HAS_POSITIVE_NUMERIC_VALUE,
      ab = X.HAS_STRING_BOOLEAN_VALUE,
      zf = {
    Properties: {
      allowFullScreen: w,
      autoFocus: ab,
      async: w,
      autoPlay: w,
      capture: w,
      checked: Cb | w,
      cols: Db,
      contentEditable: ab,
      controls: w,
      "default": w,
      defer: w,
      disabled: w,
      download: X.HAS_OVERLOADED_BOOLEAN_VALUE,
      draggable: ab,
      formNoValidate: w,
      hidden: w,
      loop: w,
      multiple: Cb | w,
      muted: Cb | w,
      noValidate: w,
      open: w,
      playsInline: w,
      readOnly: w,
      required: w,
      reversed: w,
      rows: Db,
      rowSpan: Ae,
      scoped: w,
      seamless: w,
      selected: Cb | w,
      size: Db,
      start: Ae,
      span: Db,
      spellCheck: ab,
      style: 0,
      tabIndex: 0,
      itemScope: w,
      acceptCharset: 0,
      className: 0,
      htmlFor: 0,
      httpEquiv: 0,
      value: ab
    },
    DOMAttributeNames: {
      acceptCharset: "accept-charset",
      className: "class",
      htmlFor: "for",
      httpEquiv: "http-equiv"
    },
    DOMMutationMethods: {
      value: function value(a, b) {
        if (null == b) return a.removeAttribute("value");
        "number" !== a.type || !1 === a.hasAttribute("value") ? a.setAttribute("value", "" + b) : a.validity && !a.validity.badInput && a.ownerDocument.activeElement !== a && a.setAttribute("value", "" + b);
      }
    }
  },
      zc = X.HAS_STRING_BOOLEAN_VALUE,
      Ac = {
    Properties: {
      autoReverse: zc,
      externalResourcesRequired: zc,
      preserveAlpha: zc
    },
    DOMAttributeNames: {
      autoReverse: "autoReverse",
      externalResourcesRequired: "externalResourcesRequired",
      preserveAlpha: "preserveAlpha"
    },
    DOMAttributeNamespaces: {
      xlinkActuate: "http://www.w3.org/1999/xlink",
      xlinkArcrole: "http://www.w3.org/1999/xlink",
      xlinkHref: "http://www.w3.org/1999/xlink",
      xlinkRole: "http://www.w3.org/1999/xlink",
      xlinkShow: "http://www.w3.org/1999/xlink",
      xlinkTitle: "http://www.w3.org/1999/xlink",
      xlinkType: "http://www.w3.org/1999/xlink",
      xmlBase: "http://www.w3.org/XML/1998/namespace",
      xmlLang: "http://www.w3.org/XML/1998/namespace",
      xmlSpace: "http://www.w3.org/XML/1998/namespace"
    }
  },
      Af = /[\-\:]([a-z])/g,
      Bf = function Bf(a) {
    return a[1].toUpperCase();
  };

  "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode x-height xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type xml:base xmlns:xlink xml:lang xml:space".split(" ").forEach(function (a) {
    var b = a.replace(Af, Bf);
    Ac.Properties[b] = 0;
    Ac.DOMAttributeNames[b] = a;
  });
  X.injectDOMPropertyConfig(zf);
  X.injectDOMPropertyConfig(Ac);

  var u = {
    _caughtError: null,
    _hasCaughtError: !1,
    _rethrowError: null,
    _hasRethrowError: !1,
    injection: {
      injectErrorUtils: function injectErrorUtils(a) {
        "function" !== typeof a.invokeGuardedCallback ? l("197") : void 0;
        Be = a.invokeGuardedCallback;
      }
    },
    invokeGuardedCallback: function invokeGuardedCallback(a, b, c, d, e, f, g, k, h) {
      Be.apply(u, arguments);
    },
    invokeGuardedCallbackAndCatchFirstError: function invokeGuardedCallbackAndCatchFirstError(a, b, c, d, e, f, g, k, h) {
      u.invokeGuardedCallback.apply(this, arguments);

      if (u.hasCaughtError()) {
        var l = u.clearCaughtError();
        u._hasRethrowError || (u._hasRethrowError = !0, u._rethrowError = l);
      }
    },
    rethrowCaughtError: function rethrowCaughtError() {
      return Cf.apply(u, arguments);
    },
    hasCaughtError: function hasCaughtError() {
      return u._hasCaughtError;
    },
    clearCaughtError: function clearCaughtError() {
      if (u._hasCaughtError) {
        var a = u._caughtError;
        u._caughtError = null;
        u._hasCaughtError = !1;
        return a;
      }

      l("198");
    }
  },
      Be = function Be(a, b, c, d, e, f, g, k, h) {
    u._hasCaughtError = !1;
    u._caughtError = null;
    var l = Array.prototype.slice.call(arguments, 3);

    try {
      b.apply(c, l);
    } catch (A) {
      u._caughtError = A, u._hasCaughtError = !0;
    }
  },
      Cf = function Cf() {
    if (u._hasRethrowError) {
      var a = u._rethrowError;
      u._rethrowError = null;
      u._hasRethrowError = !1;
      throw a;
    }
  },
      gb = null,
      pa = {},
      qa = [],
      Kb = {},
      ra = {},
      hb = {},
      Df = Object.freeze({
    plugins: qa,
    eventNameDispatchConfigs: Kb,
    registrationNameModules: ra,
    registrationNameDependencies: hb,
    possibleRegistrationNames: null,
    injectEventPluginOrder: Uc,
    injectEventPluginsByName: Vc
  }),
      va = function va() {};

  va.thatReturns = ib;
  va.thatReturnsFalse = ib(!1);
  va.thatReturnsTrue = ib(!0);
  va.thatReturnsNull = ib(null);

  va.thatReturnsThis = function () {
    return this;
  };

  va.thatReturnsArgument = function (a) {
    return a;
  };

  var E = va,
      Mb = null,
      od = null,
      Xc = null,
      sa = null,
      Ce = function Ce(a, b) {
    if (a) {
      var c = a._dispatchListeners,
          d = a._dispatchInstances;
      if (Array.isArray(c)) for (var e = 0; e < c.length && !a.isPropagationStopped(); e++) {
        Wc(a, b, c[e], d[e]);
      } else c && Wc(a, b, c, d);
      a._dispatchListeners = null;
      a._dispatchInstances = null;
      a.isPersistent() || a.constructor.release(a);
    }
  },
      Re = function Re(a) {
    return Ce(a, !0);
  },
      Se = function Se(a) {
    return Ce(a, !1);
  },
      Bc = {
    injectEventPluginOrder: Uc,
    injectEventPluginsByName: Vc
  },
      Ef = Object.freeze({
    injection: Bc,
    getListener: Lb,
    extractEvents: Yc,
    enqueueEvents: Nb,
    processEventQueue: Ob
  }),
      De = Math.random().toString(36).slice(2),
      P = "__reactInternalInstance$" + De,
      ha = "__reactEventHandlers$" + De,
      Ee = Object.freeze({
    precacheFiberNode: function precacheFiberNode(a, b) {
      b[P] = a;
    },
    getClosestInstanceFromNode: Y,
    getInstanceFromNode: function getInstanceFromNode(a) {
      a = a[P];
      return !a || 5 !== a.tag && 6 !== a.tag ? null : a;
    },
    getNodeFromInstance: ya,
    getFiberCurrentPropsFromNode: Zc,
    updateFiberProps: function updateFiberProps(a, b) {
      a[ha] = b;
    }
  }),
      Ff = Object.freeze({
    accumulateTwoPhaseDispatches: za,
    accumulateTwoPhaseDispatchesSkipTarget: function accumulateTwoPhaseDispatchesSkipTarget(a) {
      fa(a, Ue);
    },
    accumulateEnterLeaveDispatches: bd,
    accumulateDirectDispatches: function accumulateDirectDispatches(a) {
      fa(a, Ve);
    }
  }),
      Eb = !("undefined" === typeof window || !window.document || !window.document.createElement),
      H = {
    canUseDOM: Eb,
    canUseWorkers: "undefined" !== typeof Worker,
    canUseEventListeners: Eb && !(!window.addEventListener && !window.attachEvent),
    canUseViewport: Eb && !!window.screen,
    isInWorker: !Eb
  },
      Qb = null,
      G = {
    _root: null,
    _startText: null,
    _fallbackText: null
  },
      B = ea.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.assign,
      Fe = "dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),
      Gf = {
    type: null,
    target: null,
    currentTarget: E.thatReturnsNull,
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function timeStamp(a) {
      return a.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
  };

  B(n.prototype, {
    preventDefault: function preventDefault() {
      this.defaultPrevented = !0;
      var a = this.nativeEvent;
      a && (a.preventDefault ? a.preventDefault() : "unknown" !== typeof a.returnValue && (a.returnValue = !1), this.isDefaultPrevented = E.thatReturnsTrue);
    },
    stopPropagation: function stopPropagation() {
      var a = this.nativeEvent;
      a && (a.stopPropagation ? a.stopPropagation() : "unknown" !== typeof a.cancelBubble && (a.cancelBubble = !0), this.isPropagationStopped = E.thatReturnsTrue);
    },
    persist: function persist() {
      this.isPersistent = E.thatReturnsTrue;
    },
    isPersistent: E.thatReturnsFalse,
    destructor: function destructor() {
      var a = this.constructor.Interface,
          b;

      for (b in a) {
        this[b] = null;
      }

      for (a = 0; a < Fe.length; a++) {
        this[Fe[a]] = null;
      }
    }
  });
  n.Interface = Gf;

  n.augmentClass = function (a, b) {
    var c = function c() {};

    c.prototype = this.prototype;
    c = new c();
    B(c, a.prototype);
    a.prototype = c;
    a.prototype.constructor = a;
    a.Interface = B({}, this.Interface, b);
    a.augmentClass = this.augmentClass;
    fd(a);
  };

  fd(n);
  n.augmentClass(gd, {
    data: null
  });
  n.augmentClass(hd, {
    data: null
  });
  var Ze = [9, 13, 27, 32],
      Rb = H.canUseDOM && "CompositionEvent" in window,
      bb = null;
  H.canUseDOM && "documentMode" in document && (bb = document.documentMode);

  var Hf = H.canUseDOM && "TextEvent" in window && !bb && !Ye(),
      md = H.canUseDOM && (!Rb || bb && 8 < bb && 11 >= bb),
      ld = String.fromCharCode(32),
      ca = {
    beforeInput: {
      phasedRegistrationNames: {
        bubbled: "onBeforeInput",
        captured: "onBeforeInputCapture"
      },
      dependencies: ["topCompositionEnd", "topKeyPress", "topTextInput", "topPaste"]
    },
    compositionEnd: {
      phasedRegistrationNames: {
        bubbled: "onCompositionEnd",
        captured: "onCompositionEndCapture"
      },
      dependencies: "topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")
    },
    compositionStart: {
      phasedRegistrationNames: {
        bubbled: "onCompositionStart",
        captured: "onCompositionStartCapture"
      },
      dependencies: "topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")
    },
    compositionUpdate: {
      phasedRegistrationNames: {
        bubbled: "onCompositionUpdate",
        captured: "onCompositionUpdateCapture"
      },
      dependencies: "topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")
    }
  },
      kd = !1,
      Aa = !1,
      If = {
    eventTypes: ca,
    extractEvents: function extractEvents(a, b, c, d) {
      var e;
      if (Rb) b: {
        switch (a) {
          case "topCompositionStart":
            var f = ca.compositionStart;
            break b;

          case "topCompositionEnd":
            f = ca.compositionEnd;
            break b;

          case "topCompositionUpdate":
            f = ca.compositionUpdate;
            break b;
        }

        f = void 0;
      } else Aa ? id(a, c) && (f = ca.compositionEnd) : "topKeyDown" === a && 229 === c.keyCode && (f = ca.compositionStart);
      f ? (md && (Aa || f !== ca.compositionStart ? f === ca.compositionEnd && Aa && (e = dd()) : (G._root = d, G._startText = ed(), Aa = !0)), f = gd.getPooled(f, b, c, d), e ? f.data = e : (e = jd(c), null !== e && (f.data = e)), za(f), e = f) : e = null;
      (a = Hf ? $e(a, c) : af(a, c)) ? (b = hd.getPooled(ca.beforeInput, b, c, d), b.data = a, za(b)) : b = null;
      return [e, b];
    }
  },
      jb = null,
      Da = null,
      ia = null,
      Ge = {
    injectFiberControlledHostComponent: function injectFiberControlledHostComponent(a) {
      jb = a;
    }
  },
      Jf = Object.freeze({
    injection: Ge,
    enqueueStateRestore: pd,
    restoreStateIfNeeded: qd
  }),
      Ub = function Ub(a, b) {
    return a(b);
  },
      Tb = !1,
      bf = {
    color: !0,
    date: !0,
    datetime: !0,
    "datetime-local": !0,
    email: !0,
    month: !0,
    number: !0,
    password: !0,
    range: !0,
    search: !0,
    tel: !0,
    text: !0,
    time: !0,
    url: !0,
    week: !0
  },
      sd;

  H.canUseDOM && (sd = document.implementation && document.implementation.hasFeature && !0 !== document.implementation.hasFeature("", ""));
  var wd = {
    change: {
      phasedRegistrationNames: {
        bubbled: "onChange",
        captured: "onChangeCapture"
      },
      dependencies: "topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ")
    }
  },
      Ka = null,
      La = null,
      Cc = !1;
  H.canUseDOM && (Cc = Ea("input") && (!document.documentMode || 9 < document.documentMode));
  var Kf = {
    eventTypes: wd,
    _isInputEventSupported: Cc,
    extractEvents: function extractEvents(a, b, c, d) {
      var e = b ? ya(b) : window,
          f = e.nodeName && e.nodeName.toLowerCase();
      if ("select" === f || "input" === f && "file" === e.type) var g = ef;else if (rd(e)) {
        if (Cc) g = jf;else {
          g = gf;
          var k = ff;
        }
      } else f = e.nodeName, !f || "input" !== f.toLowerCase() || "checkbox" !== e.type && "radio" !== e.type || (g = hf);
      if (g && (g = g(a, b))) return vd(g, c, d);
      k && k(a, e, b);
      "topBlur" === a && null != b && (a = b._wrapperState || e._wrapperState) && a.controlled && "number" === e.type && (a = "" + e.value, e.getAttribute("value") !== a && e.setAttribute("value", a));
    }
  };
  n.augmentClass(ja, {
    view: null,
    detail: null
  });
  var lf = {
    Alt: "altKey",
    Control: "ctrlKey",
    Meta: "metaKey",
    Shift: "shiftKey"
  };
  ja.augmentClass(U, {
    screenX: null,
    screenY: null,
    clientX: null,
    clientY: null,
    pageX: null,
    pageY: null,
    ctrlKey: null,
    shiftKey: null,
    altKey: null,
    metaKey: null,
    getModifierState: Wb,
    button: null,
    buttons: null,
    relatedTarget: function relatedTarget(a) {
      return a.relatedTarget || (a.fromElement === a.srcElement ? a.toElement : a.fromElement);
    }
  });
  var Dc = {
    mouseEnter: {
      registrationName: "onMouseEnter",
      dependencies: ["topMouseOut", "topMouseOver"]
    },
    mouseLeave: {
      registrationName: "onMouseLeave",
      dependencies: ["topMouseOut", "topMouseOver"]
    }
  },
      Lf = {
    eventTypes: Dc,
    extractEvents: function extractEvents(a, b, c, d) {
      if ("topMouseOver" === a && (c.relatedTarget || c.fromElement) || "topMouseOut" !== a && "topMouseOver" !== a) return null;
      var e = d.window === d ? d : (e = d.ownerDocument) ? e.defaultView || e.parentWindow : window;
      "topMouseOut" === a ? (a = b, b = (b = c.relatedTarget || c.toElement) ? Y(b) : null) : a = null;
      if (a === b) return null;
      var f = null == a ? e : ya(a);
      e = null == b ? e : ya(b);
      var g = U.getPooled(Dc.mouseLeave, a, c, d);
      g.type = "mouseleave";
      g.target = f;
      g.relatedTarget = e;
      c = U.getPooled(Dc.mouseEnter, b, c, d);
      c.type = "mouseenter";
      c.target = e;
      c.relatedTarget = f;
      bd(g, c, a, b);
      return [g, c];
    }
  },
      cb = ea.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,
      Bd = {
    listen: function listen(a, b, c) {
      if (a.addEventListener) return a.addEventListener(b, c, !1), {
        remove: function remove() {
          a.removeEventListener(b, c, !1);
        }
      };
      if (a.attachEvent) return a.attachEvent("on" + b, c), {
        remove: function remove() {
          a.detachEvent("on" + b, c);
        }
      };
    },
    capture: function capture(a, b, c) {
      return a.addEventListener ? (a.addEventListener(b, c, !0), {
        remove: function remove() {
          a.removeEventListener(b, c, !0);
        }
      }) : {
        remove: E
      };
    },
    registerDefault: function registerDefault() {}
  },
      nb = [],
      Oa = !0,
      mb = void 0,
      Mf = Object.freeze({
    get _enabled() {
      return Oa;
    },

    get _handleTopLevel() {
      return mb;
    },

    setHandleTopLevel: function setHandleTopLevel(a) {
      mb = a;
    },
    setEnabled: Xb,
    isEnabled: function isEnabled() {
      return Oa;
    },
    trapBubbledEvent: p,
    trapCapturedEvent: V,
    dispatchEvent: Yb
  }),
      Z = {
    animationend: ob("Animation", "AnimationEnd"),
    animationiteration: ob("Animation", "AnimationIteration"),
    animationstart: ob("Animation", "AnimationStart"),
    transitionend: ob("Transition", "TransitionEnd")
  },
      Zb = {},
      Cd = {};
  H.canUseDOM && (Cd = document.createElement("div").style, "AnimationEvent" in window || (delete Z.animationend.animation, delete Z.animationiteration.animation, delete Z.animationstart.animation), "TransitionEvent" in window || delete Z.transitionend.transition);

  var pe = {
    topAbort: "abort",
    topAnimationEnd: pb("animationend") || "animationend",
    topAnimationIteration: pb("animationiteration") || "animationiteration",
    topAnimationStart: pb("animationstart") || "animationstart",
    topBlur: "blur",
    topCancel: "cancel",
    topCanPlay: "canplay",
    topCanPlayThrough: "canplaythrough",
    topChange: "change",
    topClick: "click",
    topClose: "close",
    topCompositionEnd: "compositionend",
    topCompositionStart: "compositionstart",
    topCompositionUpdate: "compositionupdate",
    topContextMenu: "contextmenu",
    topCopy: "copy",
    topCut: "cut",
    topDoubleClick: "dblclick",
    topDrag: "drag",
    topDragEnd: "dragend",
    topDragEnter: "dragenter",
    topDragExit: "dragexit",
    topDragLeave: "dragleave",
    topDragOver: "dragover",
    topDragStart: "dragstart",
    topDrop: "drop",
    topDurationChange: "durationchange",
    topEmptied: "emptied",
    topEncrypted: "encrypted",
    topEnded: "ended",
    topError: "error",
    topFocus: "focus",
    topInput: "input",
    topKeyDown: "keydown",
    topKeyPress: "keypress",
    topKeyUp: "keyup",
    topLoadedData: "loadeddata",
    topLoad: "load",
    topLoadedMetadata: "loadedmetadata",
    topLoadStart: "loadstart",
    topMouseDown: "mousedown",
    topMouseMove: "mousemove",
    topMouseOut: "mouseout",
    topMouseOver: "mouseover",
    topMouseUp: "mouseup",
    topPaste: "paste",
    topPause: "pause",
    topPlay: "play",
    topPlaying: "playing",
    topProgress: "progress",
    topRateChange: "ratechange",
    topScroll: "scroll",
    topSeeked: "seeked",
    topSeeking: "seeking",
    topSelectionChange: "selectionchange",
    topStalled: "stalled",
    topSuspend: "suspend",
    topTextInput: "textInput",
    topTimeUpdate: "timeupdate",
    topToggle: "toggle",
    topTouchCancel: "touchcancel",
    topTouchEnd: "touchend",
    topTouchMove: "touchmove",
    topTouchStart: "touchstart",
    topTransitionEnd: pb("transitionend") || "transitionend",
    topVolumeChange: "volumechange",
    topWaiting: "waiting",
    topWheel: "wheel"
  },
      Ed = {},
      qf = 0,
      qb = "_reactListenersID" + ("" + Math.random()).slice(2),
      bc = function bc(a) {
    a = a || ("undefined" !== typeof document ? document : void 0);
    if ("undefined" === typeof a) return null;

    try {
      return a.activeElement || a.body;
    } catch (b) {
      return a.body;
    }
  },
      Nf = Object.prototype.hasOwnProperty,
      cc = function cc(a, b) {
    if (Fd(a, b)) return !0;
    if ("object" !== _typeof(a) || null === a || "object" !== _typeof(b) || null === b) return !1;
    var c = Object.keys(a),
        d = Object.keys(b);
    if (c.length !== d.length) return !1;

    for (d = 0; d < c.length; d++) {
      if (!Nf.call(b, c[d]) || !Fd(a[c[d]], b[c[d]])) return !1;
    }

    return !0;
  },
      Hd = function Hd(a) {
    var b = (a ? a.ownerDocument || a : document).defaultView || window;
    return !!(a && ("function" === typeof b.Node ? a instanceof b.Node : "object" === _typeof(a) && "number" === typeof a.nodeType && "string" === typeof a.nodeName)) && 3 == a.nodeType;
  },
      Of = H.canUseDOM && "documentMode" in document && 11 >= document.documentMode,
      Ld = {
    select: {
      phasedRegistrationNames: {
        bubbled: "onSelect",
        captured: "onSelectCapture"
      },
      dependencies: "topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ")
    }
  },
      ka = null,
      dc = null,
      Pa = null,
      ac = !1,
      Pf = {
    eventTypes: Ld,
    extractEvents: function extractEvents(a, b, c, d) {
      var e = d.window === d ? d.document : 9 === d.nodeType ? d : d.ownerDocument,
          f;

      if (!(f = !e)) {
        a: {
          e = Dd(e);
          f = hb.onSelect;

          for (var g = 0; g < f.length; g++) {
            var k = f[g];

            if (!e.hasOwnProperty(k) || !e[k]) {
              e = !1;
              break a;
            }
          }

          e = !0;
        }

        f = !e;
      }

      if (f) return null;
      e = b ? ya(b) : window;

      switch (a) {
        case "topFocus":
          if (rd(e) || "true" === e.contentEditable) ka = e, dc = b, Pa = null;
          break;

        case "topBlur":
          Pa = dc = ka = null;
          break;

        case "topMouseDown":
          ac = !0;
          break;

        case "topContextMenu":
        case "topMouseUp":
          return ac = !1, Kd(c, d);

        case "topSelectionChange":
          if (Of) break;

        case "topKeyDown":
        case "topKeyUp":
          return Kd(c, d);
      }

      return null;
    }
  };

  n.augmentClass(Md, {
    animationName: null,
    elapsedTime: null,
    pseudoElement: null
  });
  n.augmentClass(Nd, {
    clipboardData: function clipboardData(a) {
      return "clipboardData" in a ? a.clipboardData : window.clipboardData;
    }
  });
  ja.augmentClass(Od, {
    relatedTarget: null
  });
  var Qf = {
    Esc: "Escape",
    Spacebar: " ",
    Left: "ArrowLeft",
    Up: "ArrowUp",
    Right: "ArrowRight",
    Down: "ArrowDown",
    Del: "Delete",
    Win: "OS",
    Menu: "ContextMenu",
    Apps: "ContextMenu",
    Scroll: "ScrollLock",
    MozPrintableKey: "Unidentified"
  },
      Rf = {
    8: "Backspace",
    9: "Tab",
    12: "Clear",
    13: "Enter",
    16: "Shift",
    17: "Control",
    18: "Alt",
    19: "Pause",
    20: "CapsLock",
    27: "Escape",
    32: " ",
    33: "PageUp",
    34: "PageDown",
    35: "End",
    36: "Home",
    37: "ArrowLeft",
    38: "ArrowUp",
    39: "ArrowRight",
    40: "ArrowDown",
    45: "Insert",
    46: "Delete",
    112: "F1",
    113: "F2",
    114: "F3",
    115: "F4",
    116: "F5",
    117: "F6",
    118: "F7",
    119: "F8",
    120: "F9",
    121: "F10",
    122: "F11",
    123: "F12",
    144: "NumLock",
    145: "ScrollLock",
    224: "Meta"
  };
  ja.augmentClass(Pd, {
    key: function key(a) {
      if (a.key) {
        var b = Qf[a.key] || a.key;
        if ("Unidentified" !== b) return b;
      }

      return "keypress" === a.type ? (a = rb(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? Rf[a.keyCode] || "Unidentified" : "";
    },
    location: null,
    ctrlKey: null,
    shiftKey: null,
    altKey: null,
    metaKey: null,
    repeat: null,
    locale: null,
    getModifierState: Wb,
    charCode: function charCode(a) {
      return "keypress" === a.type ? rb(a) : 0;
    },
    keyCode: function keyCode(a) {
      return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
    },
    which: function which(a) {
      return "keypress" === a.type ? rb(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
    }
  });
  U.augmentClass(Qd, {
    dataTransfer: null
  });
  ja.augmentClass(Rd, {
    touches: null,
    targetTouches: null,
    changedTouches: null,
    altKey: null,
    metaKey: null,
    ctrlKey: null,
    shiftKey: null,
    getModifierState: Wb
  });
  n.augmentClass(Sd, {
    propertyName: null,
    elapsedTime: null,
    pseudoElement: null
  });
  U.augmentClass(Td, {
    deltaX: function deltaX(a) {
      return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
    },
    deltaY: function deltaY(a) {
      return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
    },
    deltaZ: null,
    deltaMode: null
  });
  var He = {},
      Ie = {};
  "abort animationEnd animationIteration animationStart blur cancel canPlay canPlayThrough click close contextMenu copy cut doubleClick drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error focus input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing progress rateChange reset scroll seeked seeking stalled submit suspend timeUpdate toggle touchCancel touchEnd touchMove touchStart transitionEnd volumeChange waiting wheel".split(" ").forEach(function (a) {
    var b = a[0].toUpperCase() + a.slice(1),
        c = "on" + b;
    b = "top" + b;
    c = {
      phasedRegistrationNames: {
        bubbled: c,
        captured: c + "Capture"
      },
      dependencies: [b]
    };
    He[a] = c;
    Ie[b] = c;
  });
  var Sf = {
    eventTypes: He,
    extractEvents: function extractEvents(a, b, c, d) {
      var e = Ie[a];
      if (!e) return null;

      switch (a) {
        case "topKeyPress":
          if (0 === rb(c)) return null;

        case "topKeyDown":
        case "topKeyUp":
          a = Pd;
          break;

        case "topBlur":
        case "topFocus":
          a = Od;
          break;

        case "topClick":
          if (2 === c.button) return null;

        case "topDoubleClick":
        case "topMouseDown":
        case "topMouseMove":
        case "topMouseUp":
        case "topMouseOut":
        case "topMouseOver":
        case "topContextMenu":
          a = U;
          break;

        case "topDrag":
        case "topDragEnd":
        case "topDragEnter":
        case "topDragExit":
        case "topDragLeave":
        case "topDragOver":
        case "topDragStart":
        case "topDrop":
          a = Qd;
          break;

        case "topTouchCancel":
        case "topTouchEnd":
        case "topTouchMove":
        case "topTouchStart":
          a = Rd;
          break;

        case "topAnimationEnd":
        case "topAnimationIteration":
        case "topAnimationStart":
          a = Md;
          break;

        case "topTransitionEnd":
          a = Sd;
          break;

        case "topScroll":
          a = ja;
          break;

        case "topWheel":
          a = Td;
          break;

        case "topCopy":
        case "topCut":
        case "topPaste":
          a = Nd;
          break;

        default:
          a = n;
      }

      b = a.getPooled(e, b, c, d);
      za(b);
      return b;
    }
  };

  mb = function mb(a, b, c, d) {
    a = Yc(a, b, c, d);
    Nb(a);
    Ob(!1);
  };

  Bc.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" "));

  (function (a) {
    Mb = a.getFiberCurrentPropsFromNode;
    od = a.getInstanceFromNode;
    Xc = a.getNodeFromInstance;
  })(Ee);

  Bc.injectEventPluginsByName({
    SimpleEventPlugin: Sf,
    EnterLeaveEventPlugin: Lf,
    ChangeEventPlugin: Kf,
    SelectEventPlugin: Pf,
    BeforeInputEventPlugin: If
  });
  var ma = {},
      sb = [],
      ta = -1;
  new Set();

  var la = {
    current: ma
  },
      J = {
    current: !1
  },
      tb = ma,
      jc = null,
      kc = null,
      Tf = function Tf(a, b, c, d) {
    function e(a, b) {
      b.updater = f;
      a.stateNode = b;
      b._reactInternalFiber = a;
    }

    var f = {
      isMounted: mf,
      enqueueSetState: function enqueueSetState(c, d, e) {
        c = c._reactInternalFiber;
        e = void 0 === e ? null : e;
        var f = b(c);
        yb(c, {
          expirationTime: f,
          partialState: d,
          callback: e,
          isReplace: !1,
          isForced: !1,
          nextCallback: null,
          next: null
        });
        a(c, f);
      },
      enqueueReplaceState: function enqueueReplaceState(c, d, e) {
        c = c._reactInternalFiber;
        e = void 0 === e ? null : e;
        var f = b(c);
        yb(c, {
          expirationTime: f,
          partialState: d,
          callback: e,
          isReplace: !0,
          isForced: !1,
          nextCallback: null,
          next: null
        });
        a(c, f);
      },
      enqueueForceUpdate: function enqueueForceUpdate(c, d) {
        c = c._reactInternalFiber;
        d = void 0 === d ? null : d;
        var e = b(c);
        yb(c, {
          expirationTime: e,
          partialState: null,
          callback: d,
          isReplace: !1,
          isForced: !0,
          nextCallback: null,
          next: null
        });
        a(c, e);
      }
    };
    return {
      adoptClassInstance: e,
      constructClassInstance: function constructClassInstance(a, b) {
        var c = a.type,
            d = Qa(a),
            f = 2 === a.tag && null != a.type.contextTypes,
            g = f ? Sa(a, d) : ma;
        b = new c(b, g);
        e(a, b);
        f && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = d, a.__reactInternalMemoizedMaskedChildContext = g);
        return b;
      },
      mountClassInstance: function mountClassInstance(a, b) {
        var c = a.alternate,
            d = a.stateNode,
            e = d.state || null,
            g = a.pendingProps;
        g ? void 0 : l("158");
        var k = Qa(a);
        d.props = g;
        d.state = a.memoizedState = e;
        d.refs = ma;
        d.context = Sa(a, k);
        null != a.type && null != a.type.prototype && !0 === a.type.prototype.unstable_isAsyncReactComponent && (a.internalContextTag |= 1);
        "function" === typeof d.componentWillMount && (e = d.state, d.componentWillMount(), e !== d.state && f.enqueueReplaceState(d, d.state, null), e = a.updateQueue, null !== e && (d.state = lc(c, a, e, d, g, b)));
        "function" === typeof d.componentDidMount && (a.effectTag |= 4);
      },
      updateClassInstance: function updateClassInstance(a, b, e) {
        var g = b.stateNode;
        g.props = b.memoizedProps;
        g.state = b.memoizedState;
        var k = b.memoizedProps,
            h = b.pendingProps;
        h || (h = k, null == h ? l("159") : void 0);
        var t = g.context,
            K = Qa(b);
        K = Sa(b, K);
        "function" !== typeof g.componentWillReceiveProps || k === h && t === K || (t = g.state, g.componentWillReceiveProps(h, K), g.state !== t && f.enqueueReplaceState(g, g.state, null));
        t = b.memoizedState;
        e = null !== b.updateQueue ? lc(a, b, b.updateQueue, g, h, e) : t;
        if (!(k !== h || t !== e || J.current || null !== b.updateQueue && b.updateQueue.hasForceUpdate)) return "function" !== typeof g.componentDidUpdate || k === a.memoizedProps && t === a.memoizedState || (b.effectTag |= 4), !1;
        var L = h;
        if (null === k || null !== b.updateQueue && b.updateQueue.hasForceUpdate) L = !0;else {
          var aa = b.stateNode,
              p = b.type;
          L = "function" === typeof aa.shouldComponentUpdate ? aa.shouldComponentUpdate(L, e, K) : p.prototype && p.prototype.isPureReactComponent ? !cc(k, L) || !cc(t, e) : !0;
        }
        L ? ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(h, e, K), "function" === typeof g.componentDidUpdate && (b.effectTag |= 4)) : ("function" !== typeof g.componentDidUpdate || k === a.memoizedProps && t === a.memoizedState || (b.effectTag |= 4), c(b, h), d(b, e));
        g.props = h;
        g.state = e;
        g.context = K;
        return L;
      }
    };
  },
      Ta = "function" === typeof Symbol && Symbol["for"] && Symbol["for"]("react.portal") || 60106,
      Ab = Array.isArray,
      de = "function" === typeof Symbol && Symbol.iterator;

  if ("function" === typeof Symbol && Symbol["for"]) {
    var Wa = Symbol["for"]("react.element");
    var Xa = Symbol["for"]("react.call");
    var Ya = Symbol["for"]("react.return");
    var ua = Symbol["for"]("react.fragment");
  } else Wa = 60103, Xa = 60104, Ya = 60105, ua = 60107;

  var Ec = mc(!0, !0),
      Fc = mc(!1, !0),
      Gc = mc(!1, !1),
      Uf = function Uf(a, b, c, d, e) {
    function f(a, b, c) {
      g(a, b, c, b.expirationTime);
    }

    function g(a, b, c, d) {
      b.child = null === a ? Gc(b, b.child, c, d) : a.child === b.child ? Ec(b, b.child, c, d) : Fc(b, b.child, c, d);
    }

    function k(a, b) {
      var c = b.ref;
      null === c || a && a.ref === c || (b.effectTag |= 128);
    }

    function h(a, b, c, d) {
      k(a, b);
      if (!c) return d && Xd(b, !1), A(a, b);
      c = b.stateNode;
      cb.current = b;
      var e = c.render();
      b.effectTag |= 1;
      f(a, b, e);
      b.memoizedState = c.state;
      b.memoizedProps = c.props;
      d && Xd(b, !0);
      return b.child;
    }

    function p(a) {
      var b = a.stateNode;
      b.pendingContext ? Vd(a, b.pendingContext, b.pendingContext !== b.context) : b.context && Vd(a, b.context, !1);
      n(a, b.containerInfo);
    }

    function A(a, b) {
      null !== a && b.child !== a.child ? l("153") : void 0;

      if (null !== b.child) {
        a = b.child;
        var c = vb(a, a.pendingProps, a.expirationTime);
        b.child = c;

        for (c["return"] = b; null !== a.sibling;) {
          a = a.sibling, c = c.sibling = vb(a, a.pendingProps, a.expirationTime), c["return"] = b;
        }

        c.sibling = null;
      }

      return b.child;
    }

    function D(a, b) {
      switch (b.tag) {
        case 3:
          p(b);
          break;

        case 2:
          ub(b);
          break;

        case 4:
          n(b, b.stateNode.containerInfo);
      }

      return null;
    }

    var t = a.shouldSetTextContent,
        K = a.useSyncScheduling,
        L = a.shouldDeprioritizeSubtree,
        aa = b.pushHostContext,
        n = b.pushHostContainer,
        w = c.enterHydrationState,
        u = c.resetHydrationState,
        v = c.tryToClaimNextHydratableInstance;
    a = Tf(d, e, function (a, b) {
      a.memoizedProps = b;
    }, function (a, b) {
      a.memoizedState = b;
    });
    var q = a.adoptClassInstance,
        y = a.constructClassInstance,
        z = a.mountClassInstance,
        tf = a.updateClassInstance;
    return {
      beginWork: function beginWork(a, b, c) {
        if (0 === b.expirationTime || b.expirationTime > c) return D(a, b);

        switch (b.tag) {
          case 0:
            null !== a ? l("155") : void 0;
            var d = b.type,
                e = b.pendingProps,
                g = Qa(b);
            g = Sa(b, g);
            d = d(e, g);
            b.effectTag |= 1;
            "object" === _typeof(d) && null !== d && "function" === typeof d.render ? (b.tag = 2, e = ub(b), q(b, d), z(b, c), b = h(a, b, !0, e)) : (b.tag = 1, f(a, b, d), b.memoizedProps = e, b = b.child);
            return b;

          case 1:
            a: {
              e = b.type;
              c = b.pendingProps;
              d = b.memoizedProps;
              if (J.current) null === c && (c = d);else if (null === c || d === c) {
                b = A(a, b);
                break a;
              }
              d = Qa(b);
              d = Sa(b, d);
              e = e(c, d);
              b.effectTag |= 1;
              f(a, b, e);
              b.memoizedProps = c;
              b = b.child;
            }

            return b;

          case 2:
            return e = ub(b), d = void 0, null === a ? b.stateNode ? l("153") : (y(b, b.pendingProps), z(b, c), d = !0) : d = tf(a, b, c), h(a, b, d, e);

          case 3:
            return p(b), e = b.updateQueue, null !== e ? (d = b.memoizedState, e = lc(a, b, e, null, null, c), d === e ? (u(), b = A(a, b)) : (d = e.element, g = b.stateNode, (null === a || null === a.child) && g.hydrate && w(b) ? (b.effectTag |= 2, b.child = Gc(b, b.child, d, c)) : (u(), f(a, b, d)), b.memoizedState = e, b = b.child)) : (u(), b = A(a, b)), b;

          case 5:
            aa(b);
            null === a && v(b);
            e = b.type;
            var m = b.memoizedProps;
            d = b.pendingProps;
            null === d && (d = m, null === d ? l("154") : void 0);
            g = null !== a ? a.memoizedProps : null;
            J.current || null !== d && m !== d ? (m = d.children, t(e, d) ? m = null : g && t(e, g) && (b.effectTag |= 16), k(a, b), 2147483647 !== c && !K && L(e, d) ? (b.expirationTime = 2147483647, b = null) : (f(a, b, m), b.memoizedProps = d, b = b.child)) : b = A(a, b);
            return b;

          case 6:
            return null === a && v(b), a = b.pendingProps, null === a && (a = b.memoizedProps), b.memoizedProps = a, null;

          case 8:
            b.tag = 7;

          case 7:
            e = b.pendingProps;
            if (J.current) null === e && (e = a && a.memoizedProps, null === e ? l("154") : void 0);else if (null === e || b.memoizedProps === e) e = b.memoizedProps;
            d = e.children;
            b.stateNode = null === a ? Gc(b, b.stateNode, d, c) : a.child === b.child ? Ec(b, b.stateNode, d, c) : Fc(b, b.stateNode, d, c);
            b.memoizedProps = e;
            return b.stateNode;

          case 9:
            return null;

          case 4:
            a: {
              n(b, b.stateNode.containerInfo);
              e = b.pendingProps;
              if (J.current) null === e && (e = a && a.memoizedProps, null == e ? l("154") : void 0);else if (null === e || b.memoizedProps === e) {
                b = A(a, b);
                break a;
              }
              null === a ? b.child = Fc(b, b.child, e, c) : f(a, b, e);
              b.memoizedProps = e;
              b = b.child;
            }

            return b;

          case 10:
            a: {
              c = b.pendingProps;
              if (J.current) null === c && (c = b.memoizedProps);else if (null === c || b.memoizedProps === c) {
                b = A(a, b);
                break a;
              }
              f(a, b, c);
              b.memoizedProps = c;
              b = b.child;
            }

            return b;

          default:
            l("156");
        }
      },
      beginFailedWork: function beginFailedWork(a, b, c) {
        switch (b.tag) {
          case 2:
            ub(b);
            break;

          case 3:
            p(b);
            break;

          default:
            l("157");
        }

        b.effectTag |= 64;
        null === a ? b.child = null : b.child !== a.child && (b.child = a.child);
        if (0 === b.expirationTime || b.expirationTime > c) return D(a, b);
        b.firstEffect = null;
        b.lastEffect = null;
        g(a, b, null, c);
        2 === b.tag && (a = b.stateNode, b.memoizedProps = a.props, b.memoizedState = a.state);
        return b.child;
      }
    };
  },
      Vf = function Vf(a, b, c) {
    function d(a) {
      a.effectTag |= 4;
    }

    var e = a.createInstance,
        f = a.createTextInstance,
        g = a.appendInitialChild,
        k = a.finalizeInitialChildren,
        h = a.prepareUpdate,
        p = a.persistence,
        A = b.getRootHostContainer,
        D = b.popHostContext,
        t = b.getHostContext,
        n = b.popHostContainer,
        L = c.prepareToHydrateHostInstance,
        aa = c.prepareToHydrateHostTextInstance,
        u = c.popHydrationState,
        w = void 0,
        B = void 0,
        v = void 0;
    a.mutation ? (w = function w(a) {}, B = function B(a, b, c, e, f, g, k) {
      (b.updateQueue = c) && d(b);
    }, v = function v(a, b, c, e) {
      c !== e && d(b);
    }) : p ? l("235") : l("236");
    return {
      completeWork: function completeWork(a, b, c) {
        var q = b.pendingProps;
        if (null === q) q = b.memoizedProps;else if (2147483647 !== b.expirationTime || 2147483647 === c) b.pendingProps = null;

        switch (b.tag) {
          case 1:
            return null;

          case 2:
            return Ud(b), null;

          case 3:
            n(b);
            I(J, b);
            I(la, b);
            q = b.stateNode;
            q.pendingContext && (q.context = q.pendingContext, q.pendingContext = null);
            if (null === a || null === a.child) u(b), b.effectTag &= -3;
            w(b);
            return null;

          case 5:
            D(b);
            c = A();
            var y = b.type;

            if (null !== a && null != b.stateNode) {
              var m = a.memoizedProps,
                  z = b.stateNode,
                  p = t();
              z = h(z, y, m, q, c, p);
              B(a, b, z, y, m, q, c);
              a.ref !== b.ref && (b.effectTag |= 128);
            } else {
              if (!q) return null === b.stateNode ? l("166") : void 0, null;
              a = t();
              if (u(b)) L(b, c, a) && d(b);else {
                a = e(y, q, c, a, b);

                a: for (m = b.child; null !== m;) {
                  if (5 === m.tag || 6 === m.tag) g(a, m.stateNode);else if (4 !== m.tag && null !== m.child) {
                    m.child["return"] = m;
                    m = m.child;
                    continue;
                  }
                  if (m === b) break;

                  for (; null === m.sibling;) {
                    if (null === m["return"] || m["return"] === b) break a;
                    m = m["return"];
                  }

                  m.sibling["return"] = m["return"];
                  m = m.sibling;
                }

                k(a, y, q, c) && d(b);
                b.stateNode = a;
              }
              null !== b.ref && (b.effectTag |= 128);
            }

            return null;

          case 6:
            if (a && null != b.stateNode) v(a, b, a.memoizedProps, q);else {
              if ("string" !== typeof q) return null === b.stateNode ? l("166") : void 0, null;
              a = A();
              c = t();
              u(b) ? aa(b) && d(b) : b.stateNode = f(q, a, c, b);
            }
            return null;

          case 7:
            (q = b.memoizedProps) ? void 0 : l("165");
            b.tag = 8;
            y = [];

            a: for ((m = b.stateNode) && (m["return"] = b); null !== m;) {
              if (5 === m.tag || 6 === m.tag || 4 === m.tag) l("247");else if (9 === m.tag) y.push(m.type);else if (null !== m.child) {
                m.child["return"] = m;
                m = m.child;
                continue;
              }

              for (; null === m.sibling;) {
                if (null === m["return"] || m["return"] === b) break a;
                m = m["return"];
              }

              m.sibling["return"] = m["return"];
              m = m.sibling;
            }

            m = q.handler;
            q = m(q.props, y);
            b.child = Ec(b, null !== a ? a.child : null, q, c);
            return b.child;

          case 8:
            return b.tag = 7, null;

          case 9:
            return null;

          case 10:
            return null;

          case 4:
            return n(b), w(b), null;

          case 0:
            l("167");

          default:
            l("156");
        }
      }
    };
  },
      Wf = function Wf(a, b) {
    function c(a) {
      var c = a.ref;
      if (null !== c) try {
        c(null);
      } catch (y) {
        b(a, y);
      }
    }

    function d(a) {
      "function" === typeof $d && $d(a);

      switch (a.tag) {
        case 2:
          c(a);
          var d = a.stateNode;
          if ("function" === typeof d.componentWillUnmount) try {
            d.props = a.memoizedProps, d.state = a.memoizedState, d.componentWillUnmount();
          } catch (y) {
            b(a, y);
          }
          break;

        case 5:
          c(a);
          break;

        case 7:
          e(a.stateNode);
          break;

        case 4:
          h && g(a);
      }
    }

    function e(a) {
      for (var b = a;;) {
        if (d(b), null === b.child || h && 4 === b.tag) {
          if (b === a) break;

          for (; null === b.sibling;) {
            if (null === b["return"] || b["return"] === a) return;
            b = b["return"];
          }

          b.sibling["return"] = b["return"];
          b = b.sibling;
        } else b.child["return"] = b, b = b.child;
      }
    }

    function f(a) {
      return 5 === a.tag || 3 === a.tag || 4 === a.tag;
    }

    function g(a) {
      for (var b = a, c = !1, f = void 0, g = void 0;;) {
        if (!c) {
          c = b["return"];

          a: for (;;) {
            null === c ? l("160") : void 0;

            switch (c.tag) {
              case 5:
                f = c.stateNode;
                g = !1;
                break a;

              case 3:
                f = c.stateNode.containerInfo;
                g = !0;
                break a;

              case 4:
                f = c.stateNode.containerInfo;
                g = !0;
                break a;
            }

            c = c["return"];
          }

          c = !0;
        }

        if (5 === b.tag || 6 === b.tag) e(b), g ? B(f, b.stateNode) : w(f, b.stateNode);else if (4 === b.tag ? f = b.stateNode.containerInfo : d(b), null !== b.child) {
          b.child["return"] = b;
          b = b.child;
          continue;
        }
        if (b === a) break;

        for (; null === b.sibling;) {
          if (null === b["return"] || b["return"] === a) return;
          b = b["return"];
          4 === b.tag && (c = !1);
        }

        b.sibling["return"] = b["return"];
        b = b.sibling;
      }
    }

    var k = a.getPublicInstance,
        h = a.mutation;
    a = a.persistence;
    h || (a ? l("235") : l("236"));
    var p = h.commitMount,
        A = h.commitUpdate,
        D = h.resetTextContent,
        t = h.commitTextUpdate,
        n = h.appendChild,
        L = h.appendChildToContainer,
        aa = h.insertBefore,
        u = h.insertInContainerBefore,
        w = h.removeChild,
        B = h.removeChildFromContainer;
    return {
      commitResetTextContent: function commitResetTextContent(a) {
        D(a.stateNode);
      },
      commitPlacement: function commitPlacement(a) {
        a: {
          for (var b = a["return"]; null !== b;) {
            if (f(b)) {
              var c = b;
              break a;
            }

            b = b["return"];
          }

          l("160");
          c = void 0;
        }

        var d = b = void 0;

        switch (c.tag) {
          case 5:
            b = c.stateNode;
            d = !1;
            break;

          case 3:
            b = c.stateNode.containerInfo;
            d = !0;
            break;

          case 4:
            b = c.stateNode.containerInfo;
            d = !0;
            break;

          default:
            l("161");
        }

        c.effectTag & 16 && (D(b), c.effectTag &= -17);

        a: b: for (c = a;;) {
          for (; null === c.sibling;) {
            if (null === c["return"] || f(c["return"])) {
              c = null;
              break a;
            }

            c = c["return"];
          }

          c.sibling["return"] = c["return"];

          for (c = c.sibling; 5 !== c.tag && 6 !== c.tag;) {
            if (c.effectTag & 2) continue b;
            if (null === c.child || 4 === c.tag) continue b;else c.child["return"] = c, c = c.child;
          }

          if (!(c.effectTag & 2)) {
            c = c.stateNode;
            break a;
          }
        }

        for (var e = a;;) {
          if (5 === e.tag || 6 === e.tag) c ? d ? u(b, e.stateNode, c) : aa(b, e.stateNode, c) : d ? L(b, e.stateNode) : n(b, e.stateNode);else if (4 !== e.tag && null !== e.child) {
            e.child["return"] = e;
            e = e.child;
            continue;
          }
          if (e === a) break;

          for (; null === e.sibling;) {
            if (null === e["return"] || e["return"] === a) return;
            e = e["return"];
          }

          e.sibling["return"] = e["return"];
          e = e.sibling;
        }
      },
      commitDeletion: function commitDeletion(a) {
        g(a);
        a["return"] = null;
        a.child = null;
        a.alternate && (a.alternate.child = null, a.alternate["return"] = null);
      },
      commitWork: function commitWork(a, b) {
        switch (b.tag) {
          case 2:
            break;

          case 5:
            var c = b.stateNode;

            if (null != c) {
              var d = b.memoizedProps;
              a = null !== a ? a.memoizedProps : d;
              var e = b.type,
                  f = b.updateQueue;
              b.updateQueue = null;
              null !== f && A(c, f, e, a, d, b);
            }

            break;

          case 6:
            null === b.stateNode ? l("162") : void 0;
            c = b.memoizedProps;
            t(b.stateNode, null !== a ? a.memoizedProps : c, c);
            break;

          case 3:
            break;

          default:
            l("163");
        }
      },
      commitLifeCycles: function commitLifeCycles(a, b) {
        switch (b.tag) {
          case 2:
            var c = b.stateNode;
            if (b.effectTag & 4) if (null === a) c.props = b.memoizedProps, c.state = b.memoizedState, c.componentDidMount();else {
              var d = a.memoizedProps;
              a = a.memoizedState;
              c.props = b.memoizedProps;
              c.state = b.memoizedState;
              c.componentDidUpdate(d, a);
            }
            b = b.updateQueue;
            null !== b && ce(b, c);
            break;

          case 3:
            c = b.updateQueue;
            null !== c && ce(c, null !== b.child ? b.child.stateNode : null);
            break;

          case 5:
            c = b.stateNode;
            null === a && b.effectTag & 4 && p(c, b.type, b.memoizedProps, b);
            break;

          case 6:
            break;

          case 4:
            break;

          default:
            l("163");
        }
      },
      commitAttachRef: function commitAttachRef(a) {
        var b = a.ref;

        if (null !== b) {
          var c = a.stateNode;

          switch (a.tag) {
            case 5:
              b(k(c));
              break;

            default:
              b(c);
          }
        }
      },
      commitDetachRef: function commitDetachRef(a) {
        a = a.ref;
        null !== a && a(null);
      }
    };
  },
      da = {},
      Xf = function Xf(a) {
    function b(a) {
      a === da ? l("174") : void 0;
      return a;
    }

    var c = a.getChildHostContext,
        d = a.getRootHostContext,
        e = {
      current: da
    },
        f = {
      current: da
    },
        g = {
      current: da
    };
    return {
      getHostContext: function getHostContext() {
        return b(e.current);
      },
      getRootHostContainer: function getRootHostContainer() {
        return b(g.current);
      },
      popHostContainer: function popHostContainer(a) {
        I(e, a);
        I(f, a);
        I(g, a);
      },
      popHostContext: function popHostContext(a) {
        f.current === a && (I(e, a), I(f, a));
      },
      pushHostContainer: function pushHostContainer(a, b) {
        N(g, b, a);
        b = d(b);
        N(f, a, a);
        N(e, b, a);
      },
      pushHostContext: function pushHostContext(a) {
        var d = b(g.current),
            k = b(e.current);
        d = c(k, a.type, d);
        k !== d && (N(f, a, a), N(e, d, a));
      },
      resetHostContainer: function resetHostContainer() {
        e.current = da;
        g.current = da;
      }
    };
  },
      Yf = function Yf(a) {
    function b(a, b) {
      var c = new Q(5, null, 0);
      c.type = "DELETED";
      c.stateNode = b;
      c["return"] = a;
      c.effectTag = 8;
      null !== a.lastEffect ? (a.lastEffect.nextEffect = c, a.lastEffect = c) : a.firstEffect = a.lastEffect = c;
    }

    function c(a, b) {
      switch (a.tag) {
        case 5:
          return f(b, a.type, a.pendingProps);

        case 6:
          return g(b, a.pendingProps);

        default:
          return !1;
      }
    }

    function d(a) {
      for (a = a["return"]; null !== a && 5 !== a.tag && 3 !== a.tag;) {
        a = a["return"];
      }

      D = a;
    }

    var e = a.shouldSetTextContent;
    a = a.hydration;
    if (!a) return {
      enterHydrationState: function enterHydrationState() {
        return !1;
      },
      resetHydrationState: function resetHydrationState() {},
      tryToClaimNextHydratableInstance: function tryToClaimNextHydratableInstance() {},
      prepareToHydrateHostInstance: function prepareToHydrateHostInstance() {
        l("175");
      },
      prepareToHydrateHostTextInstance: function prepareToHydrateHostTextInstance() {
        l("176");
      },
      popHydrationState: function popHydrationState(a) {
        return !1;
      }
    };
    var f = a.canHydrateInstance,
        g = a.canHydrateTextInstance,
        k = a.getNextHydratableSibling,
        h = a.getFirstHydratableChild,
        p = a.hydrateInstance,
        A = a.hydrateTextInstance,
        D = null,
        t = null,
        n = !1;
    return {
      enterHydrationState: function enterHydrationState(a) {
        t = h(a.stateNode.containerInfo);
        D = a;
        return n = !0;
      },
      resetHydrationState: function resetHydrationState() {
        t = D = null;
        n = !1;
      },
      tryToClaimNextHydratableInstance: function tryToClaimNextHydratableInstance(a) {
        if (n) {
          var d = t;

          if (d) {
            if (!c(a, d)) {
              d = k(d);

              if (!d || !c(a, d)) {
                a.effectTag |= 2;
                n = !1;
                D = a;
                return;
              }

              b(D, t);
            }

            a.stateNode = d;
            D = a;
            t = h(d);
          } else a.effectTag |= 2, n = !1, D = a;
        }
      },
      prepareToHydrateHostInstance: function prepareToHydrateHostInstance(a, b, c) {
        b = p(a.stateNode, a.type, a.memoizedProps, b, c, a);
        a.updateQueue = b;
        return null !== b ? !0 : !1;
      },
      prepareToHydrateHostTextInstance: function prepareToHydrateHostTextInstance(a) {
        return A(a.stateNode, a.memoizedProps, a);
      },
      popHydrationState: function popHydrationState(a) {
        if (a !== D) return !1;
        if (!n) return d(a), n = !0, !1;
        var c = a.type;
        if (5 !== a.tag || "head" !== c && "body" !== c && !e(c, a.memoizedProps)) for (c = t; c;) {
          b(a, c), c = k(c);
        }
        d(a);
        t = D ? k(a.stateNode) : null;
        return !0;
      }
    };
  },
      $f = function $f(a) {
    function b(a) {
      Z = Ga = !0;
      var b = a.stateNode;
      b.current === a ? l("177") : void 0;
      b.isReadyForCommit = !1;
      cb.current = null;
      if (1 < a.effectTag) {
        if (null !== a.lastEffect) {
          a.lastEffect.nextEffect = a;
          var c = a.firstEffect;
        } else c = a;
      } else c = a.firstEffect;
      ya();

      for (r = c; null !== r;) {
        var d = !1,
            e = void 0;

        try {
          for (; null !== r;) {
            var f = r.effectTag;
            f & 16 && ba(r);

            if (f & 128) {
              var g = r.alternate;
              null !== g && va(g);
            }

            switch (f & -242) {
              case 2:
                X(r);
                r.effectTag &= -3;
                break;

              case 6:
                X(r);
                r.effectTag &= -3;
                ea(r.alternate, r);
                break;

              case 4:
                ea(r.alternate, r);
                break;

              case 8:
                ka = !0, ca(r), ka = !1;
            }

            r = r.nextEffect;
          }
        } catch (Ic) {
          d = !0, e = Ic;
        }

        d && (null === r ? l("178") : void 0, k(r, e), null !== r && (r = r.nextEffect));
      }

      za();
      b.current = a;

      for (r = c; null !== r;) {
        c = !1;
        d = void 0;

        try {
          for (; null !== r;) {
            var h = r.effectTag;
            h & 36 && ra(r.alternate, r);
            h & 128 && ua(r);
            if (h & 64) switch (e = r, f = void 0, null !== S && (f = S.get(e), S["delete"](e), null == f && null !== e.alternate && (e = e.alternate, f = S.get(e), S["delete"](e))), null == f ? l("184") : void 0, e.tag) {
              case 2:
                e.stateNode.componentDidCatch(f.error, {
                  componentStack: f.componentStack
                });
                break;

              case 3:
                null === na && (na = f.error);
                break;

              default:
                l("157");
            }
            var db = r.nextEffect;
            r.nextEffect = null;
            r = db;
          }
        } catch (Ic) {
          c = !0, d = Ic;
        }

        c && (null === r ? l("178") : void 0, k(r, d), null !== r && (r = r.nextEffect));
      }

      Ga = Z = !1;
      "function" === typeof Zd && Zd(a.stateNode);
      wa && (wa.forEach(w), wa = null);
      null !== na && (a = na, na = null, y(a));
      b = b.current.expirationTime;
      0 === b && (Ha = S = null);
      return b;
    }

    function c(a) {
      for (;;) {
        var b = T(a.alternate, a, M),
            c = a["return"],
            d = a.sibling;
        var e = a;

        if (2147483647 === M || 2147483647 !== e.expirationTime) {
          if (2 !== e.tag && 3 !== e.tag) var f = 0;else f = e.updateQueue, f = null === f ? 0 : f.expirationTime;

          for (var g = e.child; null !== g;) {
            0 !== g.expirationTime && (0 === f || f > g.expirationTime) && (f = g.expirationTime), g = g.sibling;
          }

          e.expirationTime = f;
        }

        if (null !== b) return b;
        null !== c && (null === c.firstEffect && (c.firstEffect = a.firstEffect), null !== a.lastEffect && (null !== c.lastEffect && (c.lastEffect.nextEffect = a.firstEffect), c.lastEffect = a.lastEffect), 1 < a.effectTag && (null !== c.lastEffect ? c.lastEffect.nextEffect = a : c.firstEffect = a, c.lastEffect = a));
        if (null !== d) return d;
        if (null !== c) a = c;else {
          a.stateNode.isReadyForCommit = !0;
          break;
        }
      }

      return null;
    }

    function d(a) {
      var b = x(a.alternate, a, M);
      null === b && (b = c(a));
      cb.current = null;
      return b;
    }

    function e(a) {
      var b = Q(a.alternate, a, M);
      null === b && (b = c(a));
      cb.current = null;
      return b;
    }

    function f(a) {
      if (null !== S) {
        if (!(0 === M || M > a)) if (M <= ja) for (; null !== C;) {
          C = h(C) ? e(C) : d(C);
        } else for (; null !== C && !q();) {
          C = h(C) ? e(C) : d(C);
        }
      } else if (!(0 === M || M > a)) if (M <= ja) for (; null !== C;) {
        C = d(C);
      } else for (; null !== C && !q();) {
        C = d(C);
      }
    }

    function g(a, b) {
      Ga ? l("243") : void 0;
      Ga = !0;
      a.isReadyForCommit = !1;

      if (a !== U || b !== M || null === C) {
        for (; -1 < ta;) {
          sb[ta] = null, ta--;
        }

        tb = ma;
        la.current = ma;
        J.current = !1;
        P();
        U = a;
        M = b;
        C = vb(U.current, null, b);
      }

      var c = !1,
          d = null;

      try {
        f(b);
      } catch (Hc) {
        c = !0, d = Hc;
      }

      for (; c;) {
        if (V) {
          na = d;
          break;
        }

        var g = C;
        if (null === g) V = !0;else {
          var h = k(g, d);
          null === h ? l("183") : void 0;

          if (!V) {
            try {
              c = h;
              d = b;

              for (h = c; null !== g;) {
                switch (g.tag) {
                  case 2:
                    Ud(g);
                    break;

                  case 5:
                    m(g);
                    break;

                  case 3:
                    I(g);
                    break;

                  case 4:
                    I(g);
                }

                if (g === h || g.alternate === h) break;
                g = g["return"];
              }

              C = e(c);
              f(d);
            } catch (Hc) {
              c = !0;
              d = Hc;
              continue;
            }

            break;
          }
        }
      }

      b = na;
      V = Ga = !1;
      na = null;
      null !== b && y(b);
      return a.isReadyForCommit ? a.current.alternate : null;
    }

    function k(a, b) {
      var c = cb.current = null,
          d = !1,
          e = !1,
          f = null;
      if (3 === a.tag) c = a, n(a) && (V = !0);else for (var g = a["return"]; null !== g && null === c;) {
        2 === g.tag ? "function" === typeof g.stateNode.componentDidCatch && (d = !0, f = Ma(g), c = g, e = !0) : 3 === g.tag && (c = g);

        if (n(g)) {
          if (ka || null !== wa && (wa.has(g) || null !== g.alternate && wa.has(g.alternate))) return null;
          c = null;
          e = !1;
        }

        g = g["return"];
      }

      if (null !== c) {
        null === Ha && (Ha = new Set());
        Ha.add(c);
        var h = "";
        g = a;

        do {
          a: switch (g.tag) {
            case 0:
            case 1:
            case 2:
            case 5:
              var k = g._debugOwner,
                  l = g._debugSource;
              var m = Ma(g);
              var db = null;
              k && (db = Ma(k));
              k = l;
              m = "\n    in " + (m || "Unknown") + (k ? " (at " + k.fileName.replace(/^.*[\\\/]/, "") + ":" + k.lineNumber + ")" : db ? " (created by " + db + ")" : "");
              break a;

            default:
              m = "";
          }

          h += m;
          g = g["return"];
        } while (g);

        g = h;
        a = Ma(a);
        null === S && (S = new Map());
        b = {
          componentName: a,
          componentStack: g,
          error: b,
          errorBoundary: d ? c.stateNode : null,
          errorBoundaryFound: d,
          errorBoundaryName: f,
          willRetry: e
        };
        S.set(c, b);

        try {
          console.error(b.error);
        } catch (Zf) {
          console.error(Zf);
        }

        Z ? (null === wa && (wa = new Set()), wa.add(c)) : w(c);
        return c;
      }

      null === na && (na = b);
      return null;
    }

    function h(a) {
      return null !== S && (S.has(a) || null !== a.alternate && S.has(a.alternate));
    }

    function n(a) {
      return null !== Ha && (Ha.has(a) || null !== a.alternate && Ha.has(a.alternate));
    }

    function A() {
      return 20 * (((B() + 100) / 20 | 0) + 1);
    }

    function p(a) {
      return 0 !== Ba ? Ba : Ga ? Z ? 1 : M : !xa || a.internalContextTag & 1 ? A() : 1;
    }

    function t(a, b) {
      return u(a, b, !1);
    }

    function u(a, b, c) {
      for (; null !== a;) {
        if (0 === a.expirationTime || a.expirationTime > b) a.expirationTime = b;
        null !== a.alternate && (0 === a.alternate.expirationTime || a.alternate.expirationTime > b) && (a.alternate.expirationTime = b);
        if (null === a["return"]) if (3 === a.tag) {
          c = a.stateNode;
          !Ga && c === U && b <= M && (C = U = null, M = 0);
          var d = b;
          ia > Da && l("185");
          if (null === c.nextScheduledRoot) c.remainingExpirationTime = d, null === O ? (Ia = O = c, c.nextScheduledRoot = c) : (O = O.nextScheduledRoot = c, O.nextScheduledRoot = Ia);else {
            var e = c.remainingExpirationTime;
            if (0 === e || d < e) c.remainingExpirationTime = d;
          }
          R || (Ca ? ha && v(c, 1) : 1 === d ? E(1, null) : W || (W = !0, pa(G)));
        } else break;
        a = a["return"];
      }
    }

    function w(a) {
      u(a, 1, !0);
    }

    function B() {
      return ja = ((oa() - Aa) / 10 | 0) + 2;
    }

    function F() {
      var a = 0,
          b = null;
      if (null !== O) for (var c = O, d = Ia; null !== d;) {
        var e = d.remainingExpirationTime;

        if (0 === e) {
          null === c || null === O ? l("244") : void 0;

          if (d === d.nextScheduledRoot) {
            Ia = O = d.nextScheduledRoot = null;
            break;
          } else if (d === Ia) Ia = e = d.nextScheduledRoot, O.nextScheduledRoot = e, d.nextScheduledRoot = null;else if (d === O) {
            O = c;
            O.nextScheduledRoot = Ia;
            d.nextScheduledRoot = null;
            break;
          } else c.nextScheduledRoot = d.nextScheduledRoot, d.nextScheduledRoot = null;

          d = c.nextScheduledRoot;
        } else {
          if (0 === a || e < a) a = e, b = d;
          if (d === O) break;
          c = d;
          d = d.nextScheduledRoot;
        }
      }
      c = Ja;
      null !== c && c === b ? ia++ : ia = 0;
      Ja = b;
      da = a;
    }

    function G(a) {
      E(0, a);
    }

    function E(a, b) {
      Y = b;

      for (F(); null !== Ja && 0 !== da && (0 === a || da <= a) && !qa;) {
        v(Ja, da), F();
      }

      null !== Y && (W = !1);
      null === Ja || W || (W = !0, pa(G));
      Y = null;
      qa = !1;
      ia = 0;
      if (fa) throw a = sa, sa = null, fa = !1, a;
    }

    function v(a, c) {
      R ? l("245") : void 0;
      R = !0;

      if (c <= B()) {
        var d = a.finishedWork;
        null !== d ? (a.finishedWork = null, a.remainingExpirationTime = b(d)) : (a.finishedWork = null, d = g(a, c), null !== d && (a.remainingExpirationTime = b(d)));
      } else d = a.finishedWork, null !== d ? (a.finishedWork = null, a.remainingExpirationTime = b(d)) : (a.finishedWork = null, d = g(a, c), null !== d && (q() ? a.finishedWork = d : a.remainingExpirationTime = b(d)));

      R = !1;
    }

    function q() {
      return null === Y || Y.timeRemaining() > Ea ? !1 : qa = !0;
    }

    function y(a) {
      null === Ja ? l("246") : void 0;
      Ja.remainingExpirationTime = 0;
      fa || (fa = !0, sa = a);
    }

    var z = Xf(a),
        H = Yf(a),
        I = z.popHostContainer,
        m = z.popHostContext,
        P = z.resetHostContainer,
        N = Uf(a, z, H, t, p),
        x = N.beginWork,
        Q = N.beginFailedWork,
        T = Vf(a, z, H).completeWork;
    z = Wf(a, k);
    var ba = z.commitResetTextContent,
        X = z.commitPlacement,
        ca = z.commitDeletion,
        ea = z.commitWork,
        ra = z.commitLifeCycles,
        ua = z.commitAttachRef,
        va = z.commitDetachRef,
        oa = a.now,
        pa = a.scheduleDeferredCallback,
        xa = a.useSyncScheduling,
        ya = a.prepareForCommit,
        za = a.resetAfterCommit,
        Aa = oa(),
        ja = 2,
        Ba = 0,
        Ga = !1,
        C = null,
        U = null,
        M = 0,
        r = null,
        S = null,
        Ha = null,
        wa = null,
        na = null,
        V = !1,
        Z = !1,
        ka = !1,
        Ia = null,
        O = null,
        W = !1,
        R = !1,
        Ja = null,
        da = 0,
        qa = !1,
        fa = !1,
        sa = null,
        Y = null,
        Ca = !1,
        ha = !1,
        Da = 1E3,
        ia = 0,
        Ea = 1;
    return {
      computeAsyncExpiration: A,
      computeExpirationForFiber: p,
      scheduleWork: t,
      batchedUpdates: function batchedUpdates(a, b) {
        var c = Ca;
        Ca = !0;

        try {
          return a(b);
        } finally {
          (Ca = c) || R || E(1, null);
        }
      },
      unbatchedUpdates: function unbatchedUpdates(a) {
        if (Ca && !ha) {
          ha = !0;

          try {
            return a();
          } finally {
            ha = !1;
          }
        }

        return a();
      },
      flushSync: function flushSync(a) {
        var b = Ca;
        Ca = !0;

        try {
          a: {
            var c = Ba;
            Ba = 1;

            try {
              var d = a();
              break a;
            } finally {
              Ba = c;
            }

            d = void 0;
          }

          return d;
        } finally {
          Ca = b, R ? l("187") : void 0, E(1, null);
        }
      },
      deferredUpdates: function deferredUpdates(a) {
        var b = Ba;
        Ba = A();

        try {
          return a();
        } finally {
          Ba = b;
        }
      }
    };
  },
      Je = function Je(a) {
    function b(a) {
      a = nf(a);
      return null === a ? null : a.stateNode;
    }

    var c = a.getPublicInstance;
    a = $f(a);
    var d = a.computeAsyncExpiration,
        e = a.computeExpirationForFiber,
        f = a.scheduleWork;
    return {
      createContainer: function createContainer(a, b) {
        var c = new Q(3, null, 0);
        a = {
          current: c,
          containerInfo: a,
          pendingChildren: null,
          remainingExpirationTime: 0,
          isReadyForCommit: !1,
          finishedWork: null,
          context: null,
          pendingContext: null,
          hydrate: b,
          nextScheduledRoot: null
        };
        return c.stateNode = a;
      },
      updateContainer: function updateContainer(a, b, c, n) {
        var g = b.current;

        if (c) {
          c = c._reactInternalFiber;
          var h;

          b: {
            2 === Na(c) && 2 === c.tag ? void 0 : l("170");

            for (h = c; 3 !== h.tag;) {
              if (Ra(h)) {
                h = h.stateNode.__reactInternalMemoizedMergedChildContext;
                break b;
              }

              (h = h["return"]) ? void 0 : l("171");
            }

            h = h.stateNode.context;
          }

          c = Ra(c) ? Wd(c, h) : h;
        } else c = ma;

        null === b.context ? b.context = c : b.pendingContext = c;
        b = n;
        b = void 0 === b ? null : b;
        n = null != a && null != a.type && null != a.type.prototype && !0 === a.type.prototype.unstable_isAsyncReactComponent ? d() : e(g);
        yb(g, {
          expirationTime: n,
          partialState: {
            element: a
          },
          callback: b,
          isReplace: !1,
          isForced: !1,
          nextCallback: null,
          next: null
        });
        f(g, n);
      },
      batchedUpdates: a.batchedUpdates,
      unbatchedUpdates: a.unbatchedUpdates,
      deferredUpdates: a.deferredUpdates,
      flushSync: a.flushSync,
      getPublicRootInstance: function getPublicRootInstance(a) {
        a = a.current;
        if (!a.child) return null;

        switch (a.child.tag) {
          case 5:
            return c(a.child.stateNode);

          default:
            return a.child.stateNode;
        }
      },
      findHostInstance: b,
      findHostInstanceWithNoPortals: function findHostInstanceWithNoPortals(a) {
        a = of(a);
        return null === a ? null : a.stateNode;
      },
      injectIntoDevTools: function injectIntoDevTools(a) {
        var c = a.findFiberByHostInstance;
        return rf(B({}, a, {
          findHostInstanceByFiber: function findHostInstanceByFiber(a) {
            return b(a);
          },
          findFiberByHostInstance: function findFiberByHostInstance(a) {
            return c ? c(a) : null;
          }
        }));
      }
    };
  },
      Ke = Object.freeze({
    default: Je
  }),
      Jc = Ke && Je || Ke,
      ag = Jc["default"] ? Jc["default"] : Jc,
      Le = "object" === (typeof performance === "undefined" ? "undefined" : _typeof(performance)) && "function" === typeof performance.now,
      Me = void 0;

  Me = Le ? function () {
    return performance.now();
  } : function () {
    return Date.now();
  };
  var Fb = void 0;
  if (H.canUseDOM) {
    if ("function" !== typeof requestIdleCallback) {
      var Kc = null,
          Lc = !1,
          Mc = !1,
          Gb = 0,
          Hb = 33,
          eb = 33;
      var bg = Le ? {
        timeRemaining: function timeRemaining() {
          return Gb - performance.now();
        }
      } : {
        timeRemaining: function timeRemaining() {
          return Gb - Date.now();
        }
      };
      var Ne = "__reactIdleCallback$" + Math.random().toString(36).slice(2);
      window.addEventListener("message", function (a) {
        a.source === window && a.data === Ne && (Lc = !1, a = Kc, Kc = null, null !== a && a(bg));
      }, !1);

      var cg = function cg(a) {
        Mc = !1;
        var b = a - Gb + eb;
        b < eb && Hb < eb ? (8 > b && (b = 8), eb = b < Hb ? Hb : b) : Hb = b;
        Gb = a + eb;
        Lc || (Lc = !0, window.postMessage(Ne, "*"));
      };

      Fb = function Fb(a) {
        Kc = a;
        Mc || (Mc = !0, requestAnimationFrame(cg));
        return 0;
      };
    } else Fb = requestIdleCallback;
  } else Fb = function Fb(a) {
    setTimeout(function () {
      a({
        timeRemaining: function timeRemaining() {
          return Infinity;
        }
      });
    });
    return 0;
  };

  var vf = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,
      ge = {},
      fe = {},
      Ib = void 0,
      wc = function (a) {
    return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function (b, c, d, e) {
      MSApp.execUnsafeLocalFunction(function () {
        return a(b, c, d, e);
      });
    } : a;
  }(function (a, b) {
    if ("http://www.w3.org/2000/svg" !== a.namespaceURI || "innerHTML" in a) a.innerHTML = b;else {
      Ib = Ib || document.createElement("div");
      Ib.innerHTML = "\x3csvg\x3e" + b + "\x3c/svg\x3e";

      for (b = Ib.firstChild; a.firstChild;) {
        a.removeChild(a.firstChild);
      }

      for (; b.firstChild;) {
        a.appendChild(b.firstChild);
      }
    }
  }),
      dg = /["'&<>]/,
      Oe = function Oe(a, b) {
    if (b) {
      var c = a.firstChild;

      if (c && c === a.lastChild && 3 === c.nodeType) {
        c.nodeValue = b;
        return;
      }
    }

    a.textContent = b;
  };

  H.canUseDOM && ("textContent" in document.documentElement || (Oe = function Oe(a, b) {
    if (3 === a.nodeType) a.nodeValue = b;else {
      if ("boolean" === typeof b || "number" === typeof b) b = "" + b;else {
        b = "" + b;
        var c = dg.exec(b);

        if (c) {
          var d = "",
              e,
              f = 0;

          for (e = c.index; e < b.length; e++) {
            switch (b.charCodeAt(e)) {
              case 34:
                c = "\x26quot;";
                break;

              case 38:
                c = "\x26amp;";
                break;

              case 39:
                c = "\x26#x27;";
                break;

              case 60:
                c = "\x26lt;";
                break;

              case 62:
                c = "\x26gt;";
                break;

              default:
                continue;
            }

            f !== e && (d += b.substring(f, e));
            f = e + 1;
            d += c;
          }

          b = f !== e ? d + b.substring(f, e) : d;
        }
      }
      wc(a, b);
    }
  }));
  var xc = Oe,
      Za = {
    animationIterationCount: !0,
    borderImageOutset: !0,
    borderImageSlice: !0,
    borderImageWidth: !0,
    boxFlex: !0,
    boxFlexGroup: !0,
    boxOrdinalGroup: !0,
    columnCount: !0,
    columns: !0,
    flex: !0,
    flexGrow: !0,
    flexPositive: !0,
    flexShrink: !0,
    flexNegative: !0,
    flexOrder: !0,
    gridRow: !0,
    gridRowEnd: !0,
    gridRowSpan: !0,
    gridRowStart: !0,
    gridColumn: !0,
    gridColumnEnd: !0,
    gridColumnSpan: !0,
    gridColumnStart: !0,
    fontWeight: !0,
    lineClamp: !0,
    lineHeight: !0,
    opacity: !0,
    order: !0,
    orphans: !0,
    tabSize: !0,
    widows: !0,
    zIndex: !0,
    zoom: !0,
    fillOpacity: !0,
    floodOpacity: !0,
    stopOpacity: !0,
    strokeDasharray: !0,
    strokeDashoffset: !0,
    strokeMiterlimit: !0,
    strokeOpacity: !0,
    strokeWidth: !0
  },
      eg = ["Webkit", "ms", "Moz", "O"];
  Object.keys(Za).forEach(function (a) {
    eg.forEach(function (b) {
      b = b + a.charAt(0).toUpperCase() + a.substring(1);
      Za[b] = Za[a];
    });
  });
  var xf = B({
    menuitem: !0
  }, {
    area: !0,
    base: !0,
    br: !0,
    col: !0,
    embed: !0,
    hr: !0,
    img: !0,
    input: !0,
    keygen: !0,
    link: !0,
    meta: !0,
    param: !0,
    source: !0,
    track: !0,
    wbr: !0
  }),
      $a = E.thatReturns(""),
      R = {
    topAbort: "abort",
    topCanPlay: "canplay",
    topCanPlayThrough: "canplaythrough",
    topDurationChange: "durationchange",
    topEmptied: "emptied",
    topEncrypted: "encrypted",
    topEnded: "ended",
    topError: "error",
    topLoadedData: "loadeddata",
    topLoadedMetadata: "loadedmetadata",
    topLoadStart: "loadstart",
    topPause: "pause",
    topPlay: "play",
    topPlaying: "playing",
    topProgress: "progress",
    topRateChange: "ratechange",
    topSeeked: "seeked",
    topSeeking: "seeking",
    topStalled: "stalled",
    topSuspend: "suspend",
    topTimeUpdate: "timeupdate",
    topVolumeChange: "volumechange",
    topWaiting: "waiting"
  },
      fg = Object.freeze({
    createElement: qe,
    createTextNode: re,
    setInitialProperties: se,
    diffProperties: te,
    updateProperties: ue,
    diffHydratedProperties: ve,
    diffHydratedText: we,
    warnForUnmatchedText: function warnForUnmatchedText(a, b) {},
    warnForDeletedHydratableElement: function warnForDeletedHydratableElement(a, b) {},
    warnForDeletedHydratableText: function warnForDeletedHydratableText(a, b) {},
    warnForInsertedHydratedElement: function warnForInsertedHydratedElement(a, b, c) {},
    warnForInsertedHydratedText: function warnForInsertedHydratedText(a, b) {},
    restoreControlledState: function restoreControlledState(a, b, c) {
      switch (b) {
        case "input":
          qc(a, c);
          b = c.name;

          if ("radio" === c.type && null != b) {
            for (c = a; c.parentNode;) {
              c = c.parentNode;
            }

            c = c.querySelectorAll("input[name\x3d" + JSON.stringify("" + b) + '][type\x3d"radio"]');

            for (b = 0; b < c.length; b++) {
              var d = c[b];

              if (d !== a && d.form === a.form) {
                var e = Zc(d);
                e ? void 0 : l("90");
                qc(d, e);
              }
            }
          }

          break;

        case "textarea":
          me(a, c);
          break;

        case "select":
          b = c.value, null != b && W(a, !!c.multiple, b, !1);
      }
    }
  });
  Ge.injectFiberControlledHostComponent(fg);
  var Nc = null,
      Oc = null,
      F = ag({
    getRootHostContext: function getRootHostContext(a) {
      var b = a.nodeType;

      switch (b) {
        case 9:
        case 11:
          a = (a = a.documentElement) ? a.namespaceURI : tc(null, "");
          break;

        default:
          b = 8 === b ? a.parentNode : a, a = b.namespaceURI || null, b = b.tagName, a = tc(a, b);
      }

      return a;
    },
    getChildHostContext: function getChildHostContext(a, b) {
      return tc(a, b);
    },
    getPublicInstance: function getPublicInstance(a) {
      return a;
    },
    prepareForCommit: function prepareForCommit() {
      Nc = Oa;
      var a = bc();

      if ($b(a)) {
        if ("selectionStart" in a) var b = {
          start: a.selectionStart,
          end: a.selectionEnd
        };else a: {
          var c = window.getSelection && window.getSelection();

          if (c && 0 !== c.rangeCount) {
            b = c.anchorNode;
            var d = c.anchorOffset,
                e = c.focusNode;
            c = c.focusOffset;

            try {
              b.nodeType, e.nodeType;
            } catch (K) {
              b = null;
              break a;
            }

            var f = 0,
                g = -1,
                k = -1,
                h = 0,
                l = 0,
                n = a,
                p = null;

            b: for (;;) {
              for (var t;;) {
                n !== b || 0 !== d && 3 !== n.nodeType || (g = f + d);
                n !== e || 0 !== c && 3 !== n.nodeType || (k = f + c);
                3 === n.nodeType && (f += n.nodeValue.length);
                if (null === (t = n.firstChild)) break;
                p = n;
                n = t;
              }

              for (;;) {
                if (n === a) break b;
                p === b && ++h === d && (g = f);
                p === e && ++l === c && (k = f);
                if (null !== (t = n.nextSibling)) break;
                n = p;
                p = n.parentNode;
              }

              n = t;
            }

            b = -1 === g || -1 === k ? null : {
              start: g,
              end: k
            };
          } else b = null;
        }
        b = b || {
          start: 0,
          end: 0
        };
      } else b = null;

      Oc = {
        focusedElem: a,
        selectionRange: b
      };
      Xb(!1);
    },
    resetAfterCommit: function resetAfterCommit() {
      var a = Oc,
          b = bc(),
          c = a.focusedElem,
          d = a.selectionRange;

      if (b !== c && Gd(document.documentElement, c)) {
        if ($b(c)) if (b = d.start, a = d.end, void 0 === a && (a = b), "selectionStart" in c) c.selectionStart = b, c.selectionEnd = Math.min(a, c.value.length);else if (window.getSelection) {
          b = window.getSelection();
          var e = c[cd()].length;
          a = Math.min(d.start, e);
          d = void 0 === d.end ? a : Math.min(d.end, e);
          !b.extend && a > d && (e = d, d = a, a = e);
          e = Jd(c, a);
          var f = Jd(c, d);

          if (e && f && (1 !== b.rangeCount || b.anchorNode !== e.node || b.anchorOffset !== e.offset || b.focusNode !== f.node || b.focusOffset !== f.offset)) {
            var g = document.createRange();
            g.setStart(e.node, e.offset);
            b.removeAllRanges();
            a > d ? (b.addRange(g), b.extend(f.node, f.offset)) : (g.setEnd(f.node, f.offset), b.addRange(g));
          }
        }
        b = [];

        for (a = c; a = a.parentNode;) {
          1 === a.nodeType && b.push({
            element: a,
            left: a.scrollLeft,
            top: a.scrollTop
          });
        }

        try {
          c.focus();
        } catch (k) {}

        for (c = 0; c < b.length; c++) {
          a = b[c], a.element.scrollLeft = a.left, a.element.scrollTop = a.top;
        }
      }

      Oc = null;
      Xb(Nc);
      Nc = null;
    },
    createInstance: function createInstance(a, b, c, d, e) {
      a = qe(a, b, c, d);
      a[P] = e;
      a[ha] = b;
      return a;
    },
    appendInitialChild: function appendInitialChild(a, b) {
      a.appendChild(b);
    },
    finalizeInitialChildren: function finalizeInitialChildren(a, b, c, d) {
      se(a, b, c, d);

      a: {
        switch (b) {
          case "button":
          case "input":
          case "select":
          case "textarea":
            a = !!c.autoFocus;
            break a;
        }

        a = !1;
      }

      return a;
    },
    prepareUpdate: function prepareUpdate(a, b, c, d, e, f) {
      return te(a, b, c, d, e);
    },
    shouldSetTextContent: function shouldSetTextContent(a, b) {
      return "textarea" === a || "string" === typeof b.children || "number" === typeof b.children || "object" === _typeof(b.dangerouslySetInnerHTML) && null !== b.dangerouslySetInnerHTML && "string" === typeof b.dangerouslySetInnerHTML.__html;
    },
    shouldDeprioritizeSubtree: function shouldDeprioritizeSubtree(a, b) {
      return !!b.hidden;
    },
    createTextInstance: function createTextInstance(a, b, c, d) {
      a = re(a, b);
      a[P] = d;
      return a;
    },
    now: Me,
    mutation: {
      commitMount: function commitMount(a, b, c, d) {
        a.focus();
      },
      commitUpdate: function commitUpdate(a, b, c, d, e, f) {
        a[ha] = e;
        ue(a, b, c, d, e);
      },
      resetTextContent: function resetTextContent(a) {
        a.textContent = "";
      },
      commitTextUpdate: function commitTextUpdate(a, b, c) {
        a.nodeValue = c;
      },
      appendChild: function appendChild(a, b) {
        a.appendChild(b);
      },
      appendChildToContainer: function appendChildToContainer(a, b) {
        8 === a.nodeType ? a.parentNode.insertBefore(b, a) : a.appendChild(b);
      },
      insertBefore: function insertBefore(a, b, c) {
        a.insertBefore(b, c);
      },
      insertInContainerBefore: function insertInContainerBefore(a, b, c) {
        8 === a.nodeType ? a.parentNode.insertBefore(b, c) : a.insertBefore(b, c);
      },
      removeChild: function removeChild(a, b) {
        a.removeChild(b);
      },
      removeChildFromContainer: function removeChildFromContainer(a, b) {
        8 === a.nodeType ? a.parentNode.removeChild(b) : a.removeChild(b);
      }
    },
    hydration: {
      canHydrateInstance: function canHydrateInstance(a, b, c) {
        return 1 === a.nodeType && b.toLowerCase() === a.nodeName.toLowerCase();
      },
      canHydrateTextInstance: function canHydrateTextInstance(a, b) {
        return "" === b ? !1 : 3 === a.nodeType;
      },
      getNextHydratableSibling: function getNextHydratableSibling(a) {
        for (a = a.nextSibling; a && 1 !== a.nodeType && 3 !== a.nodeType;) {
          a = a.nextSibling;
        }

        return a;
      },
      getFirstHydratableChild: function getFirstHydratableChild(a) {
        for (a = a.firstChild; a && 1 !== a.nodeType && 3 !== a.nodeType;) {
          a = a.nextSibling;
        }

        return a;
      },
      hydrateInstance: function hydrateInstance(a, b, c, d, e, f) {
        a[P] = f;
        a[ha] = c;
        return ve(a, b, c, e, d);
      },
      hydrateTextInstance: function hydrateTextInstance(a, b, c) {
        a[P] = c;
        return we(a, b);
      },
      didNotMatchHydratedContainerTextInstance: function didNotMatchHydratedContainerTextInstance(a, b, c) {},
      didNotMatchHydratedTextInstance: function didNotMatchHydratedTextInstance(a, b, c, d, e) {},
      didNotHydrateContainerInstance: function didNotHydrateContainerInstance(a, b) {},
      didNotHydrateInstance: function didNotHydrateInstance(a, b, c, d) {},
      didNotFindHydratableContainerInstance: function didNotFindHydratableContainerInstance(a, b, c) {},
      didNotFindHydratableContainerTextInstance: function didNotFindHydratableContainerTextInstance(a, b) {},
      didNotFindHydratableInstance: function didNotFindHydratableInstance(a, b, c, d, e) {},
      didNotFindHydratableTextInstance: function didNotFindHydratableTextInstance(a, b, c, d) {}
    },
    scheduleDeferredCallback: Fb,
    useSyncScheduling: !0
  });
  Ub = F.batchedUpdates;

  ye.prototype.render = function (a, b) {
    F.updateContainer(a, this._reactRootContainer, null, b);
  };

  ye.prototype.unmount = function (a) {
    F.updateContainer(null, this._reactRootContainer, null, a);
  };

  var Pe = {
    createPortal: xe,
    findDOMNode: function findDOMNode(a) {
      if (null == a) return null;
      if (1 === a.nodeType) return a;
      var b = a._reactInternalFiber;
      if (b) return F.findHostInstance(b);
      "function" === typeof a.render ? l("188") : l("213", Object.keys(a));
    },
    hydrate: function hydrate(a, b, c) {
      return Bb(null, a, b, !0, c);
    },
    render: function render(a, b, c) {
      return Bb(null, a, b, !1, c);
    },
    unstable_renderSubtreeIntoContainer: function unstable_renderSubtreeIntoContainer(a, b, c, d) {
      null == a || void 0 === a._reactInternalFiber ? l("38") : void 0;
      return Bb(a, b, c, !1, d);
    },
    unmountComponentAtNode: function unmountComponentAtNode(a) {
      yc(a) ? void 0 : l("40");
      return a._reactRootContainer ? (F.unbatchedUpdates(function () {
        Bb(null, null, a, !1, function () {
          a._reactRootContainer = null;
        });
      }), !0) : !1;
    },
    unstable_createPortal: xe,
    unstable_batchedUpdates: Sb,
    unstable_deferredUpdates: F.deferredUpdates,
    flushSync: F.flushSync,
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
      EventPluginHub: Ef,
      EventPluginRegistry: Df,
      EventPropagators: Ff,
      ReactControlledComponent: Jf,
      ReactDOMComponentTree: Ee,
      ReactDOMEventListener: Mf
    }
  };
  F.injectIntoDevTools({
    findFiberByHostInstance: Y,
    bundleType: 0,
    version: "16.1.0",
    rendererPackageName: "react-dom"
  });
  var Qe = Object.freeze({
    default: Pe
  }),
      Pc = Qe && Pe || Qe;
  return Pc["default"] ? Pc["default"] : Pc;
});

},{"react":"react"}],"react-onclickoutside":[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * A mixin for handling (effectively) onClickOutside for React components.
 * Note that we're not intercepting any events in this approach, and we're
 * not using double events for capturing and discarding in layers or wrappers.
 *
 * The idea is that components define function
 *
 *   handleClickOutside: function() { ... }
 *
 * If no such function is defined, an error will be thrown, as this means
 * either it still needs to be written, or the component should not be using
 * this mixing since it will not exhibit onClickOutside behaviour.
 *
 */
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['react-dom'], function (reactDom) {
      return factory(root, reactDom);
    });
  } else if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object') {
    // Node. Note that this does not work with strict
    // CommonJS, but only CommonJS-like environments
    // that support module.exports
    module.exports = factory(root, require('react-dom'));
  } else {
    // Browser globals (root is window)
    root.OnClickOutside = factory(root, ReactDOM);
  }
})(void 0, function (root, ReactDOM) {
  "use strict"; // Use a parallel array because we can't use
  // objects as keys, they get toString-coerced

  var registeredComponents = [];
  var handlers = [];
  var IGNORE_CLASS = 'ignore-react-onclickoutside';

  var isSourceFound = function isSourceFound(source, localNode) {
    if (source === localNode) {
      return true;
    } // SVG <use/> elements do not technically reside in the rendered DOM, so
    // they do not have classList directly, but they offer a link to their
    // corresponding element, which can have classList. This extra check is for
    // that case.
    // See: http://www.w3.org/TR/SVG11/struct.html#InterfaceSVGUseElement
    // Discussion: https://github.com/Pomax/react-onclickoutside/pull/17


    if (source.correspondingElement) {
      return source.correspondingElement.classList.contains(IGNORE_CLASS);
    }

    return source.classList.contains(IGNORE_CLASS);
  };

  return {
    componentDidMount: function componentDidMount() {
      if (typeof this.handleClickOutside !== "function") throw new Error("Component lacks a handleClickOutside(event) function for processing outside click events.");

      var fn = this.__outsideClickHandler = function (localNode, eventHandler) {
        return function (evt) {
          evt.stopPropagation();
          var source = evt.target;
          var found = false; // If source=local then this event came from "somewhere"
          // inside and should be ignored. We could handle this with
          // a layered approach, too, but that requires going back to
          // thinking in terms of Dom node nesting, running counter
          // to React's "you shouldn't care about the DOM" philosophy.

          while (source.parentNode) {
            found = isSourceFound(source, localNode);
            if (found) return;
            source = source.parentNode;
          }

          eventHandler(evt);
        };
      }(ReactDOM.findDOMNode(this), this.handleClickOutside);

      var pos = registeredComponents.length;
      registeredComponents.push(this);
      handlers[pos] = fn; // If there is a truthy disableOnClickOutside property for this
      // component, don't immediately start listening for outside events.

      if (!this.props.disableOnClickOutside) {
        this.enableOnClickOutside();
      }
    },
    componentWillUnmount: function componentWillUnmount() {
      this.disableOnClickOutside();
      this.__outsideClickHandler = false;
      var pos = registeredComponents.indexOf(this);

      if (pos > -1) {
        if (handlers[pos]) {
          // clean up so we don't leak memory
          handlers.splice(pos, 1);
          registeredComponents.splice(pos, 1);
        }
      }
    },

    /**
     * Can be called to explicitly enable event listening
     * for clicks and touches outside of this element.
     */
    enableOnClickOutside: function enableOnClickOutside() {
      var fn = this.__outsideClickHandler;

      if (document != null) {
        document.addEventListener("mousedown", fn);
        document.addEventListener("touchstart", fn);
      }
    },

    /**
     * Can be called to explicitly disable event listening
     * for clicks and touches outside of this element.
     */
    disableOnClickOutside: function disableOnClickOutside() {
      var fn = this.__outsideClickHandler;

      if (document != null) {
        document.removeEventListener("mousedown", fn);
        document.removeEventListener("touchstart", fn);
      }
    }
  };
});

},{"react-dom":"react-dom"}],"react":[function(require,module,exports){
/** @license React v16.1.0
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function (p, l) {
  "object" === (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" !== typeof module ? module.exports = l() : "function" === typeof define && define.amd ? define(l) : p.React = l();
})(void 0, function () {
  function p(a) {
    for (var b = arguments.length - 1, c = "Minified React error #" + a + "; visit http://facebook.github.io/react/docs/error-decoder.html?invariant\x3d" + a, e = 0; e < b; e++) {
      c += "\x26args[]\x3d" + encodeURIComponent(arguments[e + 1]);
    }

    b = Error(c + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.");
    b.name = "Invariant Violation";
    b.framesToPop = 1;
    throw b;
  }

  function l(a) {
    return function () {
      return a;
    };
  }

  function n(a, b, c) {
    this.props = a;
    this.context = b;
    this.refs = v;
    this.updater = c || w;
  }

  function x(a, b, c) {
    this.props = a;
    this.context = b;
    this.refs = v;
    this.updater = c || w;
  }

  function y() {}

  function z(a, b, c) {
    this.props = a;
    this.context = b;
    this.refs = v;
    this.updater = c || w;
  }

  function F(a, b, c) {
    var e,
        f = {},
        d = null,
        h = null;
    if (null != b) for (e in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (d = "" + b.key), b) {
      G.call(b, e) && !H.hasOwnProperty(e) && (f[e] = b[e]);
    }
    var g = arguments.length - 2;
    if (1 === g) f.children = c;else if (1 < g) {
      for (var k = Array(g), m = 0; m < g; m++) {
        k[m] = arguments[m + 2];
      }

      f.children = k;
    }
    if (a && a.defaultProps) for (e in g = a.defaultProps, g) {
      void 0 === f[e] && (f[e] = g[e]);
    }
    return {
      $$typeof: r,
      type: a,
      key: d,
      ref: h,
      props: f,
      _owner: A.current
    };
  }

  function B(a) {
    return "object" === _typeof(a) && null !== a && a.$$typeof === r;
  }

  function O(a) {
    var b = {
      "\x3d": "\x3d0",
      ":": "\x3d2"
    };
    return "$" + ("" + a).replace(/[=:]/g, function (a) {
      return b[a];
    });
  }

  function I(a, b, c, e) {
    if (t.length) {
      var f = t.pop();
      f.result = a;
      f.keyPrefix = b;
      f.func = c;
      f.context = e;
      f.count = 0;
      return f;
    }

    return {
      result: a,
      keyPrefix: b,
      func: c,
      context: e,
      count: 0
    };
  }

  function J(a) {
    a.result = null;
    a.keyPrefix = null;
    a.func = null;
    a.context = null;
    a.count = 0;
    10 > t.length && t.push(a);
  }

  function q(a, b, c, e) {
    var f = _typeof(a);

    if ("undefined" === f || "boolean" === f) a = null;
    if (null === a || "string" === f || "number" === f || "object" === f && a.$$typeof === P || "object" === f && a.$$typeof === Q) return c(e, a, "" === b ? "." + C(a, 0) : b), 1;
    var d = 0;
    b = "" === b ? "." : b + ":";
    if (Array.isArray(a)) for (var h = 0; h < a.length; h++) {
      f = a[h];
      var g = b + C(f, h);
      d += q(f, g, c, e);
    } else if (g = K && a[K] || a["@@iterator"], "function" === typeof g) for (a = g.call(a), h = 0; !(f = a.next()).done;) {
      f = f.value, g = b + C(f, h++), d += q(f, g, c, e);
    } else "object" === f && (c = "" + a, p("31", "[object Object]" === c ? "object with keys {" + Object.keys(a).join(", ") + "}" : c, ""));
    return d;
  }

  function C(a, b) {
    return "object" === _typeof(a) && null !== a && null != a.key ? O(a.key) : b.toString(36);
  }

  function R(a, b, c) {
    a.func.call(a.context, b, a.count++);
  }

  function S(a, b, c) {
    var e = a.result,
        f = a.keyPrefix;
    a = a.func.call(a.context, b, a.count++);
    Array.isArray(a) ? D(a, e, c, E.thatReturnsArgument) : null != a && (B(a) && (b = f + (!a.key || b && b.key === a.key ? "" : ("" + a.key).replace(L, "$\x26/") + "/") + c, a = {
      $$typeof: r,
      type: a.type,
      key: b,
      ref: a.ref,
      props: a.props,
      _owner: a._owner
    }), e.push(a));
  }

  function D(a, b, c, e, f) {
    var d = "";
    null != c && (d = ("" + c).replace(L, "$\x26/") + "/");
    b = I(b, d, e, f);
    null == a || q(a, "", S, b);
    J(b);
  }

  var M = Object.getOwnPropertySymbols,
      T = Object.prototype.hasOwnProperty,
      U = Object.prototype.propertyIsEnumerable,
      u = function () {
    try {
      if (!Object.assign) return !1;
      var a = new String("abc");
      a[5] = "de";
      if ("5" === Object.getOwnPropertyNames(a)[0]) return !1;
      var b = {};

      for (a = 0; 10 > a; a++) {
        b["_" + String.fromCharCode(a)] = a;
      }

      if ("0123456789" !== Object.getOwnPropertyNames(b).map(function (a) {
        return b[a];
      }).join("")) return !1;
      var c = {};
      "abcdefghijklmnopqrst".split("").forEach(function (a) {
        c[a] = a;
      });
      return "abcdefghijklmnopqrst" !== Object.keys(Object.assign({}, c)).join("") ? !1 : !0;
    } catch (e) {
      return !1;
    }
  }() ? Object.assign : function (a, b) {
    if (null === a || void 0 === a) throw new TypeError("Object.assign cannot be called with null or undefined");
    var c = Object(a);

    for (var e, f = 1; f < arguments.length; f++) {
      var d = Object(arguments[f]);

      for (var h in d) {
        T.call(d, h) && (c[h] = d[h]);
      }

      if (M) {
        e = M(d);

        for (var g = 0; g < e.length; g++) {
          U.call(d, e[g]) && (c[e[g]] = d[e[g]]);
        }
      }
    }

    return c;
  },
      v = {},
      d = function d() {};

  d.thatReturns = l;
  d.thatReturnsFalse = l(!1);
  d.thatReturnsTrue = l(!0);
  d.thatReturnsNull = l(null);

  d.thatReturnsThis = function () {
    return this;
  };

  d.thatReturnsArgument = function (a) {
    return a;
  };

  var E = d,
      w = {
    isMounted: function isMounted(a) {
      return !1;
    },
    enqueueForceUpdate: function enqueueForceUpdate(a, b, c) {},
    enqueueReplaceState: function enqueueReplaceState(a, b, c, e) {},
    enqueueSetState: function enqueueSetState(a, b, c, e) {}
  };
  n.prototype.isReactComponent = {};

  n.prototype.setState = function (a, b) {
    "object" !== _typeof(a) && "function" !== typeof a && null != a ? p("85") : void 0;
    this.updater.enqueueSetState(this, a, b, "setState");
  };

  n.prototype.forceUpdate = function (a) {
    this.updater.enqueueForceUpdate(this, a, "forceUpdate");
  };

  y.prototype = n.prototype;
  d = x.prototype = new y();
  d.constructor = x;
  u(d, n.prototype);
  d.isPureReactComponent = !0;
  d = z.prototype = new y();
  d.constructor = z;
  u(d, n.prototype);
  d.unstable_isAsyncReactComponent = !0;

  d.render = function () {
    return this.props.children;
  };

  var A = {
    current: null
  },
      G = Object.prototype.hasOwnProperty,
      r = "function" === typeof Symbol && Symbol["for"] && Symbol["for"]("react.element") || 60103,
      H = {
    key: !0,
    ref: !0,
    __self: !0,
    __source: !0
  },
      K = "function" === typeof Symbol && Symbol.iterator,
      P = "function" === typeof Symbol && Symbol["for"] && Symbol["for"]("react.element") || 60103,
      Q = "function" === typeof Symbol && Symbol["for"] && Symbol["for"]("react.portal") || 60106,
      L = /\/+/g,
      t = [];
  "function" === typeof Symbol && Symbol["for"] && Symbol["for"]("react.fragment");
  d = {
    Children: {
      map: function map(a, b, c) {
        if (null == a) return a;
        var e = [];
        D(a, e, null, b, c);
        return e;
      },
      forEach: function forEach(a, b, c) {
        if (null == a) return a;
        b = I(null, null, b, c);
        null == a || q(a, "", R, b);
        J(b);
      },
      count: function count(a, b) {
        return null == a ? 0 : q(a, "", E.thatReturnsNull, null);
      },
      toArray: function toArray(a) {
        var b = [];
        D(a, b, null, E.thatReturnsArgument);
        return b;
      },
      only: function only(a) {
        B(a) ? void 0 : p("143");
        return a;
      }
    },
    Component: n,
    PureComponent: x,
    unstable_AsyncComponent: z,
    createElement: F,
    cloneElement: function cloneElement(a, b, c) {
      var e = u({}, a.props),
          d = a.key,
          l = a.ref,
          h = a._owner;

      if (null != b) {
        void 0 !== b.ref && (l = b.ref, h = A.current);
        void 0 !== b.key && (d = "" + b.key);
        if (a.type && a.type.defaultProps) var g = a.type.defaultProps;

        for (k in b) {
          G.call(b, k) && !H.hasOwnProperty(k) && (e[k] = void 0 === b[k] && void 0 !== g ? g[k] : b[k]);
        }
      }

      var k = arguments.length - 2;
      if (1 === k) e.children = c;else if (1 < k) {
        g = Array(k);

        for (var m = 0; m < k; m++) {
          g[m] = arguments[m + 2];
        }

        e.children = g;
      }
      return {
        $$typeof: r,
        type: a.type,
        key: d,
        ref: l,
        props: e,
        _owner: h
      };
    },
    createFactory: function createFactory(a) {
      var b = F.bind(null, a);
      b.type = a;
      return b;
    },
    isValidElement: B,
    version: "16.1.0",
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
      ReactCurrentOwner: A,
      assign: u
    }
  };
  var N = Object.freeze({
    default: d
  });
  d = N && d || N;
  return d["default"] ? d["default"] : d;
});

},{}],"svg-injector":[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * SVGInjector v1.1.3 - Fast, caching, dynamic inline SVG DOM injection library
 * https://github.com/iconic/SVGInjector
 *
 * Copyright (c) 2014-2015 Waybury <hello@waybury.com>
 * @license MIT
 */
(function (window, document) {
  'use strict'; // Environment

  var isLocal = window.location.protocol === 'file:';
  var hasSvgSupport = document.implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');

  function uniqueClasses(list) {
    list = list.split(' ');
    var hash = {};
    var i = list.length;
    var out = [];

    while (i--) {
      if (!hash.hasOwnProperty(list[i])) {
        hash[list[i]] = 1;
        out.unshift(list[i]);
      }
    }

    return out.join(' ');
  }
  /**
   * cache (or polyfill for <= IE8) Array.forEach()
   * source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach
   */


  var forEach = Array.prototype.forEach || function (fn, scope) {
    if (this === void 0 || this === null || typeof fn !== 'function') {
      throw new TypeError();
    }
    /* jshint bitwise: false */


    var i,
        len = this.length >>> 0;
    /* jshint bitwise: true */

    for (i = 0; i < len; ++i) {
      if (i in this) {
        fn.call(scope, this[i], i, this);
      }
    }
  }; // SVG Cache


  var svgCache = {};
  var injectCount = 0;
  var injectedElements = []; // Request Queue

  var requestQueue = []; // Script running status

  var ranScripts = {};

  var cloneSvg = function cloneSvg(sourceSvg) {
    return sourceSvg.cloneNode(true);
  };

  var queueRequest = function queueRequest(url, callback) {
    requestQueue[url] = requestQueue[url] || [];
    requestQueue[url].push(callback);
  };

  var processRequestQueue = function processRequestQueue(url) {
    for (var i = 0, len = requestQueue[url].length; i < len; i++) {
      // Make these calls async so we avoid blocking the page/renderer

      /* jshint loopfunc: true */
      (function (index) {
        setTimeout(function () {
          requestQueue[url][index](cloneSvg(svgCache[url]));
        }, 0);
      })(i);
      /* jshint loopfunc: false */

    }
  };

  var loadSvg = function loadSvg(url, callback) {
    if (svgCache[url] !== undefined) {
      if (svgCache[url] instanceof SVGSVGElement) {
        // We already have it in cache, so use it
        callback(cloneSvg(svgCache[url]));
      } else {
        // We don't have it in cache yet, but we are loading it, so queue this request
        queueRequest(url, callback);
      }
    } else {
      if (!window.XMLHttpRequest) {
        callback('Browser does not support XMLHttpRequest');
        return false;
      } // Seed the cache to indicate we are loading this URL already


      svgCache[url] = {};
      queueRequest(url, callback);
      var httpRequest = new XMLHttpRequest();

      httpRequest.onreadystatechange = function () {
        // readyState 4 = complete
        if (httpRequest.readyState === 4) {
          // Handle status
          if (httpRequest.status === 404 || httpRequest.responseXML === null) {
            callback('Unable to load SVG file: ' + url);
            if (isLocal) callback('Note: SVG injection ajax calls do not work locally without adjusting security setting in your browser. Or consider using a local webserver.');
            callback();
            return false;
          } // 200 success from server, or 0 when using file:// protocol locally


          if (httpRequest.status === 200 || isLocal && httpRequest.status === 0) {
            /* globals Document */
            if (httpRequest.responseXML instanceof Document) {
              // Cache it
              svgCache[url] = httpRequest.responseXML.documentElement;
            }
            /* globals -Document */
            // IE9 doesn't create a responseXML Document object from loaded SVG,
            // and throws a "DOM Exception: HIERARCHY_REQUEST_ERR (3)" error when injected.
            //
            // So, we'll just create our own manually via the DOMParser using
            // the the raw XML responseText.
            //
            // :NOTE: IE8 and older doesn't have DOMParser, but they can't do SVG either, so...
            else if (DOMParser && DOMParser instanceof Function) {
                var xmlDoc;

                try {
                  var parser = new DOMParser();
                  xmlDoc = parser.parseFromString(httpRequest.responseText, 'text/xml');
                } catch (e) {
                  xmlDoc = undefined;
                }

                if (!xmlDoc || xmlDoc.getElementsByTagName('parsererror').length) {
                  callback('Unable to parse SVG file: ' + url);
                  return false;
                } else {
                  // Cache it
                  svgCache[url] = xmlDoc.documentElement;
                }
              } // We've loaded a new asset, so process any requests waiting for it


            processRequestQueue(url);
          } else {
            callback('There was a problem injecting the SVG: ' + httpRequest.status + ' ' + httpRequest.statusText);
            return false;
          }
        }
      };

      httpRequest.open('GET', url); // Treat and parse the response as XML, even if the
      // server sends us a different mimetype

      if (httpRequest.overrideMimeType) httpRequest.overrideMimeType('text/xml');
      httpRequest.send();
    }
  }; // Inject a single element


  var injectElement = function injectElement(el, evalScripts, pngFallback, callback) {
    // Grab the src or data-src attribute
    var imgUrl = el.getAttribute('data-src') || el.getAttribute('src'); // We can only inject SVG

    if (!/\.svg/i.test(imgUrl)) {
      callback('Attempted to inject a file with a non-svg extension: ' + imgUrl);
      return;
    } // If we don't have SVG support try to fall back to a png,
    // either defined per-element via data-fallback or data-png,
    // or globally via the pngFallback directory setting


    if (!hasSvgSupport) {
      var perElementFallback = el.getAttribute('data-fallback') || el.getAttribute('data-png'); // Per-element specific PNG fallback defined, so use that

      if (perElementFallback) {
        el.setAttribute('src', perElementFallback);
        callback(null);
      } // Global PNG fallback directoriy defined, use the same-named PNG
      else if (pngFallback) {
          el.setAttribute('src', pngFallback + '/' + imgUrl.split('/').pop().replace('.svg', '.png'));
          callback(null);
        } // um...
        else {
            callback('This browser does not support SVG and no PNG fallback was defined.');
          }

      return;
    } // Make sure we aren't already in the process of injecting this element to
    // avoid a race condition if multiple injections for the same element are run.
    // :NOTE: Using indexOf() only _after_ we check for SVG support and bail,
    // so no need for IE8 indexOf() polyfill


    if (injectedElements.indexOf(el) !== -1) {
      return;
    } // Remember the request to inject this element, in case other injection
    // calls are also trying to replace this element before we finish


    injectedElements.push(el); // Try to avoid loading the orginal image src if possible.

    el.setAttribute('src', ''); // Load it up

    loadSvg(imgUrl, function (svg) {
      if (typeof svg === 'undefined' || typeof svg === 'string') {
        callback(svg);
        return false;
      }

      var imgId = el.getAttribute('id');

      if (imgId) {
        svg.setAttribute('id', imgId);
      }

      var imgTitle = el.getAttribute('title');

      if (imgTitle) {
        svg.setAttribute('title', imgTitle);
      } // Concat the SVG classes + 'injected-svg' + the img classes


      var classMerge = [].concat(svg.getAttribute('class') || [], 'injected-svg', el.getAttribute('class') || []).join(' ');
      svg.setAttribute('class', uniqueClasses(classMerge));
      var imgStyle = el.getAttribute('style');

      if (imgStyle) {
        svg.setAttribute('style', imgStyle);
      } // Copy all the data elements to the svg


      var imgData = [].filter.call(el.attributes, function (at) {
        return /^data-\w[\w\-]*$/.test(at.name);
      });
      forEach.call(imgData, function (dataAttr) {
        if (dataAttr.name && dataAttr.value) {
          svg.setAttribute(dataAttr.name, dataAttr.value);
        }
      }); // Make sure any internally referenced clipPath ids and their
      // clip-path references are unique.
      //
      // This addresses the issue of having multiple instances of the
      // same SVG on a page and only the first clipPath id is referenced.
      //
      // Browsers often shortcut the SVG Spec and don't use clipPaths
      // contained in parent elements that are hidden, so if you hide the first
      // SVG instance on the page, then all other instances lose their clipping.
      // Reference: https://bugzilla.mozilla.org/show_bug.cgi?id=376027
      // Handle all defs elements that have iri capable attributes as defined by w3c: http://www.w3.org/TR/SVG/linking.html#processingIRI
      // Mapping IRI addressable elements to the properties that can reference them:

      var iriElementsAndProperties = {
        'clipPath': ['clip-path'],
        'color-profile': ['color-profile'],
        'cursor': ['cursor'],
        'filter': ['filter'],
        'linearGradient': ['fill', 'stroke'],
        'marker': ['marker', 'marker-start', 'marker-mid', 'marker-end'],
        'mask': ['mask'],
        'pattern': ['fill', 'stroke'],
        'radialGradient': ['fill', 'stroke']
      };
      var element, elementDefs, properties, currentId, newId;
      Object.keys(iriElementsAndProperties).forEach(function (key) {
        element = key;
        properties = iriElementsAndProperties[key];
        elementDefs = svg.querySelectorAll('defs ' + element + '[id]');

        for (var i = 0, elementsLen = elementDefs.length; i < elementsLen; i++) {
          currentId = elementDefs[i].id;
          newId = currentId + '-' + injectCount; // All of the properties that can reference this element type

          var referencingElements;
          forEach.call(properties, function (property) {
            // :NOTE: using a substring match attr selector here to deal with IE "adding extra quotes in url() attrs"
            referencingElements = svg.querySelectorAll('[' + property + '*="' + currentId + '"]');

            for (var j = 0, referencingElementLen = referencingElements.length; j < referencingElementLen; j++) {
              referencingElements[j].setAttribute(property, 'url(#' + newId + ')');
            }
          });
          elementDefs[i].id = newId;
        }
      }); // Remove any unwanted/invalid namespaces that might have been added by SVG editing tools

      svg.removeAttribute('xmlns:a'); // Post page load injected SVGs don't automatically have their script
      // elements run, so we'll need to make that happen, if requested
      // Find then prune the scripts

      var scripts = svg.querySelectorAll('script');
      var scriptsToEval = [];
      var script, scriptType;

      for (var k = 0, scriptsLen = scripts.length; k < scriptsLen; k++) {
        scriptType = scripts[k].getAttribute('type'); // Only process javascript types.
        // SVG defaults to 'application/ecmascript' for unset types

        if (!scriptType || scriptType === 'application/ecmascript' || scriptType === 'application/javascript') {
          // innerText for IE, textContent for other browsers
          script = scripts[k].innerText || scripts[k].textContent; // Stash

          scriptsToEval.push(script); // Tidy up and remove the script element since we don't need it anymore

          svg.removeChild(scripts[k]);
        }
      } // Run/Eval the scripts if needed


      if (scriptsToEval.length > 0 && (evalScripts === 'always' || evalScripts === 'once' && !ranScripts[imgUrl])) {
        for (var l = 0, scriptsToEvalLen = scriptsToEval.length; l < scriptsToEvalLen; l++) {
          // :NOTE: Yup, this is a form of eval, but it is being used to eval code
          // the caller has explictely asked to be loaded, and the code is in a caller
          // defined SVG file... not raw user input.
          //
          // Also, the code is evaluated in a closure and not in the global scope.
          // If you need to put something in global scope, use 'window'
          new Function(scriptsToEval[l])(window); // jshint ignore:line
        } // Remember we already ran scripts for this svg


        ranScripts[imgUrl] = true;
      } // :WORKAROUND:
      // IE doesn't evaluate <style> tags in SVGs that are dynamically added to the page.
      // This trick will trigger IE to read and use any existing SVG <style> tags.
      //
      // Reference: https://github.com/iconic/SVGInjector/issues/23


      var styleTags = svg.querySelectorAll('style');
      forEach.call(styleTags, function (styleTag) {
        styleTag.textContent += '';
      }); // Replace the image with the svg

      el.parentNode.replaceChild(svg, el); // Now that we no longer need it, drop references
      // to the original element so it can be GC'd

      delete injectedElements[injectedElements.indexOf(el)];
      el = null; // Increment the injected count

      injectCount++;
      callback(svg);
    });
  };
  /**
   * SVGInjector
   *
   * Replace the given elements with their full inline SVG DOM elements.
   *
   * :NOTE: We are using get/setAttribute with SVG because the SVG DOM spec differs from HTML DOM and
   * can return other unexpected object types when trying to directly access svg properties.
   * ex: "className" returns a SVGAnimatedString with the class value found in the "baseVal" property,
   * instead of simple string like with HTML Elements.
   *
   * @param {mixes} Array of or single DOM element
   * @param {object} options
   * @param {function} callback
   * @return {object} Instance of SVGInjector
   */


  var SVGInjector = function SVGInjector(elements, options, done) {
    // Options & defaults
    options = options || {}; // Should we run the scripts blocks found in the SVG
    // 'always' - Run them every time
    // 'once' - Only run scripts once for each SVG
    // [false|'never'] - Ignore scripts

    var evalScripts = options.evalScripts || 'always'; // Location of fallback pngs, if desired

    var pngFallback = options.pngFallback || false; // Callback to run during each SVG injection, returning the SVG injected

    var eachCallback = options.each; // Do the injection...

    if (elements.length !== undefined) {
      var elementsLoaded = 0;
      forEach.call(elements, function (element) {
        injectElement(element, evalScripts, pngFallback, function (svg) {
          if (eachCallback && typeof eachCallback === 'function') eachCallback(svg);
          if (done && elements.length === ++elementsLoaded) done(elementsLoaded);
        });
      });
    } else {
      if (elements) {
        injectElement(elements, evalScripts, pngFallback, function (svg) {
          if (eachCallback && typeof eachCallback === 'function') eachCallback(svg);
          if (done) done(1);
          elements = null;
        });
      } else {
        if (done) done(0);
      }
    }
  };
  /* global module, exports: true, define */
  // Node.js or CommonJS


  if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === 'object' && _typeof(module.exports) === 'object') {
    module.exports = exports = SVGInjector;
  } // AMD support
  else if (typeof define === 'function' && define.amd) {
      define(function () {
        return SVGInjector;
      });
    } // Otherwise, attach to window as global
    else if (_typeof(window) === 'object') {
        window.SVGInjector = SVGInjector;
      }
  /* global -module, -exports, -define */

})(window, document);

},{}],"tether":[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*! tether 1.1.0 */
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    define(factory);
  } else if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object') {
    module.exports = factory(require, exports, module);
  } else {
    root.Tether = factory();
  }
})(void 0, function (require, exports, module) {
  'use strict';

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ('value' in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  var TetherBase = undefined;

  if (typeof TetherBase === 'undefined') {
    TetherBase = {
      modules: []
    };
  }

  function getScrollParent(el) {
    var _getComputedStyle = getComputedStyle(el);

    var position = _getComputedStyle.position;

    if (position === 'fixed') {
      return el;
    }

    var parent = el;

    while (parent = parent.parentNode) {
      var style = undefined;

      try {
        style = getComputedStyle(parent);
      } catch (err) {}

      if (typeof style === 'undefined' || style === null) {
        return parent;
      }

      var _style = style;
      var overflow = _style.overflow;
      var overflowX = _style.overflowX;
      var overflowY = _style.overflowY;

      if (/(auto|scroll)/.test(overflow + overflowY + overflowX)) {
        if (position !== 'absolute' || ['relative', 'absolute', 'fixed'].indexOf(style.position) >= 0) {
          return parent;
        }
      }
    }

    return document.body;
  }

  var uniqueId = function () {
    var id = 0;
    return function () {
      return ++id;
    };
  }();

  var zeroPosCache = {};

  var getOrigin = function getOrigin(doc) {
    // getBoundingClientRect is unfortunately too accurate.  It introduces a pixel or two of
    // jitter as the user scrolls that messes with our ability to detect if two positions
    // are equivilant or not.  We place an element at the top left of the page that will
    // get the same jitter, so we can cancel the two out.
    var node = doc._tetherZeroElement;

    if (typeof node === 'undefined') {
      node = doc.createElement('div');
      node.setAttribute('data-tether-id', uniqueId());
      extend(node.style, {
        top: 0,
        left: 0,
        position: 'absolute'
      });
      doc.body.appendChild(node);
      doc._tetherZeroElement = node;
    }

    var id = node.getAttribute('data-tether-id');

    if (typeof zeroPosCache[id] === 'undefined') {
      zeroPosCache[id] = {};
      var rect = node.getBoundingClientRect();

      for (var k in rect) {
        // Can't use extend, as on IE9, elements don't resolve to be hasOwnProperty
        zeroPosCache[id][k] = rect[k];
      } // Clear the cache when this position call is done


      defer(function () {
        delete zeroPosCache[id];
      });
    }

    return zeroPosCache[id];
  };

  function getBounds(el) {
    var doc = undefined;

    if (el === document) {
      doc = document;
      el = document.documentElement;
    } else {
      doc = el.ownerDocument;
    }

    var docEl = doc.documentElement;
    var box = {}; // The original object returned by getBoundingClientRect is immutable, so we clone it
    // We can't use extend because the properties are not considered part of the object by hasOwnProperty in IE9

    var rect = el.getBoundingClientRect();

    for (var k in rect) {
      box[k] = rect[k];
    }

    var origin = getOrigin(doc);
    box.top -= origin.top;
    box.left -= origin.left;

    if (typeof box.width === 'undefined') {
      box.width = document.body.scrollWidth - box.left - box.right;
    }

    if (typeof box.height === 'undefined') {
      box.height = document.body.scrollHeight - box.top - box.bottom;
    }

    box.top = box.top - docEl.clientTop;
    box.left = box.left - docEl.clientLeft;
    box.right = doc.body.clientWidth - box.width - box.left;
    box.bottom = doc.body.clientHeight - box.height - box.top;
    return box;
  }

  function getOffsetParent(el) {
    return el.offsetParent || document.documentElement;
  }

  function getScrollBarSize() {
    var inner = document.createElement('div');
    inner.style.width = '100%';
    inner.style.height = '200px';
    var outer = document.createElement('div');
    extend(outer.style, {
      position: 'absolute',
      top: 0,
      left: 0,
      pointerEvents: 'none',
      visibility: 'hidden',
      width: '200px',
      height: '150px',
      overflow: 'hidden'
    });
    outer.appendChild(inner);
    document.body.appendChild(outer);
    var widthContained = inner.offsetWidth;
    outer.style.overflow = 'scroll';
    var widthScroll = inner.offsetWidth;

    if (widthContained === widthScroll) {
      widthScroll = outer.clientWidth;
    }

    document.body.removeChild(outer);
    var width = widthContained - widthScroll;
    return {
      width: width,
      height: width
    };
  }

  function extend() {
    var out = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var args = [];
    Array.prototype.push.apply(args, arguments);
    args.slice(1).forEach(function (obj) {
      if (obj) {
        for (var key in obj) {
          if ({}.hasOwnProperty.call(obj, key)) {
            out[key] = obj[key];
          }
        }
      }
    });
    return out;
  }

  function removeClass(el, name) {
    if (typeof el.classList !== 'undefined') {
      name.split(' ').forEach(function (cls) {
        if (cls.trim()) {
          el.classList.remove(cls);
        }
      });
    } else {
      var regex = new RegExp('(^| )' + name.split(' ').join('|') + '( |$)', 'gi');
      var className = getClassName(el).replace(regex, ' ');
      setClassName(el, className);
    }
  }

  function addClass(el, name) {
    if (typeof el.classList !== 'undefined') {
      name.split(' ').forEach(function (cls) {
        if (cls.trim()) {
          el.classList.add(cls);
        }
      });
    } else {
      removeClass(el, name);
      var cls = getClassName(el) + (' ' + name);
      setClassName(el, cls);
    }
  }

  function hasClass(el, name) {
    if (typeof el.classList !== 'undefined') {
      return el.classList.contains(name);
    }

    var className = getClassName(el);
    return new RegExp('(^| )' + name + '( |$)', 'gi').test(className);
  }

  function getClassName(el) {
    if (el.className instanceof SVGAnimatedString) {
      return el.className.baseVal;
    }

    return el.className;
  }

  function setClassName(el, className) {
    el.setAttribute('class', className);
  }

  function updateClasses(el, add, all) {
    // Of the set of 'all' classes, we need the 'add' classes, and only the
    // 'add' classes to be set.
    all.forEach(function (cls) {
      if (add.indexOf(cls) === -1 && hasClass(el, cls)) {
        removeClass(el, cls);
      }
    });
    add.forEach(function (cls) {
      if (!hasClass(el, cls)) {
        addClass(el, cls);
      }
    });
  }

  var deferred = [];

  var defer = function defer(fn) {
    deferred.push(fn);
  };

  var flush = function flush() {
    var fn = undefined;

    while (fn = deferred.pop()) {
      fn();
    }
  };

  var Evented = function () {
    function Evented() {
      _classCallCheck(this, Evented);
    }

    _createClass(Evented, [{
      key: 'on',
      value: function on(event, handler, ctx) {
        var once = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];

        if (typeof this.bindings === 'undefined') {
          this.bindings = {};
        }

        if (typeof this.bindings[event] === 'undefined') {
          this.bindings[event] = [];
        }

        this.bindings[event].push({
          handler: handler,
          ctx: ctx,
          once: once
        });
      }
    }, {
      key: 'once',
      value: function once(event, handler, ctx) {
        this.on(event, handler, ctx, true);
      }
    }, {
      key: 'off',
      value: function off(event, handler) {
        if (typeof this.bindings !== 'undefined' && typeof this.bindings[event] !== 'undefined') {
          return;
        }

        if (typeof handler === 'undefined') {
          delete this.bindings[event];
        } else {
          var i = 0;

          while (i < this.bindings[event].length) {
            if (this.bindings[event][i].handler === handler) {
              this.bindings[event].splice(i, 1);
            } else {
              ++i;
            }
          }
        }
      }
    }, {
      key: 'trigger',
      value: function trigger(event) {
        if (typeof this.bindings !== 'undefined' && this.bindings[event]) {
          var i = 0;

          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          while (i < this.bindings[event].length) {
            var _bindings$event$i = this.bindings[event][i];
            var handler = _bindings$event$i.handler;
            var ctx = _bindings$event$i.ctx;
            var once = _bindings$event$i.once;
            var context = ctx;

            if (typeof context === 'undefined') {
              context = this;
            }

            handler.apply(context, args);

            if (once) {
              this.bindings[event].splice(i, 1);
            } else {
              ++i;
            }
          }
        }
      }
    }]);

    return Evented;
  }();

  TetherBase.Utils = {
    getScrollParent: getScrollParent,
    getBounds: getBounds,
    getOffsetParent: getOffsetParent,
    extend: extend,
    addClass: addClass,
    removeClass: removeClass,
    hasClass: hasClass,
    updateClasses: updateClasses,
    defer: defer,
    flush: flush,
    uniqueId: uniqueId,
    Evented: Evented,
    getScrollBarSize: getScrollBarSize
  };
  /* globals TetherBase, performance */

  'use strict';

  var _slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i['return']) _i['return']();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError('Invalid attempt to destructure non-iterable instance');
      }
    };
  }();

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ('value' in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  if (typeof TetherBase === 'undefined') {
    throw new Error('You must include the utils.js file before tether.js');
  }

  var _TetherBase$Utils = TetherBase.Utils;
  var getScrollParent = _TetherBase$Utils.getScrollParent;
  var getBounds = _TetherBase$Utils.getBounds;
  var getOffsetParent = _TetherBase$Utils.getOffsetParent;
  var extend = _TetherBase$Utils.extend;
  var addClass = _TetherBase$Utils.addClass;
  var removeClass = _TetherBase$Utils.removeClass;
  var updateClasses = _TetherBase$Utils.updateClasses;
  var defer = _TetherBase$Utils.defer;
  var flush = _TetherBase$Utils.flush;
  var getScrollBarSize = _TetherBase$Utils.getScrollBarSize;

  function within(a, b) {
    var diff = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];
    return a + diff >= b && b >= a - diff;
  }

  var transformKey = function () {
    if (typeof document === 'undefined') {
      return '';
    }

    var el = document.createElement('div');
    var transforms = ['transform', 'webkitTransform', 'OTransform', 'MozTransform', 'msTransform'];

    for (var i = 0; i < transforms.length; ++i) {
      var key = transforms[i];

      if (el.style[key] !== undefined) {
        return key;
      }
    }
  }();

  var tethers = [];

  var position = function position() {
    tethers.forEach(function (tether) {
      tether.position(false);
    });
    flush();
  };

  function now() {
    if (typeof performance !== 'undefined' && typeof performance.now !== 'undefined') {
      return performance.now();
    }

    return +new Date();
  }

  (function () {
    var lastCall = null;
    var lastDuration = null;
    var pendingTimeout = null;

    var tick = function tick() {
      if (typeof lastDuration !== 'undefined' && lastDuration > 16) {
        // We voluntarily throttle ourselves if we can't manage 60fps
        lastDuration = Math.min(lastDuration - 16, 250); // Just in case this is the last event, remember to position just once more

        pendingTimeout = setTimeout(tick, 250);
        return;
      }

      if (typeof lastCall !== 'undefined' && now() - lastCall < 10) {
        // Some browsers call events a little too frequently, refuse to run more than is reasonable
        return;
      }

      if (typeof pendingTimeout !== 'undefined') {
        clearTimeout(pendingTimeout);
        pendingTimeout = null;
      }

      lastCall = now();
      position();
      lastDuration = now() - lastCall;
    };

    if (typeof window !== 'undefined') {
      ['resize', 'scroll', 'touchmove'].forEach(function (event) {
        window.addEventListener(event, tick);
      });
    }
  })();

  var MIRROR_LR = {
    center: 'center',
    left: 'right',
    right: 'left'
  };
  var MIRROR_TB = {
    middle: 'middle',
    top: 'bottom',
    bottom: 'top'
  };
  var OFFSET_MAP = {
    top: 0,
    left: 0,
    middle: '50%',
    center: '50%',
    bottom: '100%',
    right: '100%'
  };

  var autoToFixedAttachment = function autoToFixedAttachment(attachment, relativeToAttachment) {
    var left = attachment.left;
    var top = attachment.top;

    if (left === 'auto') {
      left = MIRROR_LR[relativeToAttachment.left];
    }

    if (top === 'auto') {
      top = MIRROR_TB[relativeToAttachment.top];
    }

    return {
      left: left,
      top: top
    };
  };

  var attachmentToOffset = function attachmentToOffset(attachment) {
    var left = attachment.left;
    var top = attachment.top;

    if (typeof OFFSET_MAP[attachment.left] !== 'undefined') {
      left = OFFSET_MAP[attachment.left];
    }

    if (typeof OFFSET_MAP[attachment.top] !== 'undefined') {
      top = OFFSET_MAP[attachment.top];
    }

    return {
      left: left,
      top: top
    };
  };

  function addOffset() {
    var out = {
      top: 0,
      left: 0
    };

    for (var _len = arguments.length, offsets = Array(_len), _key = 0; _key < _len; _key++) {
      offsets[_key] = arguments[_key];
    }

    offsets.forEach(function (_ref) {
      var top = _ref.top;
      var left = _ref.left;

      if (typeof top === 'string') {
        top = parseFloat(top, 10);
      }

      if (typeof left === 'string') {
        left = parseFloat(left, 10);
      }

      out.top += top;
      out.left += left;
    });
    return out;
  }

  function offsetToPx(offset, size) {
    if (typeof offset.left === 'string' && offset.left.indexOf('%') !== -1) {
      offset.left = parseFloat(offset.left, 10) / 100 * size.width;
    }

    if (typeof offset.top === 'string' && offset.top.indexOf('%') !== -1) {
      offset.top = parseFloat(offset.top, 10) / 100 * size.height;
    }

    return offset;
  }

  var parseOffset = function parseOffset(value) {
    var _value$split = value.split(' ');

    var _value$split2 = _slicedToArray(_value$split, 2);

    var top = _value$split2[0];
    var left = _value$split2[1];
    return {
      top: top,
      left: left
    };
  };

  var parseAttachment = parseOffset;

  var TetherClass = function () {
    function TetherClass(options) {
      var _this = this;

      _classCallCheck(this, TetherClass);

      this.position = this.position.bind(this);
      tethers.push(this);
      this.history = [];
      this.setOptions(options, false);
      TetherBase.modules.forEach(function (module) {
        if (typeof module.initialize !== 'undefined') {
          module.initialize.call(_this);
        }
      });
      this.position();
    }

    _createClass(TetherClass, [{
      key: 'getClass',
      value: function getClass() {
        var key = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
        var classes = this.options.classes;

        if (typeof classes !== 'undefined' && classes[key]) {
          return this.options.classes[key];
        } else if (this.options.classPrefix) {
          return this.options.classPrefix + '-' + key;
        } else {
          return key;
        }
      }
    }, {
      key: 'setOptions',
      value: function setOptions(options) {
        var _this2 = this;

        var pos = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
        var defaults = {
          offset: '0 0',
          targetOffset: '0 0',
          targetAttachment: 'auto auto',
          classPrefix: 'tether'
        };
        this.options = extend(defaults, options);
        var _options = this.options;
        var element = _options.element;
        var target = _options.target;
        var targetModifier = _options.targetModifier;
        this.element = element;
        this.target = target;
        this.targetModifier = targetModifier;

        if (this.target === 'viewport') {
          this.target = document.body;
          this.targetModifier = 'visible';
        } else if (this.target === 'scroll-handle') {
          this.target = document.body;
          this.targetModifier = 'scroll-handle';
        }

        ['element', 'target'].forEach(function (key) {
          if (typeof _this2[key] === 'undefined') {
            throw new Error('Tether Error: Both element and target must be defined');
          }

          if (typeof _this2[key].jquery !== 'undefined') {
            _this2[key] = _this2[key][0];
          } else if (typeof _this2[key] === 'string') {
            _this2[key] = document.querySelector(_this2[key]);
          }
        });
        addClass(this.element, this.getClass('element'));

        if (!(this.options.addTargetClasses === false)) {
          addClass(this.target, this.getClass('target'));
        }

        if (!this.options.attachment) {
          throw new Error('Tether Error: You must provide an attachment');
        }

        this.targetAttachment = parseAttachment(this.options.targetAttachment);
        this.attachment = parseAttachment(this.options.attachment);
        this.offset = parseOffset(this.options.offset);
        this.targetOffset = parseOffset(this.options.targetOffset);

        if (typeof this.scrollParent !== 'undefined') {
          this.disable();
        }

        if (this.targetModifier === 'scroll-handle') {
          this.scrollParent = this.target;
        } else {
          this.scrollParent = getScrollParent(this.target);
        }

        if (!(this.options.enabled === false)) {
          this.enable(pos);
        }
      }
    }, {
      key: 'getTargetBounds',
      value: function getTargetBounds() {
        if (typeof this.targetModifier !== 'undefined') {
          if (this.targetModifier === 'visible') {
            if (this.target === document.body) {
              return {
                top: pageYOffset,
                left: pageXOffset,
                height: innerHeight,
                width: innerWidth
              };
            } else {
              var bounds = getBounds(this.target);
              var out = {
                height: bounds.height,
                width: bounds.width,
                top: bounds.top,
                left: bounds.left
              };
              out.height = Math.min(out.height, bounds.height - (pageYOffset - bounds.top));
              out.height = Math.min(out.height, bounds.height - (bounds.top + bounds.height - (pageYOffset + innerHeight)));
              out.height = Math.min(innerHeight, out.height);
              out.height -= 2;
              out.width = Math.min(out.width, bounds.width - (pageXOffset - bounds.left));
              out.width = Math.min(out.width, bounds.width - (bounds.left + bounds.width - (pageXOffset + innerWidth)));
              out.width = Math.min(innerWidth, out.width);
              out.width -= 2;

              if (out.top < pageYOffset) {
                out.top = pageYOffset;
              }

              if (out.left < pageXOffset) {
                out.left = pageXOffset;
              }

              return out;
            }
          } else if (this.targetModifier === 'scroll-handle') {
            var bounds = undefined;
            var target = this.target;

            if (target === document.body) {
              target = document.documentElement;
              bounds = {
                left: pageXOffset,
                top: pageYOffset,
                height: innerHeight,
                width: innerWidth
              };
            } else {
              bounds = getBounds(target);
            }

            var style = getComputedStyle(target);
            var hasBottomScroll = target.scrollWidth > target.clientWidth || [style.overflow, style.overflowX].indexOf('scroll') >= 0 || this.target !== document.body;
            var scrollBottom = 0;

            if (hasBottomScroll) {
              scrollBottom = 15;
            }

            var height = bounds.height - parseFloat(style.borderTopWidth) - parseFloat(style.borderBottomWidth) - scrollBottom;
            var out = {
              width: 15,
              height: height * 0.975 * (height / target.scrollHeight),
              left: bounds.left + bounds.width - parseFloat(style.borderLeftWidth) - 15
            };
            var fitAdj = 0;

            if (height < 408 && this.target === document.body) {
              fitAdj = -0.00011 * Math.pow(height, 2) - 0.00727 * height + 22.58;
            }

            if (this.target !== document.body) {
              out.height = Math.max(out.height, 24);
            }

            var scrollPercentage = this.target.scrollTop / (target.scrollHeight - height);
            out.top = scrollPercentage * (height - out.height - fitAdj) + bounds.top + parseFloat(style.borderTopWidth);

            if (this.target === document.body) {
              out.height = Math.max(out.height, 24);
            }

            return out;
          }
        } else {
          return getBounds(this.target);
        }
      }
    }, {
      key: 'clearCache',
      value: function clearCache() {
        this._cache = {};
      }
    }, {
      key: 'cache',
      value: function cache(k, getter) {
        // More than one module will often need the same DOM info, so
        // we keep a cache which is cleared on each position call
        if (typeof this._cache === 'undefined') {
          this._cache = {};
        }

        if (typeof this._cache[k] === 'undefined') {
          this._cache[k] = getter.call(this);
        }

        return this._cache[k];
      }
    }, {
      key: 'enable',
      value: function enable() {
        var pos = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

        if (!(this.options.addTargetClasses === false)) {
          addClass(this.target, this.getClass('enabled'));
        }

        addClass(this.element, this.getClass('enabled'));
        this.enabled = true;

        if (this.scrollParent !== document) {
          this.scrollParent.addEventListener('scroll', this.position);
        }

        if (pos) {
          this.position();
        }
      }
    }, {
      key: 'disable',
      value: function disable() {
        removeClass(this.target, this.getClass('enabled'));
        removeClass(this.element, this.getClass('enabled'));
        this.enabled = false;

        if (typeof this.scrollParent !== 'undefined') {
          this.scrollParent.removeEventListener('scroll', this.position);
        }
      }
    }, {
      key: 'destroy',
      value: function destroy() {
        var _this3 = this;

        this.disable();
        tethers.forEach(function (tether, i) {
          if (tether === _this3) {
            tethers.splice(i, 1);
            return;
          }
        });
      }
    }, {
      key: 'updateAttachClasses',
      value: function updateAttachClasses(elementAttach, targetAttach) {
        var _this4 = this;

        elementAttach = elementAttach || this.attachment;
        targetAttach = targetAttach || this.targetAttachment;
        var sides = ['left', 'top', 'bottom', 'right', 'middle', 'center'];

        if (typeof this._addAttachClasses !== 'undefined' && this._addAttachClasses.length) {
          // updateAttachClasses can be called more than once in a position call, so
          // we need to clean up after ourselves such that when the last defer gets
          // ran it doesn't add any extra classes from previous calls.
          this._addAttachClasses.splice(0, this._addAttachClasses.length);
        }

        if (typeof this._addAttachClasses === 'undefined') {
          this._addAttachClasses = [];
        }

        var add = this._addAttachClasses;

        if (elementAttach.top) {
          add.push(this.getClass('element-attached') + '-' + elementAttach.top);
        }

        if (elementAttach.left) {
          add.push(this.getClass('element-attached') + '-' + elementAttach.left);
        }

        if (targetAttach.top) {
          add.push(this.getClass('target-attached') + '-' + targetAttach.top);
        }

        if (targetAttach.left) {
          add.push(this.getClass('target-attached') + '-' + targetAttach.left);
        }

        var all = [];
        sides.forEach(function (side) {
          all.push(_this4.getClass('element-attached') + '-' + side);
          all.push(_this4.getClass('target-attached') + '-' + side);
        });
        defer(function () {
          if (!(typeof _this4._addAttachClasses !== 'undefined')) {
            return;
          }

          updateClasses(_this4.element, _this4._addAttachClasses, all);

          if (!(_this4.options.addTargetClasses === false)) {
            updateClasses(_this4.target, _this4._addAttachClasses, all);
          }

          delete _this4._addAttachClasses;
        });
      }
    }, {
      key: 'position',
      value: function position() {
        var _this5 = this;

        var flushChanges = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0]; // flushChanges commits the changes immediately, leave true unless you are positioning multiple
        // tethers (in which case call Tether.Utils.flush yourself when you're done)

        if (!this.enabled) {
          return;
        }

        this.clearCache(); // Turn 'auto' attachments into the appropriate corner or edge

        var targetAttachment = autoToFixedAttachment(this.targetAttachment, this.attachment);
        this.updateAttachClasses(this.attachment, targetAttachment);
        var elementPos = this.cache('element-bounds', function () {
          return getBounds(_this5.element);
        });
        var width = elementPos.width;
        var height = elementPos.height;

        if (width === 0 && height === 0 && typeof this.lastSize !== 'undefined') {
          var _lastSize = this.lastSize; // We cache the height and width to make it possible to position elements that are
          // getting hidden.

          width = _lastSize.width;
          height = _lastSize.height;
        } else {
          this.lastSize = {
            width: width,
            height: height
          };
        }

        var targetPos = this.cache('target-bounds', function () {
          return _this5.getTargetBounds();
        });
        var targetSize = targetPos; // Get an actual px offset from the attachment

        var offset = offsetToPx(attachmentToOffset(this.attachment), {
          width: width,
          height: height
        });
        var targetOffset = offsetToPx(attachmentToOffset(targetAttachment), targetSize);
        var manualOffset = offsetToPx(this.offset, {
          width: width,
          height: height
        });
        var manualTargetOffset = offsetToPx(this.targetOffset, targetSize); // Add the manually provided offset

        offset = addOffset(offset, manualOffset);
        targetOffset = addOffset(targetOffset, manualTargetOffset); // It's now our goal to make (element position + offset) == (target position + target offset)

        var left = targetPos.left + targetOffset.left - offset.left;
        var top = targetPos.top + targetOffset.top - offset.top;

        for (var i = 0; i < TetherBase.modules.length; ++i) {
          var _module2 = TetherBase.modules[i];

          var ret = _module2.position.call(this, {
            left: left,
            top: top,
            targetAttachment: targetAttachment,
            targetPos: targetPos,
            elementPos: elementPos,
            offset: offset,
            targetOffset: targetOffset,
            manualOffset: manualOffset,
            manualTargetOffset: manualTargetOffset,
            scrollbarSize: scrollbarSize,
            attachment: this.attachment
          });

          if (ret === false) {
            return false;
          } else if (typeof ret === 'undefined' || _typeof(ret) !== 'object') {
            continue;
          } else {
            top = ret.top;
            left = ret.left;
          }
        } // We describe the position three different ways to give the optimizer
        // a chance to decide the best possible way to position the element
        // with the fewest repaints.


        var next = {
          // It's position relative to the page (absolute positioning when
          // the element is a child of the body)
          page: {
            top: top,
            left: left
          },
          // It's position relative to the viewport (fixed positioning)
          viewport: {
            top: top - pageYOffset,
            bottom: pageYOffset - top - height + innerHeight,
            left: left - pageXOffset,
            right: pageXOffset - left - width + innerWidth
          }
        };
        var scrollbarSize = undefined;

        if (document.body.scrollWidth > window.innerWidth) {
          scrollbarSize = this.cache('scrollbar-size', getScrollBarSize);
          next.viewport.bottom -= scrollbarSize.height;
        }

        if (document.body.scrollHeight > window.innerHeight) {
          scrollbarSize = this.cache('scrollbar-size', getScrollBarSize);
          next.viewport.right -= scrollbarSize.width;
        }

        if (['', 'static'].indexOf(document.body.style.position) === -1 || ['', 'static'].indexOf(document.body.parentElement.style.position) === -1) {
          // Absolute positioning in the body will be relative to the page, not the 'initial containing block'
          next.page.bottom = document.body.scrollHeight - top - height;
          next.page.right = document.body.scrollWidth - left - width;
        }

        if (typeof this.options.optimizations !== 'undefined' && this.options.optimizations.moveElement !== false && !(typeof this.targetModifier !== 'undefined')) {
          (function () {
            var offsetParent = _this5.cache('target-offsetparent', function () {
              return getOffsetParent(_this5.target);
            });

            var offsetPosition = _this5.cache('target-offsetparent-bounds', function () {
              return getBounds(offsetParent);
            });

            var offsetParentStyle = getComputedStyle(offsetParent);
            var offsetParentSize = offsetPosition;
            var offsetBorder = {};
            ['Top', 'Left', 'Bottom', 'Right'].forEach(function (side) {
              offsetBorder[side.toLowerCase()] = parseFloat(offsetParentStyle['border' + side + 'Width']);
            });
            offsetPosition.right = document.body.scrollWidth - offsetPosition.left - offsetParentSize.width + offsetBorder.right;
            offsetPosition.bottom = document.body.scrollHeight - offsetPosition.top - offsetParentSize.height + offsetBorder.bottom;

            if (next.page.top >= offsetPosition.top + offsetBorder.top && next.page.bottom >= offsetPosition.bottom) {
              if (next.page.left >= offsetPosition.left + offsetBorder.left && next.page.right >= offsetPosition.right) {
                // We're within the visible part of the target's scroll parent
                var scrollTop = offsetParent.scrollTop;
                var scrollLeft = offsetParent.scrollLeft; // It's position relative to the target's offset parent (absolute positioning when
                // the element is moved to be a child of the target's offset parent).

                next.offset = {
                  top: next.page.top - offsetPosition.top + scrollTop - offsetBorder.top,
                  left: next.page.left - offsetPosition.left + scrollLeft - offsetBorder.left
                };
              }
            }
          })();
        } // We could also travel up the DOM and try each containing context, rather than only
        // looking at the body, but we're gonna get diminishing returns.


        this.move(next);
        this.history.unshift(next);

        if (this.history.length > 3) {
          this.history.pop();
        }

        if (flushChanges) {
          flush();
        }

        return true;
      } // THE ISSUE

    }, {
      key: 'move',
      value: function move(pos) {
        var _this6 = this;

        if (!(typeof this.element.parentNode !== 'undefined')) {
          return;
        }

        var same = {};

        for (var type in pos) {
          same[type] = {};

          for (var key in pos[type]) {
            var found = false;

            for (var i = 0; i < this.history.length; ++i) {
              var point = this.history[i];

              if (typeof point[type] !== 'undefined' && !within(point[type][key], pos[type][key])) {
                found = true;
                break;
              }
            }

            if (!found) {
              same[type][key] = true;
            }
          }
        }

        var css = {
          top: '',
          left: '',
          right: '',
          bottom: ''
        };

        var transcribe = function transcribe(_same, _pos) {
          var hasOptimizations = typeof _this6.options.optimizations !== 'undefined';
          var gpu = hasOptimizations ? _this6.options.optimizations.gpu : null;

          if (gpu !== false) {
            var yPos = undefined,
                xPos = undefined;

            if (_same.top) {
              css.top = 0;
              yPos = _pos.top;
            } else {
              css.bottom = 0;
              yPos = -_pos.bottom;
            }

            if (_same.left) {
              css.left = 0;
              xPos = _pos.left;
            } else {
              css.right = 0;
              xPos = -_pos.right;
            }

            css[transformKey] = 'translateX(' + Math.round(xPos) + 'px) translateY(' + Math.round(yPos) + 'px)';

            if (transformKey !== 'msTransform') {
              // The Z transform will keep this in the GPU (faster, and prevents artifacts),
              // but IE9 doesn't support 3d transforms and will choke.
              css[transformKey] += " translateZ(0)";
            }
          } else {
            if (_same.top) {
              css.top = _pos.top + 'px';
            } else {
              css.bottom = _pos.bottom + 'px';
            }

            if (_same.left) {
              css.left = _pos.left + 'px';
            } else {
              css.right = _pos.right + 'px';
            }
          }
        };

        var moved = false;

        if ((same.page.top || same.page.bottom) && (same.page.left || same.page.right)) {
          css.position = 'absolute';
          transcribe(same.page, pos.page);
        } else if ((same.viewport.top || same.viewport.bottom) && (same.viewport.left || same.viewport.right)) {
          css.position = 'fixed';
          transcribe(same.viewport, pos.viewport);
        } else if (typeof same.offset !== 'undefined' && same.offset.top && same.offset.left) {
          (function () {
            css.position = 'absolute';

            var offsetParent = _this6.cache('target-offsetparent', function () {
              return getOffsetParent(_this6.target);
            });

            if (getOffsetParent(_this6.element) !== offsetParent) {
              defer(function () {
                _this6.element.parentNode.removeChild(_this6.element);

                offsetParent.appendChild(_this6.element);
              });
            }

            transcribe(same.offset, pos.offset);
            moved = true;
          })();
        } else {
          css.position = 'absolute';
          transcribe({
            top: true,
            left: true
          }, pos.page);
        }

        if (!moved) {
          var offsetParentIsBody = true;
          var currentNode = this.element.parentNode;

          while (currentNode && currentNode.tagName !== 'BODY') {
            if (getComputedStyle(currentNode).position !== 'static') {
              offsetParentIsBody = false;
              break;
            }

            currentNode = currentNode.parentNode;
          }

          if (!offsetParentIsBody) {
            this.element.parentNode.removeChild(this.element);
            document.body.appendChild(this.element);
          }
        } // Any css change will trigger a repaint, so let's avoid one if nothing changed


        var writeCSS = {};
        var write = false;

        for (var key in css) {
          var val = css[key];
          var elVal = this.element.style[key];

          if (elVal !== '' && val !== '' && ['top', 'left', 'bottom', 'right'].indexOf(key) >= 0) {
            elVal = parseFloat(elVal);
            val = parseFloat(val);
          }

          if (elVal !== val) {
            write = true;
            writeCSS[key] = val;
          }
        }

        if (write) {
          defer(function () {
            extend(_this6.element.style, writeCSS);
          });
        }
      }
    }]);

    return TetherClass;
  }();

  TetherClass.modules = [];
  TetherBase.position = position;
  var Tether = extend(TetherClass, TetherBase);
  /* globals TetherBase */

  'use strict';

  var _slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i['return']) _i['return']();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError('Invalid attempt to destructure non-iterable instance');
      }
    };
  }();

  var _TetherBase$Utils = TetherBase.Utils;
  var getBounds = _TetherBase$Utils.getBounds;
  var extend = _TetherBase$Utils.extend;
  var updateClasses = _TetherBase$Utils.updateClasses;
  var defer = _TetherBase$Utils.defer;
  var BOUNDS_FORMAT = ['left', 'top', 'right', 'bottom'];

  function getBoundingRect(tether, to) {
    if (to === 'scrollParent') {
      to = tether.scrollParent;
    } else if (to === 'window') {
      to = [pageXOffset, pageYOffset, innerWidth + pageXOffset, innerHeight + pageYOffset];
    }

    if (to === document) {
      to = to.documentElement;
    }

    if (typeof to.nodeType !== 'undefined') {
      (function () {
        var size = getBounds(to);
        var pos = size;
        var style = getComputedStyle(to);
        to = [pos.left, pos.top, size.width + pos.left, size.height + pos.top];
        BOUNDS_FORMAT.forEach(function (side, i) {
          side = side[0].toUpperCase() + side.substr(1);

          if (side === 'Top' || side === 'Left') {
            to[i] += parseFloat(style['border' + side + 'Width']);
          } else {
            to[i] -= parseFloat(style['border' + side + 'Width']);
          }
        });
      })();
    }

    return to;
  }

  TetherBase.modules.push({
    position: function position(_ref) {
      var _this = this;

      var top = _ref.top;
      var left = _ref.left;
      var targetAttachment = _ref.targetAttachment;

      if (!this.options.constraints) {
        return true;
      }

      var _cache = this.cache('element-bounds', function () {
        return getBounds(_this.element);
      });

      var height = _cache.height;
      var width = _cache.width;

      if (width === 0 && height === 0 && typeof this.lastSize !== 'undefined') {
        var _lastSize = this.lastSize; // Handle the item getting hidden as a result of our positioning without glitching
        // the classes in and out

        width = _lastSize.width;
        height = _lastSize.height;
      }

      var targetSize = this.cache('target-bounds', function () {
        return _this.getTargetBounds();
      });
      var targetHeight = targetSize.height;
      var targetWidth = targetSize.width;
      var allClasses = [this.getClass('pinned'), this.getClass('out-of-bounds')];
      this.options.constraints.forEach(function (constraint) {
        var outOfBoundsClass = constraint.outOfBoundsClass;
        var pinnedClass = constraint.pinnedClass;

        if (outOfBoundsClass) {
          allClasses.push(outOfBoundsClass);
        }

        if (pinnedClass) {
          allClasses.push(pinnedClass);
        }
      });
      allClasses.forEach(function (cls) {
        ['left', 'top', 'right', 'bottom'].forEach(function (side) {
          allClasses.push(cls + '-' + side);
        });
      });
      var addClasses = [];
      var tAttachment = extend({}, targetAttachment);
      var eAttachment = extend({}, this.attachment);
      this.options.constraints.forEach(function (constraint) {
        var to = constraint.to;
        var attachment = constraint.attachment;
        var pin = constraint.pin;

        if (typeof attachment === 'undefined') {
          attachment = '';
        }

        var changeAttachX = undefined,
            changeAttachY = undefined;

        if (attachment.indexOf(' ') >= 0) {
          var _attachment$split = attachment.split(' ');

          var _attachment$split2 = _slicedToArray(_attachment$split, 2);

          changeAttachY = _attachment$split2[0];
          changeAttachX = _attachment$split2[1];
        } else {
          changeAttachX = changeAttachY = attachment;
        }

        var bounds = getBoundingRect(_this, to);

        if (changeAttachY === 'target' || changeAttachY === 'both') {
          if (top < bounds[1] && tAttachment.top === 'top') {
            top += targetHeight;
            tAttachment.top = 'bottom';
          }

          if (top + height > bounds[3] && tAttachment.top === 'bottom') {
            top -= targetHeight;
            tAttachment.top = 'top';
          }
        }

        if (changeAttachY === 'together') {
          if (top < bounds[1] && tAttachment.top === 'top') {
            if (eAttachment.top === 'bottom') {
              top += targetHeight;
              tAttachment.top = 'bottom';
              top += height;
              eAttachment.top = 'top';
            } else if (eAttachment.top === 'top') {
              top += targetHeight;
              tAttachment.top = 'bottom';
              top -= height;
              eAttachment.top = 'bottom';
            }
          }

          if (top + height > bounds[3] && tAttachment.top === 'bottom') {
            if (eAttachment.top === 'top') {
              top -= targetHeight;
              tAttachment.top = 'top';
              top -= height;
              eAttachment.top = 'bottom';
            } else if (eAttachment.top === 'bottom') {
              top -= targetHeight;
              tAttachment.top = 'top';
              top += height;
              eAttachment.top = 'top';
            }
          }

          if (tAttachment.top === 'middle') {
            if (top + height > bounds[3] && eAttachment.top === 'top') {
              top -= height;
              eAttachment.top = 'bottom';
            } else if (top < bounds[1] && eAttachment.top === 'bottom') {
              top += height;
              eAttachment.top = 'top';
            }
          }
        }

        if (changeAttachX === 'target' || changeAttachX === 'both') {
          if (left < bounds[0] && tAttachment.left === 'left') {
            left += targetWidth;
            tAttachment.left = 'right';
          }

          if (left + width > bounds[2] && tAttachment.left === 'right') {
            left -= targetWidth;
            tAttachment.left = 'left';
          }
        }

        if (changeAttachX === 'together') {
          if (left < bounds[0] && tAttachment.left === 'left') {
            if (eAttachment.left === 'right') {
              left += targetWidth;
              tAttachment.left = 'right';
              left += width;
              eAttachment.left = 'left';
            } else if (eAttachment.left === 'left') {
              left += targetWidth;
              tAttachment.left = 'right';
              left -= width;
              eAttachment.left = 'right';
            }
          } else if (left + width > bounds[2] && tAttachment.left === 'right') {
            if (eAttachment.left === 'left') {
              left -= targetWidth;
              tAttachment.left = 'left';
              left -= width;
              eAttachment.left = 'right';
            } else if (eAttachment.left === 'right') {
              left -= targetWidth;
              tAttachment.left = 'left';
              left += width;
              eAttachment.left = 'left';
            }
          } else if (tAttachment.left === 'center') {
            if (left + width > bounds[2] && eAttachment.left === 'left') {
              left -= width;
              eAttachment.left = 'right';
            } else if (left < bounds[0] && eAttachment.left === 'right') {
              left += width;
              eAttachment.left = 'left';
            }
          }
        }

        if (changeAttachY === 'element' || changeAttachY === 'both') {
          if (top < bounds[1] && eAttachment.top === 'bottom') {
            top += height;
            eAttachment.top = 'top';
          }

          if (top + height > bounds[3] && eAttachment.top === 'top') {
            top -= height;
            eAttachment.top = 'bottom';
          }
        }

        if (changeAttachX === 'element' || changeAttachX === 'both') {
          if (left < bounds[0] && eAttachment.left === 'right') {
            left += width;
            eAttachment.left = 'left';
          }

          if (left + width > bounds[2] && eAttachment.left === 'left') {
            left -= width;
            eAttachment.left = 'right';
          }
        }

        if (typeof pin === 'string') {
          pin = pin.split(',').map(function (p) {
            return p.trim();
          });
        } else if (pin === true) {
          pin = ['top', 'left', 'right', 'bottom'];
        }

        pin = pin || [];
        var pinned = [];
        var oob = [];

        if (top < bounds[1]) {
          if (pin.indexOf('top') >= 0) {
            top = bounds[1];
            pinned.push('top');
          } else {
            oob.push('top');
          }
        }

        if (top + height > bounds[3]) {
          if (pin.indexOf('bottom') >= 0) {
            top = bounds[3] - height;
            pinned.push('bottom');
          } else {
            oob.push('bottom');
          }
        }

        if (left < bounds[0]) {
          if (pin.indexOf('left') >= 0) {
            left = bounds[0];
            pinned.push('left');
          } else {
            oob.push('left');
          }
        }

        if (left + width > bounds[2]) {
          if (pin.indexOf('right') >= 0) {
            left = bounds[2] - width;
            pinned.push('right');
          } else {
            oob.push('right');
          }
        }

        if (pinned.length) {
          (function () {
            var pinnedClass = undefined;

            if (typeof _this.options.pinnedClass !== 'undefined') {
              pinnedClass = _this.options.pinnedClass;
            } else {
              pinnedClass = _this.getClass('pinned');
            }

            addClasses.push(pinnedClass);
            pinned.forEach(function (side) {
              addClasses.push(pinnedClass + '-' + side);
            });
          })();
        }

        if (oob.length) {
          (function () {
            var oobClass = undefined;

            if (typeof _this.options.outOfBoundsClass !== 'undefined') {
              oobClass = _this.options.outOfBoundsClass;
            } else {
              oobClass = _this.getClass('out-of-bounds');
            }

            addClasses.push(oobClass);
            oob.forEach(function (side) {
              addClasses.push(oobClass + '-' + side);
            });
          })();
        }

        if (pinned.indexOf('left') >= 0 || pinned.indexOf('right') >= 0) {
          eAttachment.left = tAttachment.left = false;
        }

        if (pinned.indexOf('top') >= 0 || pinned.indexOf('bottom') >= 0) {
          eAttachment.top = tAttachment.top = false;
        }

        if (tAttachment.top !== targetAttachment.top || tAttachment.left !== targetAttachment.left || eAttachment.top !== _this.attachment.top || eAttachment.left !== _this.attachment.left) {
          _this.updateAttachClasses(eAttachment, tAttachment);
        }
      });
      defer(function () {
        if (!(_this.options.addTargetClasses === false)) {
          updateClasses(_this.target, addClasses, allClasses);
        }

        updateClasses(_this.element, addClasses, allClasses);
      });
      return {
        top: top,
        left: left
      };
    }
  });
  /* globals TetherBase */

  'use strict';

  var _TetherBase$Utils = TetherBase.Utils;
  var getBounds = _TetherBase$Utils.getBounds;
  var updateClasses = _TetherBase$Utils.updateClasses;
  var defer = _TetherBase$Utils.defer;
  TetherBase.modules.push({
    position: function position(_ref) {
      var _this = this;

      var top = _ref.top;
      var left = _ref.left;

      var _cache = this.cache('element-bounds', function () {
        return getBounds(_this.element);
      });

      var height = _cache.height;
      var width = _cache.width;
      var targetPos = this.getTargetBounds();
      var bottom = top + height;
      var right = left + width;
      var abutted = [];

      if (top <= targetPos.bottom && bottom >= targetPos.top) {
        ['left', 'right'].forEach(function (side) {
          var targetPosSide = targetPos[side];

          if (targetPosSide === left || targetPosSide === right) {
            abutted.push(side);
          }
        });
      }

      if (left <= targetPos.right && right >= targetPos.left) {
        ['top', 'bottom'].forEach(function (side) {
          var targetPosSide = targetPos[side];

          if (targetPosSide === top || targetPosSide === bottom) {
            abutted.push(side);
          }
        });
      }

      var allClasses = [];
      var addClasses = [];
      var sides = ['left', 'top', 'right', 'bottom'];
      allClasses.push(this.getClass('abutted'));
      sides.forEach(function (side) {
        allClasses.push(_this.getClass('abutted') + '-' + side);
      });

      if (abutted.length) {
        addClasses.push(this.getClass('abutted'));
      }

      abutted.forEach(function (side) {
        addClasses.push(_this.getClass('abutted') + '-' + side);
      });
      defer(function () {
        if (!(_this.options.addTargetClasses === false)) {
          updateClasses(_this.target, addClasses, allClasses);
        }

        updateClasses(_this.element, addClasses, allClasses);
      });
      return true;
    }
  });
  /* globals TetherBase */

  'use strict';

  var _slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i['return']) _i['return']();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError('Invalid attempt to destructure non-iterable instance');
      }
    };
  }();

  TetherBase.modules.push({
    position: function position(_ref) {
      var top = _ref.top;
      var left = _ref.left;

      if (!this.options.shift) {
        return;
      }

      var shift = this.options.shift;

      if (typeof this.options.shift === 'function') {
        shift = this.options.shift.call(this, {
          top: top,
          left: left
        });
      }

      var shiftTop = undefined,
          shiftLeft = undefined;

      if (typeof shift === 'string') {
        shift = shift.split(' ');
        shift[1] = shift[1] || shift[0];
        var _shift = shift;

        var _shift2 = _slicedToArray(_shift, 2);

        shiftTop = _shift2[0];
        shiftLeft = _shift2[1];
        shiftTop = parseFloat(shiftTop, 10);
        shiftLeft = parseFloat(shiftLeft, 10);
      } else {
        shiftTop = shift.top;
        shiftLeft = shift.left;
      }

      top += shiftTop;
      left += shiftLeft;
      return {
        top: top,
        left: left
      };
    }
  });
  return Tether;
});

},{}],"xsolla-login-app":[function(require,module,exports){
"use strict";

var _xlapi = _interopRequireDefault(require("./xlapi"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Created by a.korotaev on 24.06.16.
 */
var toSnakeCase = require('to-snake-case');

require('./supports');

var version = require('../package.json').version;

/**
 * Create an `Auth0` instance with `options`
 *
 * @class XL
 * @constructor
 */
var ROUTES = {
  LOGIN: '',
  REGISTRATION: 'registration',
  RECOVER_PASSWORD: 'reset-password',
  ALL_SOCIALS: 'other',
  SOCIALS_LOGIN: 'socials',
  USERNAME_LOGIN: 'username-login'
};
var IGNORELIST = ['onlyWidgets', 'apiUrl', 'defaultLoginUrl', 'popupBackgroundColor', 'iframeZIndex', 'preloader', 'widgetBaseUrl', 'route', 'inFullscreenMode', 'redirectUrl', 'widgetVersion', 'projectId', 'callbackUrl', 'loginUrl', 'state'];
var DEFAULT_CONFIG = {
  apiUrl: 'https://login.xsolla.com/api/',
  onlyWidgets: false,
  defaultLoginUrl: 'https://xl-widget.xsolla.com/auth.html',
  popupBackgroundColor: 'rgb(187, 187, 187)',
  iframeZIndex: 1000000,
  preloader: '<div></div>',
  widgetBaseUrl: 'https://xl-widget.xsolla.com/',
  route: ROUTES.LOGIN,
  inFullscreenMode: false,
  response_type: 'code'
};
var INVALID_LOGIN_ERROR_CODE = 1;
var INCORRECT_LOGIN_OR_PASSWORD_ERROR_CODE = 2;
var IFRAME_ID = 'XsollaLoginWidgetIframe';
var widgetIframe = document.createElement('iframe');

var XL = /*#__PURE__*/function () {
  function XL() {
    _classCallCheck(this, XL);

    this.socialUrls = {};
    this.eventTypes = {
      LOAD: 'load',
      CLOSE: 'close',
      HIDE_POPUP: 'hide popup',
      REGISTRATION_REQUEST: 'registration request',
      AUTHENTICATED: 'authenticated'
    }; // need for export purposes

    this.ROUTES = ROUTES;
    this.dispatcher = document.createElement('div');
    this.onHideEvent = this.onHideEvent.bind(this);
  }

  _createClass(XL, [{
    key: "init",
    value: function init(options) {
      var _this = this;

      this.config = Object.assign({}, DEFAULT_CONFIG, options);
      this.config.popupBackgroundColor = DEFAULT_CONFIG.popupBackgroundColor;
      this.api = new _xlapi.default(options.projectId, this.config.apiUrl);
      var eventMethod = window.addEventListener ? 'addEventListener' : 'attachEvent';
      var eventer = window[eventMethod];
      var messageEvent = eventMethod === 'attachEvent' ? 'onmessage' : 'message'; // Listen to message from child window

      eventer(messageEvent, function (e) {
        var event;

        if (typeof e.data === 'string') {
          // Old format - string only
          event = new CustomEvent(_this.eventTypes[e.data]);
        } else {
          // New format - {type: 'event', ...}
          event = new CustomEvent(_this.eventTypes[e.data.type], {
            detail: e.data
          });
        }

        _this.dispatcher.dispatchEvent(event);
      }, false);
      Object.keys(this.eventTypes).map(function (eventKey) {
        _this.on(_this.eventTypes[eventKey]);
      });

      if (options.popupBackgroundColor) {
        this.config.popupBackgroundColor = options.popupBackgroundColor;
      }

      this.dispatcher.addEventListener(this.eventTypes.HIDE_POPUP, this.onHideEvent);

      if (!this.config.onlyWidgets) {
        var params = {};
        params.projectId = options.projectId;

        if (this.config.redirectUrl) {
          params.redirect_url = this.config.redirectUrl;
        }

        if (this.config.loginUrl) {
          params.login_url = this.config.loginUrl;
        }

        if (this.config.callbackUrl) {
          params.login_url = this.config.callbackUrl;
        }
      }
    }
    /**
     * Performs login
     * @param prop
     * @param error - call in case error
     * @param success
     */

  }, {
    key: "login",
    value: function login(prop, error, success) {
      var _this2 = this;

      if (!prop || !this.socialUrls) {
        return;
      }
      /**
       * props
       * authType: sn-<social name>, login-pass, sms
       */


      if (prop.authType) {
        if (prop.authType.startsWith('sn-')) {
          var socialUrl = this.socialUrls[prop.authType];

          if (socialUrl != undefined) {
            window.location.href = this.socialUrls[prop.authType];
          } else {
            console.error('Auth type: ' + prop.authType + ' doesn\'t exist');
          }
        } else if (prop.authType == 'login-pass') {
          this.api.loginPassAuth(prop.login, prop.pass, prop.rememberMe, this.config.redirectUrl, function (res) {
            if (res.login_url) {
              var finishAuth = function finishAuth() {
                window.location.href = res.login_url;
              };

              if (success) {
                success({
                  status: 'success',
                  finish: finishAuth,
                  redirectUrl: res.login_url
                });
              } else {
                finishAuth();
              }
            } else {
              error(_this2.createErrorObject('Login or pass not valid', INCORRECT_LOGIN_OR_PASSWORD_ERROR_CODE));
            }
          }, function (err) {
            error(err);
          });
        } else if (prop.authType == 'sms') {
          if (smsAuthStep == 'phone') {
            this.api.smsAuth(prop.phoneNumber, null, null);
          } else if (smsAuthStep == 'code') {}
        } else {
          console.error('Unknown auth type');
        }
      }
    }
  }, {
    key: "createErrorObject",
    value: function createErrorObject(message, code) {
      return {
        error: {
          message: message,
          code: code || -1
        }
      };
    }
  }, {
    key: "getProjectId",
    value: function getProjectId() {
      return this.config.projectId;
    }
  }, {
    key: "getRedirectURL",
    value: function getRedirectURL() {
      return this.config.redirectUrl;
    }
  }, {
    key: "getTheme",
    value: function getTheme() {
      return this.config.theme;
    }
  }, {
    key: "getCallbackUrl",
    value: function getCallbackUrl() {
      if (this.config.callbackUrl) {
        return this.config.callbackUrl;
      } else if (this.config.loginUrl) {
        return this.config.loginUrl;
      } else if (this.config.externalWindow) {
        return DEFAULT_CONFIG.defaultLoginUrl;
      }
    }
  }, {
    key: "getIframeSrc",

    /**
     * @deprecated use getLink instead
     */
    value: function getIframeSrc() {
      return this.getLink.apply(this, arguments);
    }
  }, {
    key: "getLink",
    value: function getLink() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var widgetBaseUrl = options.widgetBaseUrl || this.config.widgetBaseUrl;

      if (widgetBaseUrl.substr(-1) !== '/') {
        widgetBaseUrl += '/';
      }

      var route = options.route || this.config.route;
      var src = widgetBaseUrl + route + '?projectId=' + encodeURIComponent(this.getProjectId()) + '&widget_sdk_version=' + version;
      var useOAuth2 = false; // Fields appended by loop
      // locale, fields, theme, compact, client_id, redirect_uri, response_type, state, externalWindow

      for (var _i = 0, _Object$keys = Object.keys(this.config); _i < _Object$keys.length; _i++) {
        var option = _Object$keys[_i];

        if (!IGNORELIST.includes(option)) {
          var snakeOption = toSnakeCase(option);

          if (!useOAuth2 && snakeOption === 'client_id') {
            useOAuth2 = true;
          }

          src += "&".concat(snakeOption, "=").concat(encodeURIComponent(this.config[option]));
        }
      }

      var redirectUrl = this.getRedirectURL();

      if (redirectUrl) {
        src = src + '&redirectUrl=' + encodeURIComponent(redirectUrl);
      }

      var callbackUrl = this.getCallbackUrl();

      if (callbackUrl) {
        src = src + '&login_url=' + encodeURIComponent(callbackUrl);
      }

      var _this$config = this.config,
          externalWindow = _this$config.externalWindow,
          state = _this$config.state;

      if (externalWindow) {
        src = src + '&external_window=' + encodeURIComponent(externalWindow);
      }

      if (useOAuth2) {
        src += "&state=".concat(encodeURIComponent(state || Math.random().toString(36).substring(2)));
      }

      var widgetVersion = this.config.widgetVersion;

      if (widgetVersion) {
        src += '&version=' + encodeURIComponent(widgetVersion);
      }

      return src;
    }
  }, {
    key: "AuthWidget",
    value: function AuthWidget(elementId, options) {
      var _this3 = this;

      if (this.api) {
        if (!elementId) {
          console.error('No div name!');
        } else {
          if (options == undefined) {
            options = {};
          }

          var width = "".concat(options.width || 400, "px");
          var height = "".concat(options.height || 550, "px");

          widgetIframe.onload = function () {
            element.removeChild(preloader);
            widgetIframe.style.width = '100%';
            widgetIframe.style.height = '100%';
            var event = new CustomEvent('load');

            _this3.dispatcher.dispatchEvent(event);
          };

          widgetIframe.style.width = 0;
          widgetIframe.style.height = 0;
          widgetIframe.frameBorder = '0';
          widgetIframe.src = this.getIframeSrc(options);
          widgetIframe.id = IFRAME_ID;
          var preloader = document.createElement('div');
          preloader.innerHTML = this.config.preloader;
          var element = document.getElementById(elementId);

          if (element) {
            element.style.width = width;
            element.style.height = height;
            element.appendChild(preloader);
            element.appendChild(widgetIframe);
          } else {
            console.error('Element \"' + elementId + '\" not found!');
          }
        }
      } else {
        console.error('Please run XL.init() first');
      }
    }
  }, {
    key: "onCloseEvent",
    value: function onCloseEvent() {
      widgetIframe.parentNode.removeChild(widgetIframe);
    }
  }, {
    key: "_hide",
    value: function _hide() {
      widgetIframe.style.position = '';
      widgetIframe.style.zIndex = '';
      widgetIframe.style.left = '';
      widgetIframe.style.top = '';
      widgetIframe.style.width = 0;
      widgetIframe.style.height = 0;
      widgetIframe.style.backgroundColor = '';
    }
  }, {
    key: "onHideEvent",
    value: function onHideEvent() {
      if (this.config.inFullscreenMode) {
        this._hide();
      }
    }
    /**
     * link event with handler
     * @param event
     * @param handler
     */

  }, {
    key: "on",
    value: function on(event, handler) {
      handler = handler || function () {};

      if (event === this.eventTypes.CLOSE) {
        if (!handler) {
          handler = this.onCloseEvent;
        } else {
          this.dispatcher.removeEventListener(event, this.onCloseEvent);
        }
      }

      this.dispatcher.addEventListener(event, function (e) {
        return handler(e.detail);
      });
    }
  }, {
    key: "_show",
    value: function _show() {
      widgetIframe.style.position = 'fixed';
      widgetIframe.style.zIndex = this.config.iframeZIndex;
      widgetIframe.style.left = '0';
      widgetIframe.style.top = '0';
      widgetIframe.style.width = '100%';
      widgetIframe.style.height = '100%';
      widgetIframe.style.backgroundColor = this.config.popupBackgroundColor;
      this.config.inFullscreenMode = true;
    }
    /**
     * open fullsreen popup for widget
     */

  }, {
    key: "show",
    value: function show() {
      var _this4 = this;

      if (!document.getElementById(IFRAME_ID)) {
        widgetIframe.src = this.getIframeSrc();
        widgetIframe.id = IFRAME_ID;
        widgetIframe.style.width = 0;
        widgetIframe.style.height = 0;
        widgetIframe.frameBorder = '0';

        widgetIframe.onload = function () {
          var event = new CustomEvent('load');

          _this4.dispatcher.dispatchEvent(event);
        };

        this._show();

        document.body.appendChild(widgetIframe);
      } else {
        this._show();
      }
    }
  }]);

  return XL;
}();

var result = new XL();
module.exports = result;

},{"../package.json":3,"./supports":4,"./xlapi":5,"to-snake-case":30}],"xsolla-pay2play-widget":[function(require,module,exports){
"use strict";

var App = require('./application');

var version = require('./version');

var Helpers = require('./helpers');

var polyfills = require('./polyfills');

polyfills.applyPolyfills();

module.exports = function () {
  return {
    create: function create() {
      var app = new App();
      app.init.apply(app, arguments);
      return Helpers.zipObject(['open', 'on', 'off'].map(function (methodName) {
        return [methodName, function () {
          return app[methodName].apply(app, arguments);
        }];
      }));
    },
    version: version,
    eventTypes: App.eventTypes,
    backgroundTypes: App.backgroundTypes,
    foregroundTypes: App.foregroundTypes
  };
}();

},{"./application":33,"./helpers":36,"./polyfills":38,"./version":42}]},{},["xsolla-pay2play-widget"])("xsolla-pay2play-widget")
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
